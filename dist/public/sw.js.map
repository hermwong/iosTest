{"version":3,"sources":["node_modules/browser-pack/_prelude.js","public/js/sw/index.js","node_modules/process/browser.js","node_modules/regenerator-runtime/runtime.js","node_modules/regenerator/runtime.js","node_modules/serviceworker-cache-polyfill/index.js","node_modules/srcset/srcset.js","public/js/shared/indexeddouchbag.js","public/js/shared/storage.js","public/js/shared/wikipedia.js"],"names":[],"mappingsphqnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"sw.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar _this = this;\n\nrequire('regenerator/runtime');\nrequire('serviceworker-cache-polyfill');\nvar wikipedia = require('../shared/wikipedia');\nvar storage = require('../shared/storage');\n\nvar version = '24';\nvar prefix = 'wikioffline';\nvar staticCacheName = prefix + '-static-v' + version;\n\nself.addEventListener('install', function (event) {\n  event.waitUntil(caches.open(staticCacheName).then(function (cache) {\n    return cache.addAll(['/', '/shell.html', '/js/page.js', '/js/page-framework.js', // yeahhhh, we're caching waayyyyy more than we need, but keeps the request tests fair\n    '/css/head-wiki.css', // don't need this when it's inlined, but helps when rendered with blocking CSS in settings\n    '/css/wiki.css']).then(function () {\n      return cache.match('/shell.html');\n    }).then(function (response) {\n      // bit hacky, making the shell start & end from the shell just fetched\n      return response.text().then(function (text) {\n        var headerEnd = text.indexOf('<div class=\"article-header subheading\">');\n        var articleEnd = text.indexOf('<div class=\"background-load-offer card\">');\n        return Promise.all([cache.put('/shell-start.html', new Response(text.slice(0, headerEnd), response)), cache.put('/shell-end.html', new Response(text.slice(articleEnd), response))]);\n      });\n    });\n  }));\n});\n\nvar expectedCaches = [staticCacheName];\n\nself.addEventListener('activate', function (event) {\n  event.waitUntil(caches.keys().then(function (keys) {\n    return Promise.all(keys.map(function (key) {\n      if (key.startsWith(prefix + '-') && !key.startsWith(prefix + '-article-') && expectedCaches.indexOf(key) == -1) {\n        return caches['delete'](key);\n      }\n    }));\n  }));\n});\n\n// This will vanish when the ServiceWorker closes,\n// but that's cool, I want that.\nvar dataTmpCache = {};\n\nself.addEventListener('fetch', function (event) {\n  var requestURL = new URL(event.request.url);\n\n  // catch the root request\n  if (requestURL.origin == location.origin) {\n    if (requestURL.pathname == '/') {\n      event.respondWith(caches.match('/'));\n      return;\n    }\n    if (requestURL.pathname.startsWith('/wiki/')) {\n      if (/\\.(middle.inc)$/.test(requestURL.pathname)) {\n        return;\n      }\n\n      if (/\\.(json|inc)$/.test(requestURL.pathname)) {\n        if (dataTmpCache[requestURL.href]) {\n          var response = dataTmpCache[requestURL.href];\n          delete dataTmpCache[requestURL.href];\n          event.respondWith(response);\n        }\n        return;\n      }\n\n      if (requestURL.search.includes('sw-stream')) {\n        event.respondWith(streamArticle(requestURL));\n        return;\n      }\n\n      // Get ahead of the pack by starting the json request now\n      if (!requestURL.search.includes('no-prefetch')) {\n        var jsonURL = new URL(requestURL);\n        jsonURL.pathname += '.json';\n        jsonURL.search = '';\n        var incURL = new URL(requestURL);\n        incURL.pathname += '.inc';\n        incURL.search = '';\n        dataTmpCache[jsonURL.href] = fetch(jsonURL, {\n          credentials: 'include' // needed for flag cookies\n        });\n        dataTmpCache[incURL.href] = fetch(incURL, {\n          credentials: 'include' // needed for flag cookies\n        });\n      }\n\n      event.respondWith(caches.match('/shell.html'));\n      return;\n    }\n  }\n\n  // default fetch behaviour\n  event.respondWith(caches.match(event.request).then(function (response) {\n    return response || fetch(event.request);\n  }));\n});\n\nfunction streamArticle(url) {\n  try {\n    new ReadableStream({});\n  } catch (e) {\n    return new Response(\"Streams not supported\");\n  }\n  var stream = new ReadableStream({\n    start: function start(controller) {\n      var contentURL = new URL(url);\n      contentURL.pathname += '.middle.inc';\n      var startFetch = caches.match('/shell-start.html');\n      var contentFetch = fetch(contentURL)['catch'](function () {\n        return new Response(\"Failed, soz\");\n      });\n      var endFetch = caches.match('/shell-end.html');\n\n      function pushStream(stream) {\n        var reader = stream.getReader();\n        function read() {\n          return reader.read().then(function (result) {\n            if (result.done) return;\n            controller.enqueue(result.value);\n            return read();\n          });\n        }\n        return read();\n      }\n\n      startFetch.then(function (response) {\n        return pushStream(response.body);\n      }).then(function () {\n        return contentFetch;\n      }).then(function (response) {\n        return pushStream(response.body);\n      }).then(function () {\n        return endFetch;\n      }).then(function (response) {\n        return pushStream(response.body);\n      }).then(function () {\n        return controller.close();\n      });\n    }\n  });\n\n  return new Response(stream, {\n    headers: { 'Content-Type': 'text/html' }\n  });\n}\n\nself.addEventListener('sync', function (event) {\n  // My use of storage here has race conditions. Meh.\n  console.log(\"Good lord, a sync event\");\n\n  event.waitUntil(storage.get('to-bg-cache').then(function (toCache) {\n    toCache = toCache || [];\n\n    return Promise.all(toCache.map(function callee$2$0(articleName) {\n      var article;\n      return regeneratorRuntime.async(function callee$2$0$(context$3$0) {\n        while (1) switch (context$3$0.prev = context$3$0.next) {\n          case 0:\n            context$3$0.next = 2;\n            return regeneratorRuntime.awrap(wikipedia.article(articleName));\n\n          case 2:\n            article = context$3$0.sent;\n            context$3$0.next = 5;\n            return regeneratorRuntime.awrap(article.cache());\n\n          case 5:\n            context$3$0.t0 = registration;\n            context$3$0.next = 8;\n            return regeneratorRuntime.awrap(article.meta);\n\n          case 8:\n            context$3$0.t1 = context$3$0.sent.title;\n            context$3$0.t2 = context$3$0.t1 + \" ready!\";\n            context$3$0.next = 12;\n            return regeneratorRuntime.awrap(article.meta);\n\n          case 12:\n            context$3$0.t3 = context$3$0.sent.urlId;\n            context$3$0.t4 = {\n              icon: \"/imgs/wikipedia-192.png\",\n              body: \"View the article\",\n              data: context$3$0.t3\n            };\n            context$3$0.t0.showNotification.call(context$3$0.t0, context$3$0.t2, context$3$0.t4);\n\n          case 15:\n          case 'end':\n            return context$3$0.stop();\n        }\n      }, null, _this);\n    }));\n  }).then(function (_) {\n    storage.set('to-bg-cache', []);\n  }));\n});\n\nself.addEventListener('notificationclick', function (event) {\n  // assuming only one type of notification right now\n  event.notification.close();\n  clients.openWindow(location.origin + '/wiki/' + event.notification.data);\n});\n\nself.addEventListener('message', function (event) {\n  if (event.data == 'skipWaiting') {\n    self.skipWaiting();\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    draining = true;\n    var currentQueue;\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        var i = -1;\n        while (++i < len) {\n            currentQueue[i]();\n        }\n        len = queue.length;\n    }\n    draining = false;\n}\nprocess.nextTick = function (fun) {\n    queue.push(fun);\n    if (!draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","(function (process,global){\n/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `value instanceof AwaitArgument` to determine if the yielded value is\n  // meant to be awaited. Some may consider the name of this method too\n  // cutesy, but they are curmudgeons.\n  runtime.awrap = function(arg) {\n    return new AwaitArgument(arg);\n  };\n\n  function AwaitArgument(arg) {\n    this.arg = arg;\n  }\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value instanceof AwaitArgument) {\n          return Promise.resolve(value.arg).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    if (typeof process === \"object\" && process.domain) {\n      invoke = process.domain.bind(invoke);\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          if (method === \"return\" ||\n              (method === \"throw\" && delegate.iterator[method] === undefined)) {\n            // A return or throw (when the delegate iterator has no throw\n            // method) always terminates the yield* loop.\n            context.delegate = null;\n\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            var returnMethod = delegate.iterator[\"return\"];\n            if (returnMethod) {\n              var record = tryCatch(returnMethod, delegate.iterator, arg);\n              if (record.type === \"throw\") {\n                // If the return method threw an exception, let that\n                // exception prevail over the original return or throw.\n                method = \"throw\";\n                arg = record.arg;\n                continue;\n              }\n            }\n\n            if (method === \"return\") {\n              // Continue with the outer return, now that the delegate\n              // iterator has been terminated.\n              continue;\n            }\n          }\n\n          var record = tryCatch(\n            delegate.iterator[method],\n            delegate.iterator,\n            arg\n          );\n\n          if (record.type === \"throw\") {\n            context.delegate = null;\n\n            // Like returning generator.throw(uncaught), but without the\n            // overhead of an extra function call.\n            method = \"throw\";\n            arg = record.arg;\n            continue;\n          }\n\n          // Delegate generator ran and handled its own exceptions so\n          // regardless of what the method was, we continue as if it is\n          // \"next\" with an undefined arg.\n          method = \"next\";\n          arg = undefined;\n\n          var info = record.arg;\n          if (info.done) {\n            context[delegate.resultName] = info.value;\n            context.next = delegate.nextLoc;\n          } else {\n            state = GenStateSuspendedYield;\n            return info;\n          }\n\n          context.delegate = null;\n        }\n\n        if (method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = arg;\n\n        } else if (method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw arg;\n          }\n\n          if (context.dispatchException(arg)) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            method = \"next\";\n            arg = undefined;\n          }\n\n        } else if (method === \"return\") {\n          context.abrupt(\"return\", arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          var info = {\n            value: record.arg,\n            done: context.done\n          };\n\n          if (record.arg === ContinueSentinel) {\n            if (context.delegate && method === \"next\") {\n              // Deliberately forget the last sent value so that we don't\n              // accidentally pass it on to the delegate.\n              arg = undefined;\n            }\n          } else {\n            return info;\n          }\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(arg) call above.\n          method = \"throw\";\n          arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n        return !!caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.next = finallyEntry.finallyLoc;\n      } else {\n        this.complete(record);\n      }\n\n      return ContinueSentinel;\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = record.arg;\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,","console.warn(\n  \"The regenerator/runtime module is deprecated; \" +\n    \"please import regenerator-runtime/runtime instead.\"\n);\n\nmodule.exports = require(\"regenerator-runtime/runtime\");\n","if (!Cache.prototype.add) {\n  Cache.prototype.add = function add(request) {\n    return this.addAll([request]);\n  };\n}\n\nif (!Cache.prototype.addAll) {\n  Cache.prototype.addAll = function addAll(requests) {\n    var cache = this;\n\n    // Since DOMExceptions are not constructable:\n    function NetworkError(message) {\n      this.name = 'NetworkError';\n      this.code = 19;\n      this.message = message;\n    }\n    NetworkError.prototype = Object.create(Error.prototype);\n\n    return Promise.resolve().then(function() {\n      if (arguments.length < 1) throw new TypeError();\n      \n      // Simulate sequence<(Request or USVString)> binding:\n      var sequence = [];\n\n      requests = requests.map(function(request) {\n        if (request instanceof Request) {\n          return request;\n        }\n        else {\n          return String(request); // may throw TypeError\n        }\n      });\n\n      return Promise.all(\n        requests.map(function(request) {\n          if (typeof request === 'string') {\n            request = new Request(request);\n          }\n\n          var scheme = new URL(request.url).protocol;\n\n          if (scheme !== 'http:' && scheme !== 'https:') {\n            throw new NetworkError(\"Invalid scheme\");\n          }\n\n          return fetch(request.clone());\n        })\n      );\n    }).then(function(responses) {\n      // TODO: check that requests don't overwrite one another\n      // (don't think this is possible to polyfill due to opaque responses)\n      return Promise.all(\n        responses.map(function(response, i) {\n          return cache.put(requests[i], response);\n        })\n      );\n    }).then(function() {\n      return undefined;\n    });\n  };\n}\n","/*global window */\n(function () {\n\t'use strict';\n\tvar srcset = {};\n\tvar reInt = /^\\d+$/;\n\n\tfunction deepUnique(arr) {\n\t\treturn arr.sort().filter(function (el, i) {\n\t\t\treturn JSON.stringify(el) !== JSON.stringify(arr[i - 1]);\n\t\t});\n\t}\n\n\tfunction unique(arr) {\n\t\treturn arr.filter(function (el, i) {\n\t\t\treturn arr.indexOf(el) === i;\n\t\t});\n\t}\n\n\tsrcset.parse = function (str) {\n\t\treturn deepUnique(str.split(',').map(function (el) {\n\t\t\tvar ret = {};\n\n\t\t\tel.trim().split(/\\s+/).forEach(function (el, i) {\n\t\t\t\tif (i === 0) {\n\t\t\t\t\treturn ret.url = el;\n\t\t\t\t}\n\n\t\t\t\tvar value = el.substring(0, el.length - 1);\n\t\t\t\tvar postfix = el[el.length - 1];\n\t\t\t\tvar intVal = parseInt(value, 10);\n\t\t\t\tvar floatVal = parseFloat(value);\n\n\t\t\t\tif (postfix === 'w' && reInt.test(value)) {\n\t\t\t\t\tret.width = intVal;\n\t\t\t\t} else if (postfix === 'h' && reInt.test(value)) {\n\t\t\t\t\tret.height = intVal;\n\t\t\t\t} else if (postfix === 'x' && !isNaN(floatVal)) {\n\t\t\t\t\tret.density = floatVal;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('Invalid srcset descriptor: ' + el + '.');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn ret;\n\t\t}));\n\t}\n\n\tsrcset.stringify = function (arr) {\n\t\treturn unique(arr.map(function (el) {\n\t\t\tif (!el.url) {\n\t\t\t\tthrow new Error('URL is required.');\n\t\t\t}\n\n\t\t\tvar ret = [el.url];\n\n\t\t\tif (el.width) {\n\t\t\t\tret.push(el.width + 'w');\n\t\t\t}\n\n\t\t\tif (el.height) {\n\t\t\t\tret.push(el.height + 'h');\n\t\t\t}\n\n\t\t\tif (el.density) {\n\t\t\t\tret.push(el.density + 'x');\n\t\t\t}\n\n\t\t\treturn ret.join(' ');\n\t\t})).join(', ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = srcset;\n\t} else {\n\t\twindow.srcset = srcset;\n\t}\n})();\n","'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction promisifyRequest(obj) {\n  return new Promise(function (resolve, reject) {\n    function onsuccess(event) {\n      resolve(obj.result);\n      unlisten();\n    }\n    function onerror(event) {\n      reject(obj.error);\n      unlisten();\n    }\n    function unlisten() {\n      obj.removeEventListener('complete', onsuccess);\n      obj.removeEventListener('success', onsuccess);\n      obj.removeEventListener('error', onerror);\n      obj.removeEventListener('abort', onerror);\n    }\n    obj.addEventListener('complete', onsuccess);\n    obj.addEventListener('success', onsuccess);\n    obj.addEventListener('error', onerror);\n    obj.addEventListener('abort', onerror);\n  });\n}\n\nvar IndexedDouchebag = (function () {\n  function IndexedDouchebag(name, version, upgradeCallback) {\n    _classCallCheck(this, IndexedDouchebag);\n\n    var request = indexedDB.open(name, version);\n    this.ready = promisifyRequest(request);\n    request.onupgradeneeded = function (event) {\n      upgradeCallback(request.result, event.oldVersion);\n    };\n  }\n\n  _createClass(IndexedDouchebag, [{\n    key: 'transaction',\n    value: function transaction(stores, modeOrCallback, callback) {\n      return this.ready.then(function (db) {\n        var mode = 'readonly';\n\n        if (modeOrCallback.apply) {\n          callback = modeOrCallback;\n        } else if (modeOrCallback) {\n          mode = modeOrCallback;\n        }\n\n        var tx = db.transaction(stores, mode);\n        var val = callback(tx, db);\n        var promise = promisifyRequest(tx);\n        var readPromise;\n\n        if (!val) {\n          return promise;\n        }\n\n        if (val[0] && 'result' in val[0]) {\n          readPromise = Promise.all(val.map(promisifyRequest));\n        } else {\n          readPromise = promisifyRequest(val);\n        }\n\n        return promise.then(function () {\n          return readPromise;\n        });\n      });\n    }\n  }, {\n    key: 'get',\n    value: function get(store, key) {\n      return this.transaction(store, function (tx) {\n        return tx.objectStore(store).get(key);\n      });\n    }\n  }, {\n    key: 'put',\n    value: function put(store, key, value) {\n      return this.transaction(store, 'readwrite', function (tx) {\n        tx.objectStore(store).put(value, key);\n      });\n    }\n  }, {\n    key: 'delete',\n    value: function _delete(store, key) {\n      return this.transaction(store, 'readwrite', function (tx) {\n        tx.objectStore(store)['delete'](key);\n      });\n    }\n  }]);\n\n  return IndexedDouchebag;\n})();\n\nmodule.exports = IndexedDouchebag;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9vZmZsaW5lLXdpa2lwZWRpYS9wdWJsaWMvanMvc2hhcmVkL2luZGV4ZWRkb3VjaGJhZy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7OztBQUViLFNBQVMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFO0FBQzdCLFNBQU8sSUFBSSxPQUFPLENBQUMsVUFBUyxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQzNDLGFBQVMsU0FBUyxDQUFDLEtBQUssRUFBRTtBQUN4QixhQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3BCLGNBQVEsRUFBRSxDQUFDO0tBQ1o7QUFDRCxhQUFTLE9BQU8sQ0FBQyxLQUFLLEVBQUU7QUFDdEIsWUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQixjQUFRLEVBQUUsQ0FBQztLQUNaO0FBQ0QsYUFBUyxRQUFRLEdBQUc7QUFDbEIsU0FBRyxDQUFDLG1CQUFtQixDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMvQyxTQUFHLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzlDLFNBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDMUMsU0FBRyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztLQUMzQztBQUNELE9BQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDNUMsT0FBRyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMzQyxPQUFHLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZDLE9BQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7R0FDeEMsQ0FBQyxDQUFDO0NBQ0o7O0lBRUssZ0JBQWdCO0FBQ1QsV0FEUCxnQkFBZ0IsQ0FDUixJQUFJLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRTswQkFEeEMsZ0JBQWdCOztBQUVsQixRQUFJLE9BQU8sR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUM1QyxRQUFJLENBQUMsS0FBSyxHQUFHLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZDLFdBQU8sQ0FBQyxlQUFlLEdBQUcsVUFBUyxLQUFLLEVBQUU7QUFDeEMscUJBQWUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUNuRCxDQUFDO0dBQ0g7O2VBUEcsZ0JBQWdCOztXQVNULHFCQUFDLE1BQU0sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFO0FBQzVDLGFBQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBUyxFQUFFLEVBQUU7QUFDbEMsWUFBSSxJQUFJLEdBQUcsVUFBVSxDQUFDOztBQUV0QixZQUFJLGNBQWMsQ0FBQyxLQUFLLEVBQUU7QUFDeEIsa0JBQVEsR0FBRyxjQUFjLENBQUM7U0FDM0IsTUFDSSxJQUFJLGNBQWMsRUFBRTtBQUN2QixjQUFJLEdBQUcsY0FBYyxDQUFDO1NBQ3ZCOztBQUVELFlBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3RDLFlBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDM0IsWUFBSSxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbkMsWUFBSSxXQUFXLENBQUM7O0FBRWhCLFlBQUksQ0FBQyxHQUFHLEVBQUU7QUFDUixpQkFBTyxPQUFPLENBQUM7U0FDaEI7O0FBRUQsWUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksUUFBUSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUNoQyxxQkFBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7U0FDdEQsTUFDSTtBQUNILHFCQUFXLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDckM7O0FBRUQsZUFBTyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVc7QUFDN0IsaUJBQU8sV0FBVyxDQUFDO1NBQ3BCLENBQUMsQ0FBQztPQUNKLENBQUMsQ0FBQztLQUNKOzs7V0FFRSxhQUFDLEtBQUssRUFBRSxHQUFHLEVBQUU7QUFDZCxhQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFVBQVMsRUFBRSxFQUFFO0FBQzFDLGVBQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDdkMsQ0FBQyxDQUFDO0tBQ0o7OztXQUVFLGFBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7QUFDckIsYUFBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsVUFBUyxFQUFFLEVBQUU7QUFDdkQsVUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO09BQ3ZDLENBQUMsQ0FBQztLQUNKOzs7V0FFSyxpQkFBQyxLQUFLLEVBQUUsR0FBRyxFQUFFO0FBQ2pCLGFBQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLFVBQVMsRUFBRSxFQUFFO0FBQ3ZELFVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLFVBQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztPQUNuQyxDQUFDLENBQUM7S0FDSjs7O1NBMURHLGdCQUFnQjs7O0FBNkR0QixNQUFNLENBQUMsT0FBTyxHQUFHLGdCQUFnQixDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9vZmZsaW5lLXdpa2lwZWRpYS9wdWJsaWMvanMvc2hhcmVkL2luZGV4ZWRkb3VjaGJhZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdChvYmopIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGZ1bmN0aW9uIG9uc3VjY2VzcyhldmVudCkge1xuICAgICAgcmVzb2x2ZShvYmoucmVzdWx0KTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uZXJyb3IoZXZlbnQpIHtcbiAgICAgIHJlamVjdChvYmouZXJyb3IpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdW5saXN0ZW4oKSB7XG4gICAgICBvYmoucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCBvbnN1Y2Nlc3MpO1xuICAgICAgb2JqLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBvbnN1Y2Nlc3MpO1xuICAgICAgb2JqLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgICBvYmoucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbmVycm9yKTtcbiAgICB9XG4gICAgb2JqLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgb25zdWNjZXNzKTtcbiAgICBvYmouYWRkRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIG9uc3VjY2Vzcyk7XG4gICAgb2JqLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgb2JqLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25lcnJvcik7XG4gIH0pO1xufVxuXG5jbGFzcyBJbmRleGVkRG91Y2hlYmFnIHtcbiAgY29uc3RydWN0b3IobmFtZSwgdmVyc2lvbiwgdXBncmFkZUNhbGxiYWNrKSB7XG4gICAgdmFyIHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihuYW1lLCB2ZXJzaW9uKTtcbiAgICB0aGlzLnJlYWR5ID0gcHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KTtcbiAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB1cGdyYWRlQ2FsbGJhY2socmVxdWVzdC5yZXN1bHQsIGV2ZW50Lm9sZFZlcnNpb24pO1xuICAgIH07XG4gIH1cblxuICB0cmFuc2FjdGlvbihzdG9yZXMsIG1vZGVPckNhbGxiYWNrLCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLnJlYWR5LnRoZW4oZnVuY3Rpb24oZGIpIHtcbiAgICAgIHZhciBtb2RlID0gJ3JlYWRvbmx5JztcblxuICAgICAgaWYgKG1vZGVPckNhbGxiYWNrLmFwcGx5KSB7XG4gICAgICAgIGNhbGxiYWNrID0gbW9kZU9yQ2FsbGJhY2s7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChtb2RlT3JDYWxsYmFjaykge1xuICAgICAgICBtb2RlID0gbW9kZU9yQ2FsbGJhY2s7XG4gICAgICB9XG5cbiAgICAgIHZhciB0eCA9IGRiLnRyYW5zYWN0aW9uKHN0b3JlcywgbW9kZSk7XG4gICAgICB2YXIgdmFsID0gY2FsbGJhY2sodHgsIGRiKTtcbiAgICAgIHZhciBwcm9taXNlID0gcHJvbWlzaWZ5UmVxdWVzdCh0eCk7XG4gICAgICB2YXIgcmVhZFByb21pc2U7XG5cbiAgICAgIGlmICghdmFsKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsWzBdICYmICdyZXN1bHQnIGluIHZhbFswXSkge1xuICAgICAgICByZWFkUHJvbWlzZSA9IFByb21pc2UuYWxsKHZhbC5tYXAocHJvbWlzaWZ5UmVxdWVzdCkpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlYWRQcm9taXNlID0gcHJvbWlzaWZ5UmVxdWVzdCh2YWwpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcmVhZFByb21pc2U7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBnZXQoc3RvcmUsIGtleSkge1xuICAgIHJldHVybiB0aGlzLnRyYW5zYWN0aW9uKHN0b3JlLCBmdW5jdGlvbih0eCkge1xuICAgICAgcmV0dXJuIHR4Lm9iamVjdFN0b3JlKHN0b3JlKS5nZXQoa2V5KTtcbiAgICB9KTtcbiAgfTtcblxuICBwdXQoc3RvcmUsIGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2FjdGlvbihzdG9yZSwgJ3JlYWR3cml0ZScsIGZ1bmN0aW9uKHR4KSB7XG4gICAgICB0eC5vYmplY3RTdG9yZShzdG9yZSkucHV0KHZhbHVlLCBrZXkpO1xuICAgIH0pO1xuICB9O1xuXG4gIGRlbGV0ZShzdG9yZSwga2V5KSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNhY3Rpb24oc3RvcmUsICdyZWFkd3JpdGUnLCBmdW5jdGlvbih0eCkge1xuICAgICAgdHgub2JqZWN0U3RvcmUoc3RvcmUpLmRlbGV0ZShrZXkpO1xuICAgIH0pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEluZGV4ZWREb3VjaGViYWc7Il19","'use strict';\n\nvar Idb = require('./indexeddouchbag');\nvar idb;\n\n// avoid opening idb until first call\nfunction getIdb() {\n  if (!idb) {\n    idb = new Idb('wiki-offline-keyval', 1, function (db) {\n      db.createObjectStore('keyval');\n    });\n  }\n  return idb;\n}\n\nif (self.indexedDB) {\n  module.exports = {\n    get: function get(key) {\n      return getIdb().get('keyval', key);\n    },\n    set: function set(key, val) {\n      return getIdb().put('keyval', key, val);\n    },\n    'delete': function _delete(key) {\n      return getIdb()['delete']('keyval', key);\n    }\n  };\n} else {\n  module.exports = {\n    get: function get(key) {\n      return Promise.resolve(localStorage.getItem(key));\n    },\n    set: function set(key, val) {\n      return Promise.resolve(localStorage.setItem(key, val));\n    },\n    'delete': function _delete(key) {\n      return Promise.resolve(localStorage.removeItem(key));\n    }\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9vZmZsaW5lLXdpa2lwZWRpYS9wdWJsaWMvanMvc2hhcmVkL3N0b3JhZ2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUN2QyxJQUFJLEdBQUcsQ0FBQzs7O0FBR1IsU0FBUyxNQUFNLEdBQUc7QUFDaEIsTUFBSSxDQUFDLEdBQUcsRUFBRTtBQUNSLE9BQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEVBQUUsVUFBUyxFQUFFLEVBQUU7QUFDbkQsUUFBRSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ2hDLENBQUMsQ0FBQztHQUNKO0FBQ0QsU0FBTyxHQUFHLENBQUM7Q0FDWjs7QUFFRCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDbEIsUUFBTSxDQUFDLE9BQU8sR0FBRztBQUNmLE9BQUcsRUFBRSxhQUFBLEdBQUc7YUFBSSxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQztLQUFBO0FBQ3ZDLE9BQUcsRUFBRSxhQUFDLEdBQUcsRUFBRSxHQUFHO2FBQUssTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO0tBQUE7QUFDbkQsY0FBUSxpQkFBQSxHQUFHO2FBQUksTUFBTSxFQUFFLFVBQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDO0tBQUE7R0FDOUMsQ0FBQztDQUNILE1BQ0k7QUFDSCxRQUFNLENBQUMsT0FBTyxHQUFHO0FBQ2YsT0FBRyxFQUFFLGFBQUEsR0FBRzthQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUFBO0FBQ3RELE9BQUcsRUFBRSxhQUFDLEdBQUcsRUFBRSxHQUFHO2FBQUssT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUFBO0FBQ2xFLGNBQVEsaUJBQUEsR0FBRzthQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUFBO0dBQzdELENBQUM7Q0FDSCIsImZpbGUiOiIvVXNlcnMvaGVybWFudy9Eb2N1bWVudHMvaGVybXdvbmcvb2ZmbGluZS13aWtpcGVkaWEvcHVibGljL2pzL3NoYXJlZC9zdG9yYWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIElkYiA9IHJlcXVpcmUoJy4vaW5kZXhlZGRvdWNoYmFnJyk7XG52YXIgaWRiO1xuXG4vLyBhdm9pZCBvcGVuaW5nIGlkYiB1bnRpbCBmaXJzdCBjYWxsXG5mdW5jdGlvbiBnZXRJZGIoKSB7XG4gIGlmICghaWRiKSB7XG4gICAgaWRiID0gbmV3IElkYignd2lraS1vZmZsaW5lLWtleXZhbCcsIDEsIGZ1bmN0aW9uKGRiKSB7XG4gICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZSgna2V5dmFsJyk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGlkYjtcbn1cblxuaWYgKHNlbGYuaW5kZXhlZERCKSB7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGdldDoga2V5ID0+IGdldElkYigpLmdldCgna2V5dmFsJywga2V5KSxcbiAgICBzZXQ6IChrZXksIHZhbCkgPT4gZ2V0SWRiKCkucHV0KCdrZXl2YWwnLCBrZXksIHZhbCksXG4gICAgZGVsZXRlOiBrZXkgPT4gZ2V0SWRiKCkuZGVsZXRlKCdrZXl2YWwnLCBrZXkpXG4gIH07XG59XG5lbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZ2V0OiBrZXkgPT4gUHJvbWlzZS5yZXNvbHZlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkpLFxuICAgIHNldDogKGtleSwgdmFsKSA9PiBQcm9taXNlLnJlc29sdmUobG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWwpKSxcbiAgICBkZWxldGU6IGtleSA9PiBQcm9taXNlLnJlc29sdmUobG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KSlcbiAgfTtcbn0iXX0=","'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar srcset = require('srcset');\nvar storage = require('./storage');\n\nvar cachePrefix = \"wikioffline-article-\";\n\nfunction getMetaRequest(name) {\n  return new Request('/wiki/' + name + '.json', {\n    credentials: 'include' // needed for flag cookies\n  });\n}\n\nfunction getArticleRequest(name) {\n  return new Request('/wiki/' + name + '.inc', {\n    credentials: 'include' // needed for flag cookies\n  });\n}\n\nvar Article = (function () {\n  function Article(name) {\n    var _this = this;\n\n    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var _ref$fromCache = _ref.fromCache;\n    var fromCache = _ref$fromCache === undefined ? false : _ref$fromCache;\n\n    _classCallCheck(this, Article);\n\n    var fetcher = fromCache ? caches.match.bind(caches) : fetch;\n    this._metaPromise = fetcher(getMetaRequest(name));\n    this._articlePromise = fetcher(getArticleRequest(name));\n\n    this.ready = this._metaPromise.then(function (r) {\n      if (!r) throw Error('No response');\n    });\n\n    var data = this.ready.then(function (_) {\n      return _this._metaPromise;\n    }).then(function (r) {\n      return r.clone().json();\n    });\n\n    this._html = undefined;\n\n    this.meta = data.then(function (meta) {\n      meta.updated = new Date(meta.updated);\n      return meta;\n    });\n\n    this._cacheName = this.meta.then(function (data) {\n      return cachePrefix + data.urlId;\n    });\n  }\n\n  _createClass(Article, [{\n    key: 'getHtml',\n    value: function getHtml() {\n      return regeneratorRuntime.async(function getHtml$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            if (!(this._html === undefined)) {\n              context$2$0.next = 4;\n              break;\n            }\n\n            context$2$0.next = 3;\n            return regeneratorRuntime.awrap(this._articlePromise.then(function (r) {\n              return r.clone().text();\n            }));\n\n          case 3:\n            this._html = context$2$0.sent;\n\n          case 4:\n            return context$2$0.abrupt('return', this._html);\n\n          case 5:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'getHtmlResponse',\n    value: function getHtmlResponse() {\n      return this._articlePromise.then(function (r) {\n        return r.clone();\n      });\n    }\n  }, {\n    key: '_createCacheArticleResponse',\n    value: function _createCacheArticleResponse() {\n      var text, devicePixelRatio;\n      return regeneratorRuntime.async(function _createCacheArticleResponse$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return regeneratorRuntime.awrap(this.getHtml());\n\n          case 2:\n            text = context$2$0.sent;\n            context$2$0.t1 = self.devicePixelRatio;\n\n            if (context$2$0.t1) {\n              context$2$0.next = 8;\n              break;\n            }\n\n            context$2$0.next = 7;\n            return regeneratorRuntime.awrap(storage.get('devicePixelRatio'));\n\n          case 7:\n            context$2$0.t1 = context$2$0.sent;\n\n          case 8:\n            context$2$0.t0 = context$2$0.t1;\n\n            if (context$2$0.t0) {\n              context$2$0.next = 11;\n              break;\n            }\n\n            context$2$0.t0 = 2;\n\n          case 11:\n            devicePixelRatio = context$2$0.t0;\n\n            // yes I'm parsing HTML with regex muahahaha\n            // I'm flattening srcset to make it deterministic\n            text = text.replace(/<img[^>]*>/ig, function (match) {\n              // start with the image src as density 1\n              var newSrc = (/src=(['\"])(.*?)\\1/i.exec(match) || [])[2];\n\n              match = match.replace(/srcset=(['\"])(.*?)\\1/ig, function (srcsetAll, _, srcsetInner) {\n                try {\n                  var parsedSrcset = srcset.parse(srcsetInner).sort(function (a, b) {\n                    return a.density < b.density ? -1 : 1;\n                  });\n                  var lastDensity = 1;\n\n                  var _iteratorNormalCompletion = true;\n                  var _didIteratorError = false;\n                  var _iteratorError = undefined;\n\n                  try {\n                    for (var _iterator = parsedSrcset[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                      var srcSetItem = _step.value;\n\n                      if (devicePixelRatio > lastDensity) {\n                        newSrc = srcSetItem.url;\n                      }\n                      if (devicePixelRatio <= srcSetItem.density) {\n                        break;\n                      }\n                      lastDensity = srcSetItem.density;\n                    }\n                  } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion && _iterator['return']) {\n                        _iterator['return']();\n                      }\n                    } finally {\n                      if (_didIteratorError) {\n                        throw _iteratorError;\n                      }\n                    }\n                  }\n                } catch (e) {}\n\n                return '';\n              });\n\n              if (newSrc) {\n                match = match.replace(/src=(['\"]).*?\\1/ig, 'src=\"' + newSrc + '\"');\n              }\n\n              return match;\n            });\n\n            context$2$0.t2 = Response;\n            context$2$0.t3 = text;\n            context$2$0.next = 17;\n            return regeneratorRuntime.awrap(this._articlePromise);\n\n          case 17:\n            context$2$0.t4 = context$2$0.sent.headers;\n            context$2$0.t5 = {\n              headers: context$2$0.t4\n            };\n            return context$2$0.abrupt('return', new context$2$0.t2(context$2$0.t3, context$2$0.t5));\n\n          case 20:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'cache',\n    value: function cache() {\n      var previouslyCached, cache, imgRe, regexResult, articleResponse, htmlText, imgSrcs, urlId, cacheOpeations;\n      return regeneratorRuntime.async(function cache$(context$2$0) {\n        var _this2 = this;\n\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.next = 2;\n            return regeneratorRuntime.awrap(this.isCached());\n\n          case 2:\n            previouslyCached = context$2$0.sent;\n            context$2$0.t0 = regeneratorRuntime;\n            context$2$0.t1 = caches;\n            context$2$0.next = 7;\n            return regeneratorRuntime.awrap(this._cacheName);\n\n          case 7:\n            context$2$0.t2 = context$2$0.sent;\n            context$2$0.t3 = context$2$0.t1.open.call(context$2$0.t1, context$2$0.t2);\n            context$2$0.next = 11;\n            return context$2$0.t0.awrap.call(context$2$0.t0, context$2$0.t3);\n\n          case 11:\n            cache = context$2$0.sent;\n            imgRe = /<img[^>]*src=(['\"])(.*?)\\1[^>]*>/ig;\n            context$2$0.next = 15;\n            return regeneratorRuntime.awrap(this._createCacheArticleResponse());\n\n          case 15:\n            articleResponse = context$2$0.sent;\n            context$2$0.next = 18;\n            return regeneratorRuntime.awrap(articleResponse.clone().text());\n\n          case 18:\n            htmlText = context$2$0.sent;\n            imgSrcs = new Set();\n            context$2$0.next = 22;\n            return regeneratorRuntime.awrap(this.meta);\n\n          case 22:\n            urlId = context$2$0.sent.urlId;\n\n            while (regexResult = imgRe.exec(htmlText)) {\n              imgSrcs.add(regexResult[2]);\n            }\n\n            context$2$0.t4 = cache;\n            context$2$0.t5 = getMetaRequest(urlId);\n            context$2$0.next = 28;\n            return regeneratorRuntime.awrap(this._metaPromise);\n\n          case 28:\n            context$2$0.t6 = context$2$0.sent.clone();\n            context$2$0.t7 = context$2$0.t4.put.call(context$2$0.t4, context$2$0.t5, context$2$0.t6);\n            context$2$0.t8 = cache.put(getArticleRequest(urlId), articleResponse);\n            cacheOpeations = [context$2$0.t7, context$2$0.t8];\n\n            imgSrcs.forEach(function (url) {\n              var request = new Request(url, { mode: 'no-cors' });\n              cacheOpeations.push(\n              // This is a workaround to https://code.google.com/p/chromium/issues/detail?id=477658\n              // Once the bug is fixed, we can just do this:\n              // fetch(request).then(response => cache.put(request, response))\n              caches.match(request).then(function (response) {\n                return response || fetch(request);\n              }).then(function (response) {\n                return cache.put(request, response);\n              }));\n            });\n\n            return context$2$0.abrupt('return', Promise.all(cacheOpeations)['catch'](function (err) {\n              if (!previouslyCached) {\n                _this2.uncache();\n              }\n              throw err;\n            }).then(function (_) {\n              return undefined;\n            }));\n\n          case 34:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'uncache',\n    value: function uncache() {\n      return regeneratorRuntime.async(function uncache$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.t0 = caches;\n            context$2$0.next = 3;\n            return regeneratorRuntime.awrap(this._cacheName);\n\n          case 3:\n            context$2$0.t1 = context$2$0.sent;\n            return context$2$0.abrupt('return', context$2$0.t0['delete'].call(context$2$0.t0, context$2$0.t1));\n\n          case 5:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }, {\n    key: 'isCached',\n    value: function isCached() {\n      return regeneratorRuntime.async(function isCached$(context$2$0) {\n        while (1) switch (context$2$0.prev = context$2$0.next) {\n          case 0:\n            context$2$0.t0 = caches;\n            context$2$0.next = 3;\n            return regeneratorRuntime.awrap(this._cacheName);\n\n          case 3:\n            context$2$0.t1 = context$2$0.sent;\n            return context$2$0.abrupt('return', context$2$0.t0.has.call(context$2$0.t0, context$2$0.t1));\n\n          case 5:\n          case 'end':\n            return context$2$0.stop();\n        }\n      }, null, this);\n    }\n  }]);\n\n  return Article;\n})();\n\nvar wikipedia = {\n  search: function search(term) {\n    return fetch('/search.json?s=' + term, {\n      credentials: 'include' // needed for flag cookies\n    }).then(function (r) {\n      return r.json();\n    });\n  },\n\n  article: function article(name) {\n    var _ref2,\n        _ref2$fromCache,\n        fromCache,\n        article,\n        args$1$0 = arguments;\n\n    return regeneratorRuntime.async(function article$(context$1$0) {\n      while (1) switch (context$1$0.prev = context$1$0.next) {\n        case 0:\n          _ref2 = args$1$0.length <= 1 || args$1$0[1] === undefined ? {} : args$1$0[1];\n          _ref2$fromCache = _ref2.fromCache;\n          fromCache = _ref2$fromCache === undefined ? false : _ref2$fromCache;\n\n          if (!(fromCache && !('caches' in self))) {\n            context$1$0.next = 5;\n            break;\n          }\n\n          return context$1$0.abrupt('return', Promise.reject(Error(\"Caching not supported\")));\n\n        case 5:\n          article = new Article(name, { fromCache: fromCache });\n          context$1$0.next = 8;\n          return regeneratorRuntime.awrap(article.ready);\n\n        case 8:\n          return context$1$0.abrupt('return', article);\n\n        case 9:\n        case 'end':\n          return context$1$0.stop();\n      }\n    }, null, this);\n  },\n\n  getCachedArticleData: function getCachedArticleData() {\n    var articleNames;\n    return regeneratorRuntime.async(function getCachedArticleData$(context$1$0) {\n      var _this3 = this;\n\n      while (1) switch (context$1$0.prev = context$1$0.next) {\n        case 0:\n          if ('caches' in self) {\n            context$1$0.next = 2;\n            break;\n          }\n\n          return context$1$0.abrupt('return', []);\n\n        case 2:\n          context$1$0.next = 4;\n          return regeneratorRuntime.awrap(caches.keys());\n\n        case 4:\n          context$1$0.t0 = function (cacheName) {\n            return cacheName.startsWith(cachePrefix);\n          };\n\n          context$1$0.t1 = function (cacheName) {\n            return cacheName.slice(cachePrefix.length);\n          };\n\n          articleNames = context$1$0.sent.filter(context$1$0.t0).map(context$1$0.t1);\n          return context$1$0.abrupt('return', Promise.all(articleNames.map(function callee$1$0(name) {\n            var response;\n            return regeneratorRuntime.async(function callee$1$0$(context$2$0) {\n              while (1) switch (context$2$0.prev = context$2$0.next) {\n                case 0:\n                  context$2$0.next = 2;\n                  return regeneratorRuntime.awrap(caches.match(getMetaRequest(name)));\n\n                case 2:\n                  response = context$2$0.sent;\n\n                  if (response) {\n                    context$2$0.next = 6;\n                    break;\n                  }\n\n                  wikipedia.uncache(name);\n                  return context$2$0.abrupt('return', false);\n\n                case 6:\n                  ;\n\n                  return context$2$0.abrupt('return', response.json());\n\n                case 8:\n                case 'end':\n                  return context$2$0.stop();\n              }\n            }, null, _this3);\n          })).then(function (vals) {\n            return vals.filter(function (val) {\n              return val;\n            });\n          }));\n\n        case 8:\n        case 'end':\n          return context$1$0.stop();\n      }\n    }, null, this);\n  },\n\n  uncache: function uncache(name) {\n    return caches['delete'](cachePrefix + name);\n  }\n};\n\nmodule.exports = wikipedia;\n\n// workers don't have access to DPR\n\n// get a fresh request, as it may have originally been redirected\n\n// seeing a bug where the response here is gone - not sure why\n// but I'll guard against it\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}