(function(dust){dust.register("flags",body_0);var blocks={"bodyContent":body_1};function body_0(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.p("base",ctx,ctx,{});}body_0.__dustBody=!0;function body_1(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.w("<link rel=\"stylesheet\" href=\"/css/flags.css\"><div class=\"subheading\"><div class=\"heading-text\"><h1>Site render flags</h1></div></div><div class=\"card\"><div class=\"card-content\"><p>Here you can configure how the site is served by setting cookies:</p><form action=\"./\" class=\"flags-form\"><label><div class=\"input-container\"><input type=\"checkbox\" name=\"client-render\" value=\"1\"").x(ctx.getPath(false, ["flags","client-render"]),ctx,{"block":body_2},{}).w("></div><div class=\"desc\"><div class=\"main\">Prevent server-side rendering of articles.</div><div class=\"sub\">Article fetching &amp; rendering will be handled by JS. Note that the client will always render articles when the ServiceWorker is present.</div></div></label><label><div class=\"input-container\"><input type=\"checkbox\" name=\"avoid-wikipedia\" value=\"1\"").x(ctx.getPath(false, ["flags","avoid-wikipedia"]),ctx,{"block":body_3},{}).w("></div><div class=\"desc\"><div class=\"main\">Avoid going to wikipedia for article data.</div><div class=\"sub\">Although all articles will be about Google. But who <em>doesn't</em> want that?</div></div></label><label><div class=\"input-container\"><input type=\"checkbox\" name=\"prevent-sw\" value=\"1\"").x(ctx.getPath(false, ["flags","prevent-sw"]),ctx,{"block":body_4},{}).w("></div><div class=\"desc\"><div class=\"main\">Prevent ServiceWorker registration.</div><div class=\"sub\">Will also unregister an existing ServiceWorker. This removes all offline-first behaviour.</div></div></label><label><div class=\"input-container\"><input type=\"checkbox\" name=\"disable-chunking\" value=\"1\"").x(ctx.getPath(false, ["flags","disable-chunking"]),ctx,{"block":body_5},{}).w("></div><div class=\"desc\"><div class=\"main\">Disable chunking</div><div class=\"sub\">All pages are served with chunking, this is particularly useful on article pages as it allows the top-of-page content to be rendered while the request to wikipedia is still in progress. This only impacts server-side rendering.</div></div></label><label><div class=\"input-container\"><input type=\"checkbox\" name=\"no-wiki-piping\" value=\"1\"").x(ctx.getPath(false, ["flags","no-wiki-piping"]),ctx,{"block":body_6},{}).w("></div><div class=\"desc\"><div class=\"main\">Disable wikipedia piping</div><div class=\"sub\">By default, content is piped from wikipedia to the response. If you tick this, content will be fully buffered on the server before sending. This only impacts server-side rendering.</div></div></label><label><div class=\"input-container\"><input type=\"checkbox\" name=\"auto-cache-article\" value=\"1\"").x(ctx.getPath(false, ["flags","auto-cache-article"]),ctx,{"block":body_7},{}).w("></div><div class=\"desc\"><div class=\"main\">Auto-cache article</div><div class=\"sub\">Every article you visit will be cached for offline viewing. Obviously this can land you with a massive cache.</div></div></label><label><div class=\"input-container\"><input type=\"checkbox\" name=\"prevent-streaming\" value=\"1\"").x(ctx.getPath(false, ["flags","prevent-streaming"]),ctx,{"block":body_8},{}).w("></div><div class=\"desc\"><div class=\"main\">Prevent client-side streaming</div><div class=\"sub\">When rendering articles on the client, the streaming API is used in Canary to get a quicker first render. This setting disables that optimisation.</div></div></label><label><div class=\"input-container\"><input type=\"checkbox\" name=\"no-css-async-hack\" value=\"1\"").x(ctx.getPath(false, ["flags","no-css-async-hack"]),ctx,{"block":body_9},{}).w("></div><div class=\"desc\"><div class=\"main\">Don't load extra CSS with XHR.</div><div class=\"sub\">XHR is used to hack around Chrome/Safari's blocking behaviour. With this set, a standard link tag is used just before article content. You may need to remove your ServiceWorker to pick up this change.</div></div></label><label><div class=\"input-container\"><input type=\"checkbox\" name=\"article-css-import\" value=\"1\"").x(ctx.getPath(false, ["flags","article-css-import"]),ctx,{"block":body_10},{}).w("></div><div class=\"desc\"><div class=\"main\">Use @import to load article CSS.</div><div class=\"sub\">Rather than a link tag. This requires the \"Don't load extra CSS with XHR\" flag, and has no effect if \"Regular CSS loading\" is used. Complicated eh?</div></div></label><label><div class=\"input-container\"><input type=\"checkbox\" name=\"regular-css-loading\" value=\"1\"").x(ctx.getPath(false, ["flags","regular-css-loading"]),ctx,{"block":body_11},{}).w("></div><div class=\"desc\"><div class=\"main\">Regular CSS loading.</div><div class=\"sub\">Load all CSS using a link tag in the head. By deafult, a small amount of CSS loads inline, and the second loads depending on the above option. You may need to remove your ServiceWorker to pick up this change.</div></div></label><label><div class=\"input-container\"><input type=\"checkbox\" name=\"blocking-js\" value=\"1\"").x(ctx.getPath(false, ["flags","blocking-js"]),ctx,{"block":body_12},{}).w("></div><div class=\"desc\"><div class=\"main\">Render-blocking JS</div><div class=\"sub\">Get that framework feel by making the JS render-blocking. By default it loads deferred. You may need to remove your ServiceWorker to pick up this change.</div></div></label><label><div class=\"input-container\"><input type=\"checkbox\" name=\"framework-js\" value=\"1\"").x(ctx.getPath(false, ["flags","framework-js"]),ctx,{"block":body_13},{}).w("></div><div class=\"desc\"><div class=\"main\">Framework-sized JS</div><div class=\"sub\">Get that framework feel even more by inflating the size of the JS. You may need to remove your ServiceWorker to pick up this change.</div></div></label><label><div class=\"input-container\"><input type=\"checkbox\" name=\"push-state-updates\" value=\"1\"").x(ctx.getPath(false, ["flags","push-state-updates"]),ctx,{"block":body_14},{}).w("></div><div class=\"desc\"><div class=\"main\">Pushstate Updates</div><div class=\"sub\">Prevent navigations, and instead update content in-place.</div></div></label><label><div class=\"input-container\"><input type=\"checkbox\" name=\"sw-stream-url\" value=\"1\"").x(ctx.getPath(false, ["flags","sw-stream-url"]),ctx,{"block":body_15},{}).w("></div><div class=\"desc\"><div class=\"main\">Add sw-stream to every URL</div><div class=\"sub\">It's a hacky way to do service worker streaming right now.</div></div></label><div class=\"submit-container\"><button type=\"submit\" class=\"material-button\">Save</button></div></form><p>Or use the following querystring to overwrite flags for a single request:</p><div class=\"flags-query\">?use-url-flags&amp;</div><p>And here's a WebPageTest script:</p><div class=\"flags-webpagetest-script\"></div></div></div>");}body_1.__dustBody=!0;function body_2(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.w(" checked");}body_2.__dustBody=!0;function body_3(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.w(" checked");}body_3.__dustBody=!0;function body_4(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.w(" checked");}body_4.__dustBody=!0;function body_5(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.w(" checked");}body_5.__dustBody=!0;function body_6(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.w(" checked");}body_6.__dustBody=!0;function body_7(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.w(" checked");}body_7.__dustBody=!0;function body_8(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.w(" checked");}body_8.__dustBody=!0;function body_9(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.w(" checked");}body_9.__dustBody=!0;function body_10(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.w(" checked");}body_10.__dustBody=!0;function body_11(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.w(" checked");}body_11.__dustBody=!0;function body_12(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.w(" checked");}body_12.__dustBody=!0;function body_13(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.w(" checked");}body_13.__dustBody=!0;function body_14(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.w(" checked");}body_14.__dustBody=!0;function body_15(chk,ctx){ctx=ctx.shiftBlocks(blocks);return chk.w(" checked");}body_15.__dustBody=!0;return body_0}(dust));