/*!
 * Copyright 2017 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _controllerAppController = require('./controller/AppController');

var _controllerAppController2 = _interopRequireDefault(_controllerAppController);

new _controllerAppController2['default']();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL3ZvaWNlbWVtby1jb3JlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt1Q0FpQjBCLDRCQUE0Qjs7OztBQUV0RCwwQ0FBbUIsQ0FBQyIsImZpbGUiOiIvVXNlcnMvaGVybWFudy9Eb2N1bWVudHMvaGVybXdvbmcvaW9zVGVzdC9zcmMvc2NyaXB0cy92b2ljZW1lbW8tY29yZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5cbmltcG9ydCBBcHBDb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlci9BcHBDb250cm9sbGVyJztcblxubmV3IEFwcENvbnRyb2xsZXIoKTtcbiJdfQ==
},{"./controller/AppController":3}],2:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var Config = {
  name: 'voicememo',
  version: 1,
  stores: {
    'MemoModel': {
      properties: {
        autoIncrement: true,
        keyPath: 'url'
      },
      indexes: {
        time: { unique: true }
      }
    },
    'AppModel': {
      deleteOnUpgrade: true,
      properties: {
        autoIncrement: true
      }
    }
  }
};

exports['default'] = Config;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2NvbmZpZy9Db25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxJQUFNLE1BQU0sR0FBRztBQUNiLE1BQUksRUFBRSxXQUFXO0FBQ2pCLFNBQU8sRUFBRSxDQUFDO0FBQ1YsUUFBTSxFQUFFO0FBQ04sZUFBVyxFQUFFO0FBQ1gsZ0JBQVUsRUFBRTtBQUNWLHFCQUFhLEVBQUUsSUFBSTtBQUNuQixlQUFPLEVBQUUsS0FBSztPQUNmO0FBQ0QsYUFBTyxFQUFFO0FBQ1AsWUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtPQUN2QjtLQUNGO0FBQ0QsY0FBVSxFQUFFO0FBQ1YscUJBQWUsRUFBRSxJQUFJO0FBQ3JCLGdCQUFVLEVBQUU7QUFDVixxQkFBYSxFQUFFLElBQUk7T0FDcEI7S0FDRjtHQUNGO0NBQ0YsQ0FBQzs7cUJBRWEsTUFBTSIsImZpbGUiOiIvVXNlcnMvaGVybWFudy9Eb2N1bWVudHMvaGVybXdvbmcvaW9zVGVzdC9zcmMvc2NyaXB0cy9jb25maWcvQ29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuY29uc3QgQ29uZmlnID0ge1xuICBuYW1lOiAndm9pY2VtZW1vJyxcbiAgdmVyc2lvbjogMSxcbiAgc3RvcmVzOiB7XG4gICAgJ01lbW9Nb2RlbCc6IHtcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZSxcbiAgICAgICAga2V5UGF0aDogJ3VybCdcbiAgICAgIH0sXG4gICAgICBpbmRleGVzOiB7XG4gICAgICAgIHRpbWU6IHsgdW5pcXVlOiB0cnVlIH1cbiAgICAgIH1cbiAgICB9LFxuICAgICdBcHBNb2RlbCc6IHtcbiAgICAgIGRlbGV0ZU9uVXBncmFkZTogdHJ1ZSxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29uZmlnO1xuIl19
},{}],3:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Controller2 = require('./Controller');

var _Controller3 = _interopRequireDefault(_Controller2);

var _modelAppModel = require('../model/AppModel');

var _modelAppModel2 = _interopRequireDefault(_modelAppModel);

var _modelMemoModel = require('../model/MemoModel');

var _modelMemoModel2 = _interopRequireDefault(_modelMemoModel);

var _libsPubSub = require('../libs/PubSub');

var _libsPubSub2 = _interopRequireDefault(_libsPubSub);

var _libsToaster = require('../libs/Toaster');

var _libsToaster2 = _interopRequireDefault(_libsToaster);

var _libsDialog = require('../libs/Dialog');

var _libsDialog2 = _interopRequireDefault(_libsDialog);

var _libsRouter = require('../libs/Router');

var _libsRouter2 = _interopRequireDefault(_libsRouter);

var AppController = (function (_Controller) {
  _inherits(AppController, _Controller);

  function AppController() {
    var _this = this;

    _classCallCheck(this, AppController);

    _get(Object.getPrototypeOf(AppController.prototype), 'constructor', this).call(this);

    this.appModel = null;
    this.sideNavToggleButton = document.querySelector('.js-toggle-menu');
    this.sideNav = document.querySelector('.js-side-nav');
    this.sideNavContent = this.sideNav.querySelector('.js-side-nav-content');
    this.newRecordingButton = document.querySelector('.js-new-recording-btn');

    this.deleteMemos = this.sideNav.querySelector('.js-delete-memos');
    this.deleteMemos.addEventListener('click', this.deleteAllMemos);

    _modelAppModel2['default'].get(1).then(function (appModel) {

      (0, _libsRouter2['default'])().then(function (router) {
        router.add('_root', function (data) {
          return _this.show(data);
        }, function () {
          return _this.hide();
        });
      });

      _this.appModel = appModel;

      if (appModel === undefined) {
        _this.appModel = new _modelAppModel2['default']();
        _this.appModel.put();
      }

      if (_this.appModel.firstRun) {
        // Show welcome screen
      }

      var touchStartX;
      var sideNavTransform;
      var onSideNavTouchStart = function onSideNavTouchStart(e) {
        touchStartX = e.touches[0].pageX;
      };

      var onSideNavTouchMove = function onSideNavTouchMove(e) {

        var newTouchX = e.touches[0].pageX;
        sideNavTransform = Math.min(0, newTouchX - touchStartX);

        if (sideNavTransform < 0) e.preventDefault();

        _this.sideNavContent.style.transform = 'translateX(' + sideNavTransform + 'px)';
      };

      var onSideNavTouchEnd = function onSideNavTouchEnd(e) {

        if (sideNavTransform < -1) _this.closeSideNav();
      };

      _this.sideNav.addEventListener('click', function () {
        _this.closeSideNav();
      });
      _this.sideNavContent.addEventListener('click', function (e) {
        e.stopPropagation();
      });
      _this.sideNavContent.addEventListener('touchstart', onSideNavTouchStart);
      _this.sideNavContent.addEventListener('touchmove', onSideNavTouchMove);
      _this.sideNavContent.addEventListener('touchend', onSideNavTouchEnd);

      if (!_this.supportsGUMandWebAudio()) {
        document.body.classList.add('superfail');
        _this.newRecordingButton.classList.add('hidden');
        return;
      }

      // Wait for the first frame because sometimes
      // window.onload fires too quickly.
      requestAnimationFrame(function () {

        function showWaitAnimation(e) {
          e.target.classList.add('pending');
        }

        _this.newRecordingButton.addEventListener('click', showWaitAnimation);

        _this.loadScript('/scripts/voicememo-list.js');
        _this.loadScript('/scripts/voicememo-details.js');
        _this.loadScript('/scripts/voicememo-record.js').then(function () {
          _this.newRecordingButton.removeEventListener('click', showWaitAnimation);
        });

        _this.sideNavToggleButton.addEventListener('click', function () {
          _this.toggleSideNav();
        });
      });

      if ('serviceWorker' in navigator) {

        navigator.serviceWorker.register('/sw.js', {
          scope: '/'
        }).then(function (registration) {

          var isUpdate = false;

          // If this fires we should check if there's a new Service Worker
          // waiting to be activated. If so, ask the user to force refresh.
          if (registration.active) isUpdate = true;

          registration.onupdatefound = function (event) {

            console.log("A new Service Worker version has been found...");

            // If an update is found the spec says that there is a new Service
            // Worker installing, so we should wait for that to complete then
            // show a notification to the user.
            registration.installing.onstatechange = function (event) {

              if (this.state === 'installed') {

                console.log("Service Worker Installed.");

                if (isUpdate) {
                  (0, _libsToaster2['default'])().then(function (toaster) {
                    toaster.toast('App updated. Restart for the new version.');
                  });
                } else {
                  (0, _libsToaster2['default'])().then(function (toaster) {
                    toaster.toast('App ready for offline use.');
                  });
                }
              } else {
                console.log("New Service Worker state: ", this.state);
              }
            };
          };
        }, function (err) {
          console.log(err);
        });
      }
    });
  }

  _createClass(AppController, [{
    key: 'supportsGUMandWebAudio',
    value: function supportsGUMandWebAudio() {
      return (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia) && (window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext);
    }
  }, {
    key: 'show',
    value: function show() {
      this.sideNavToggleButton.tabIndex = 1;
      this.newRecordingButton.tabIndex = 2;
    }
  }, {
    key: 'hide',
    value: function hide() {
      this.sideNavToggleButton.tabIndex = -1;
      this.newRecordingButton.tabIndex = -1;

      (0, _libsPubSub2['default'])().then(function (ps) {
        ps.pub('list-covered');
      });
    }
  }, {
    key: 'toggleSideNav',
    value: function toggleSideNav() {

      if (this.sideNav.classList.contains('side-nav--visible')) this.closeSideNav();else this.openSideNav();
    }
  }, {
    key: 'openSideNav',
    value: function openSideNav() {
      var _this2 = this;

      this.sideNav.classList.add('side-nav--visible');
      this.sideNavToggleButton.focus();

      var onSideNavTransitionEnd = function onSideNavTransitionEnd(e) {

        // Force the focus, otherwise touch doesn't always work.
        _this2.sideNavContent.tabIndex = 0;
        _this2.sideNavContent.focus();
        _this2.sideNavContent.removeAttribute('tabIndex');

        _this2.sideNavContent.classList.remove('side-nav__content--animatable');
        _this2.sideNavContent.removeEventListener('transitionend', onSideNavTransitionEnd);
      };

      this.sideNavContent.classList.add('side-nav__content--animatable');
      this.sideNavContent.addEventListener('transitionend', onSideNavTransitionEnd);

      requestAnimationFrame(function () {
        _this2.sideNavContent.style.transform = 'translateX(0px)';
      });
    }
  }, {
    key: 'closeSideNav',
    value: function closeSideNav() {
      var _this3 = this;

      this.sideNav.classList.remove('side-nav--visible');
      this.sideNavContent.classList.add('side-nav__content--animatable');
      this.sideNavContent.style.transform = 'translateX(-102%)';

      var onSideNavClose = function onSideNavClose() {
        _this3.sideNav.removeEventListener('transitionend', onSideNavClose);
      };
      this.sideNav.addEventListener('transitionend', onSideNavClose);
    }
  }, {
    key: 'resetAllData',
    value: function resetAllData() {
      (0, _libsDialog2['default'])().then(function (dialog) {

        return dialog.show('Delete all the things?', 'Are you sure you want to remove all data?');
      }).then(function () {
        _modelAppModel2['default'].nuke();
        window.location = '/';
      })['catch'](function () {});
    }
  }, {
    key: 'deleteAllMemos',
    value: function deleteAllMemos() {
      (0, _libsDialog2['default'])().then(function (dialog) {

        return dialog.show('Delete all memos?', 'Are you sure you want to remove all memos?');
      }).then(function () {

        _modelMemoModel2['default'].deleteAll().then(function () {
          (0, _libsPubSub2['default'])().then(function (ps) {
            ps.pub(_modelMemoModel2['default'].UPDATED);
          });

          (0, _libsToaster2['default'])().then(function (toaster) {
            toaster.toast('All memos deleted.');
          });

          (0, _libsRouter2['default'])().then(function (router) {
            router.go('/');
          });
        });
      })['catch'](function () {});
    }
  }]);

  return AppController;
})(_Controller3['default']);

exports['default'] = AppController;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../libs/Dialog":7,"../libs/PubSub":8,"../libs/Router":9,"../libs/Toaster":10,"../model/AppModel":11,"../model/MemoModel":12,"./Controller":4}],4:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Controller = (function () {
  function Controller() {
    _classCallCheck(this, Controller);
  }

  _createClass(Controller, [{
    key: 'loadScript',
    value: function loadScript(url) {

      return new Promise(function (resolve, reject) {
        var script = document.createElement('script');
        script.async = true;
        script.src = url;

        script.onload = resolve;
        script.onerror = reject;

        document.head.appendChild(script);
      });
    }
  }, {
    key: 'loadCSS',
    value: function loadCSS(url) {
      return new Promise(function (resolve, reject) {

        var xhr = new XMLHttpRequest();
        xhr.open('GET', url);
        xhr.responseType = 'text';
        xhr.onload = function (e) {

          if (this.status == 200) {

            var style = document.createElement('style');
            style.textContent = xhr.response;
            document.head.appendChild(style);
            resolve();
          } else {

            reject();
          }
        };

        xhr.send();
      });
    }
  }]);

  return Controller;
})();

exports['default'] = Controller;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2NvbnRyb2xsZXIvQ29udHJvbGxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFpQnFCLFVBQVU7V0FBVixVQUFVOzBCQUFWLFVBQVU7OztlQUFWLFVBQVU7O1dBRWxCLG9CQUFDLEdBQUcsRUFBRTs7QUFFZixhQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBSztBQUN0QyxZQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzlDLGNBQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ3BCLGNBQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDOztBQUVqQixjQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztBQUN4QixjQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQzs7QUFFeEIsZ0JBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO09BQ25DLENBQUMsQ0FBQztLQUNKOzs7V0FFTyxpQkFBQyxHQUFHLEVBQUU7QUFDWixhQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBSzs7QUFFdEMsWUFBSSxHQUFHLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztBQUMvQixXQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNyQixXQUFHLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQztBQUMxQixXQUFHLENBQUMsTUFBTSxHQUFHLFVBQVMsQ0FBQyxFQUFFOztBQUV2QixjQUFJLElBQUksQ0FBQyxNQUFNLElBQUksR0FBRyxFQUFFOztBQUV0QixnQkFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM1QyxpQkFBSyxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBQ2pDLG9CQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqQyxtQkFBTyxFQUFFLENBQUM7V0FFWCxNQUFNOztBQUVMLGtCQUFNLEVBQUUsQ0FBQztXQUVWO1NBQ0YsQ0FBQTs7QUFFRCxXQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7T0FFWixDQUFDLENBQUM7S0FDSjs7O1NBekNrQixVQUFVOzs7cUJBQVYsVUFBVSIsImZpbGUiOiIvVXNlcnMvaGVybWFudy9Eb2N1bWVudHMvaGVybXdvbmcvaW9zVGVzdC9zcmMvc2NyaXB0cy9jb250cm9sbGVyL0NvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250cm9sbGVyIHtcblxuICBsb2FkU2NyaXB0ICh1cmwpIHtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgICAgc2NyaXB0LnNyYyA9IHVybDtcblxuICAgICAgc2NyaXB0Lm9ubG9hZCA9IHJlc29sdmU7XG4gICAgICBzY3JpcHQub25lcnJvciA9IHJlamVjdDtcblxuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIH0pO1xuICB9XG5cbiAgbG9hZENTUyAodXJsKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT0gMjAwKSB7XG5cbiAgICAgICAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0geGhyLnJlc3BvbnNlO1xuICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgICAgICAgIHJlc29sdmUoKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgcmVqZWN0KCk7XG5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB4aHIuc2VuZCgpO1xuXG4gICAgfSk7XG4gIH1cblxufVxuIl19
},{}],5:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = ConfigManagerInstance;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _configConfig = require('../config/Config');

var _configConfig2 = _interopRequireDefault(_configConfig);

function ConfigManagerInstance() {

  if (typeof window.ConfigManagerInstance_ !== 'undefined') return Promise.resolve(window.ConfigManagerInstance_);

  window.ConfigManagerInstance_ = new ConfigManager();

  return Promise.resolve(window.ConfigManagerInstance_);
}

var ConfigManager = (function () {
  function ConfigManager() {
    _classCallCheck(this, ConfigManager);

    this.config = _configConfig2['default'];
  }

  _createClass(ConfigManager, [{
    key: 'getStore',
    value: function getStore(storeName) {
      return this.config_.stores[storeName];
    }
  }, {
    key: 'config',
    set: function set(c) {
      this.config_ = c;
    },
    get: function get() {
      return this.config_;
    }
  }]);

  return ConfigManager;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2xpYnMvQ29uZmlnTWFuYWdlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FCQW1Cd0IscUJBQXFCOzs7Ozs7NEJBRjFCLGtCQUFrQjs7OztBQUV0QixTQUFTLHFCQUFxQixHQUFJOztBQUUvQyxNQUFJLE9BQU8sTUFBTSxDQUFDLHNCQUFzQixLQUFLLFdBQVcsRUFDdEQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDOztBQUV4RCxRQUFNLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQzs7QUFFcEQsU0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0NBQ3ZEOztJQUVLLGFBQWE7QUFFTCxXQUZSLGFBQWEsR0FFRjswQkFGWCxhQUFhOztBQUdmLFFBQUksQ0FBQyxNQUFNLDRCQUFTLENBQUM7R0FDdEI7O2VBSkcsYUFBYTs7V0FjUixrQkFBQyxTQUFTLEVBQUU7QUFDbkIsYUFBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUN2Qzs7O1NBVlUsYUFBQyxDQUFDLEVBQUU7QUFDYixVQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztLQUNsQjtTQUVVLGVBQUc7QUFDWixhQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7S0FDckI7OztTQVpHLGFBQWEiLCJmaWxlIjoiL1VzZXJzL2hlcm1hbncvRG9jdW1lbnRzL2hlcm13b25nL2lvc1Rlc3Qvc3JjL3NjcmlwdHMvbGlicy9Db25maWdNYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IENvbmZpZyBmcm9tICcuLi9jb25maWcvQ29uZmlnJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29uZmlnTWFuYWdlckluc3RhbmNlICgpIHtcblxuICBpZiAodHlwZW9mIHdpbmRvdy5Db25maWdNYW5hZ2VySW5zdGFuY2VfICE9PSAndW5kZWZpbmVkJylcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdpbmRvdy5Db25maWdNYW5hZ2VySW5zdGFuY2VfKTtcblxuICB3aW5kb3cuQ29uZmlnTWFuYWdlckluc3RhbmNlXyA9IG5ldyBDb25maWdNYW5hZ2VyKCk7XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh3aW5kb3cuQ29uZmlnTWFuYWdlckluc3RhbmNlXyk7XG59XG5cbmNsYXNzIENvbmZpZ01hbmFnZXIge1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmNvbmZpZyA9IENvbmZpZztcbiAgfVxuXG4gIHNldCBjb25maWcgKGMpIHtcbiAgICB0aGlzLmNvbmZpZ18gPSBjO1xuICB9XG5cbiAgZ2V0IGNvbmZpZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnXztcbiAgfVxuXG4gIGdldFN0b3JlIChzdG9yZU5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWdfLnN0b3Jlc1tzdG9yZU5hbWVdO1xuICB9XG5cbn1cbiJdfQ==
},{"../config/Config":2}],6:[function(require,module,exports){
/**
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = DatabaseInstance;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ConfigManager = require('./ConfigManager');

var _ConfigManager2 = _interopRequireDefault(_ConfigManager);

function DatabaseInstance() {

  if (typeof window.DatabaseInstance_ !== 'undefined') return Promise.resolve(window.DatabaseInstance_);

  window.DatabaseInstance_ = new Database();

  return Promise.resolve(window.DatabaseInstance_);
}

var Database = (function () {
  function Database() {
    var _this = this;

    _classCallCheck(this, Database);

    (0, _ConfigManager2['default'])().then(function (configManager) {

      var config = configManager.config;

      _this.db_ = null;
      _this.name_ = config.name;
      _this.version_ = config.version;
      _this.stores_ = config.stores;
    });
  }

  _createClass(Database, [{
    key: 'getStore',
    value: function getStore(storeName) {

      if (!this.stores_[storeName]) throw 'There is no store with name "' + storeName + '"';

      return this.stores_[storeName];
    }
  }, {
    key: 'open',
    value: function open() {
      var _this2 = this;

      if (this.db_) return Promise.resolve(this.db_);

      return new Promise(function (resolve, reject) {

        var dbOpen = indexedDB.open(_this2.name_, _this2.version_);

        dbOpen.onupgradeneeded = function (e) {

          _this2.db_ = e.target.result;

          var storeNames = Object.keys(_this2.stores_);
          var storeName;

          for (var s = 0; s < storeNames.length; s++) {

            storeName = storeNames[s];

            // If the store already exists
            if (_this2.db_.objectStoreNames.contains(storeName)) {

              // Check to see if the store should be deleted.
              // If so delete, and if not skip to the next store.
              if (_this2.stores_[storeName].deleteOnUpgrade) _this2.db_.deleteObjectStore(storeName);else continue;
            }

            var dbStore = _this2.db_.createObjectStore(storeName, _this2.stores_[storeName].properties);

            if (typeof _this2.stores_[storeName].indexes !== 'undefined') {
              var indexes = _this2.stores_[storeName].indexes;
              var indexNames = Object.keys(indexes);
              var index;

              for (var i = 0; i < indexNames.length; i++) {
                index = indexNames[i];
                dbStore.createIndex(index, index, indexes[index]);
              }
            }
          }
        };

        dbOpen.onsuccess = function (e) {
          _this2.db_ = e.target.result;
          resolve(_this2.db_);
        };

        dbOpen.onerror = function (e) {
          reject(e);
        };
      });
    }
  }, {
    key: 'close',
    value: function close() {
      var _this3 = this;

      return new Promise(function (resolve, reject) {

        if (!_this3.db_) reject('No database connection');

        _this3.db_.close();
        resolve(_this3.db_);
      });
    }
  }, {
    key: 'nuke',
    value: function nuke() {
      var _this4 = this;

      return new Promise(function (resolve, reject) {

        console.log("Nuking... " + _this4.name_);

        _this4.close();

        var dbTransaction = indexedDB.deleteDatabase(_this4.name_);
        dbTransaction.onsuccess = function (e) {
          console.log("Nuked...");
          resolve(e);
        };

        dbTransaction.onerror = function (e) {
          reject(e);
        };
      });
    }
  }, {
    key: 'put',
    value: function put(storeName, value, key) {

      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readwrite');
          var dbStore = dbTransaction.objectStore(storeName);
          var dbRequest = dbStore.put(value, key);

          dbTransaction.oncomplete = function (e) {
            resolve(dbRequest.result);
          };

          dbTransaction.onabort = dbTransaction.onerror = function (e) {
            reject(e);
          };
        });
      });
    }
  }, {
    key: 'get',
    value: function get(storeName, value) {

      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readonly');
          var dbStore = dbTransaction.objectStore(storeName);
          var dbStoreRequest;

          dbTransaction.oncomplete = function (e) {
            resolve(dbStoreRequest.result);
          };

          dbTransaction.onabort = dbTransaction.onerror = function (e) {
            reject(e);
          };

          dbStoreRequest = dbStore.get(value);
        });
      });
    }
  }, {
    key: 'getAll',
    value: function getAll(storeName, index, order) {

      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readonly');
          var dbStore = dbTransaction.objectStore(storeName);
          var dbCursor;

          if (typeof order !== 'string') order = 'next';

          if (typeof index === 'string') dbCursor = dbStore.index(index).openCursor(null, order);else dbCursor = dbStore.openCursor();

          var dbResults = [];

          dbCursor.onsuccess = function (e) {
            var cursor = e.target.result;

            if (cursor) {
              dbResults.push({
                key: cursor.key,
                value: cursor.value
              });
              cursor['continue']();
            } else {
              resolve(dbResults);
            }
          };

          dbCursor.onerror = function (e) {
            reject(e);
          };
        });
      });
    }
  }, {
    key: 'delete',
    value: function _delete(storeName, key) {
      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readwrite');
          var dbStore = dbTransaction.objectStore(storeName);

          dbTransaction.oncomplete = function (e) {
            resolve(e);
          };

          dbTransaction.onabort = dbTransaction.onerror = function (e) {
            reject(e);
          };

          dbStore['delete'](key);
        });
      });
    }
  }, {
    key: 'deleteAll',
    value: function deleteAll(storeName) {

      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readwrite');
          var dbStore = dbTransaction.objectStore(storeName);
          var dbRequest = dbStore.clear();

          dbRequest.onsuccess = function (e) {
            resolve(e);
          };

          dbRequest.onerror = function (e) {
            reject(e);
          };
        });
      });
    }
  }]);

  return Database;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./ConfigManager":5}],7:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = DialogInstance;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function DialogInstance() {

  if (typeof window.DialogInstance_ !== 'undefined') return Promise.resolve(window.DialogInstance_);

  window.DialogInstance_ = new Dialog();

  return Promise.resolve(window.DialogInstance_);
}

var Dialog = (function () {
  function Dialog() {
    _classCallCheck(this, Dialog);

    this.view = document.querySelector('.js-dialog');
    this.title = this.view.querySelector('.js-title');
    this.message = this.view.querySelector('.js-message');
    this.cancelButton = this.view.querySelector('.js-cancel');
    this.okayButton = this.view.querySelector('.js-okay');
  }

  _createClass(Dialog, [{
    key: 'show',
    value: function show(title, message, hideCancel) {
      var _this = this;

      this.title.textContent = title;
      this.message.textContent = message;
      this.view.classList.add('dialog-view--visible');

      if (hideCancel) this.cancelButton.classList.add('hidden');else this.cancelButton.classList.remove('hidden');

      return new Promise(function (resolve, reject) {

        var removeEventListenersAndHide = function removeEventListenersAndHide() {
          _this.cancelButton.removeEventListener('click', onCancel);
          _this.okayButton.removeEventListener('click', onOkay);
          _this.view.classList.remove('dialog-view--visible');
        };

        var onCancel = function onCancel(e) {
          removeEventListenersAndHide();
          reject();
        };

        var onOkay = function onOkay(e) {
          removeEventListenersAndHide();
          resolve();
        };

        _this.cancelButton.addEventListener('click', onCancel);
        _this.okayButton.addEventListener('click', onOkay);
      });
    }
  }]);

  return Dialog;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2xpYnMvRGlhbG9nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUJBaUJ3QixjQUFjOzs7O0FBQXZCLFNBQVMsY0FBYyxHQUFJOztBQUV4QyxNQUFJLE9BQU8sTUFBTSxDQUFDLGVBQWUsS0FBSyxXQUFXLEVBQy9DLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7O0FBRWpELFFBQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQzs7QUFFdEMsU0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztDQUNoRDs7SUFFSyxNQUFNO0FBRUUsV0FGUixNQUFNLEdBRUs7MEJBRlgsTUFBTTs7QUFHUixRQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDakQsUUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNsRCxRQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3RELFFBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDMUQsUUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztHQUN2RDs7ZUFSRyxNQUFNOztXQVVMLGNBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUU7OztBQUVoQyxVQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7QUFDL0IsVUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO0FBQ25DLFVBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDOztBQUVoRCxVQUFJLFVBQVUsRUFDWixJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsS0FFMUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztBQUUvQyxhQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBSzs7QUFFdEMsWUFBSSwyQkFBMkIsR0FBRyxTQUE5QiwyQkFBMkIsR0FBUztBQUN0QyxnQkFBSyxZQUFZLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3pELGdCQUFLLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDckQsZ0JBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQztTQUNwRCxDQUFBOztBQUVELFlBQUksUUFBUSxHQUFHLFNBQVgsUUFBUSxDQUFJLENBQUMsRUFBSztBQUNwQixxQ0FBMkIsRUFBRSxDQUFDO0FBQzlCLGdCQUFNLEVBQUUsQ0FBQztTQUNWLENBQUE7O0FBRUQsWUFBSSxNQUFNLEdBQUcsU0FBVCxNQUFNLENBQUksQ0FBQyxFQUFLO0FBQ2xCLHFDQUEyQixFQUFFLENBQUM7QUFDOUIsaUJBQU8sRUFBRSxDQUFDO1NBQ1gsQ0FBQTs7QUFFRCxjQUFLLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDdEQsY0FBSyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO09BRW5ELENBQUMsQ0FBQztLQUNKOzs7U0EzQ0csTUFBTSIsImZpbGUiOiIvVXNlcnMvaGVybWFudy9Eb2N1bWVudHMvaGVybXdvbmcvaW9zVGVzdC9zcmMvc2NyaXB0cy9saWJzL0RpYWxvZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERpYWxvZ0luc3RhbmNlICgpIHtcblxuICBpZiAodHlwZW9mIHdpbmRvdy5EaWFsb2dJbnN0YW5jZV8gIT09ICd1bmRlZmluZWQnKVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod2luZG93LkRpYWxvZ0luc3RhbmNlXyk7XG5cbiAgd2luZG93LkRpYWxvZ0luc3RhbmNlXyA9IG5ldyBEaWFsb2coKTtcblxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdpbmRvdy5EaWFsb2dJbnN0YW5jZV8pO1xufVxuXG5jbGFzcyBEaWFsb2cge1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnZpZXcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZGlhbG9nJyk7XG4gICAgdGhpcy50aXRsZSA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtdGl0bGUnKTtcbiAgICB0aGlzLm1lc3NhZ2UgPSB0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignLmpzLW1lc3NhZ2UnKTtcbiAgICB0aGlzLmNhbmNlbEJ1dHRvbiA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtY2FuY2VsJyk7XG4gICAgdGhpcy5va2F5QnV0dG9uID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy1va2F5Jyk7XG4gIH1cblxuICBzaG93ICh0aXRsZSwgbWVzc2FnZSwgaGlkZUNhbmNlbCkge1xuXG4gICAgdGhpcy50aXRsZS50ZXh0Q29udGVudCA9IHRpdGxlO1xuICAgIHRoaXMubWVzc2FnZS50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG4gICAgdGhpcy52aWV3LmNsYXNzTGlzdC5hZGQoJ2RpYWxvZy12aWV3LS12aXNpYmxlJyk7XG5cbiAgICBpZiAoaGlkZUNhbmNlbClcbiAgICAgIHRoaXMuY2FuY2VsQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgIGVsc2VcbiAgICAgIHRoaXMuY2FuY2VsQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgdmFyIHJlbW92ZUV2ZW50TGlzdGVuZXJzQW5kSGlkZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5jYW5jZWxCdXR0b24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNhbmNlbCk7XG4gICAgICAgIHRoaXMub2theUJ1dHRvbi5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG9uT2theSk7XG4gICAgICAgIHRoaXMudmlldy5jbGFzc0xpc3QucmVtb3ZlKCdkaWFsb2ctdmlldy0tdmlzaWJsZScpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb25DYW5jZWwgPSAoZSkgPT4ge1xuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyc0FuZEhpZGUoKTtcbiAgICAgICAgcmVqZWN0KCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvbk9rYXkgPSAoZSkgPT4ge1xuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyc0FuZEhpZGUoKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNhbmNlbEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2FuY2VsKTtcbiAgICAgIHRoaXMub2theUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uT2theSk7XG5cbiAgICB9KTtcbiAgfVxuXG59XG4iXX0=
},{}],8:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = PubSubInstance;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function PubSubInstance() {

  if (typeof window.PubSubInstance_ !== 'undefined') return Promise.resolve(window.PubSubInstance_);

  window.PubSubInstance_ = new PubSub();

  return Promise.resolve(window.PubSubInstance_);
}

var PubSub = (function () {
  function PubSub() {
    _classCallCheck(this, PubSub);

    this.subs = {};
  }

  _createClass(PubSub, [{
    key: 'sub',
    value: function sub(name, callback) {

      if (!this.subs[name]) this.subs[name] = [];

      this.subs[name].push(callback);
    }
  }, {
    key: 'unsub',
    value: function unsub(name, callback) {

      if (!this.subs[name]) return;

      var index = this.subs.indexOf(callback);

      if (index === -1) return;

      this.subs.splice(index, 1);
    }
  }, {
    key: 'pub',
    value: function pub(name, message) {

      if (!this.subs[name]) return;

      this.subs[name].forEach(function (subscriber) {
        subscriber(message);
      });
    }
  }]);

  return PubSub;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2xpYnMvUHViU3ViLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUJBaUJ3QixjQUFjOzs7O0FBQXZCLFNBQVMsY0FBYyxHQUFJOztBQUV4QyxNQUFJLE9BQU8sTUFBTSxDQUFDLGVBQWUsS0FBSyxXQUFXLEVBQy9DLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7O0FBRWpELFFBQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQzs7QUFFdEMsU0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztDQUNoRDs7SUFFSyxNQUFNO0FBRUUsV0FGUixNQUFNLEdBRUs7MEJBRlgsTUFBTTs7QUFHUixRQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztHQUNoQjs7ZUFKRyxNQUFNOztXQU1OLGFBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTs7QUFFbkIsVUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDOztBQUV2QixVQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNoQzs7O1dBRUssZUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFFOztBQUVyQixVQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFDbEIsT0FBTzs7QUFFVCxVQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzs7QUFFeEMsVUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQ2QsT0FBTzs7QUFFVCxVQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDNUI7OztXQUVHLGFBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRTs7QUFFbEIsVUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ2xCLE9BQU87O0FBRVQsVUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxVQUFVLEVBQUk7QUFDcEMsa0JBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztPQUNyQixDQUFDLENBQUE7S0FDSDs7O1NBbkNHLE1BQU0iLCJmaWxlIjoiL1VzZXJzL2hlcm1hbncvRG9jdW1lbnRzL2hlcm13b25nL2lvc1Rlc3Qvc3JjL3NjcmlwdHMvbGlicy9QdWJTdWIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQdWJTdWJJbnN0YW5jZSAoKSB7XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cuUHViU3ViSW5zdGFuY2VfICE9PSAndW5kZWZpbmVkJylcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdpbmRvdy5QdWJTdWJJbnN0YW5jZV8pO1xuXG4gIHdpbmRvdy5QdWJTdWJJbnN0YW5jZV8gPSBuZXcgUHViU3ViKCk7XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh3aW5kb3cuUHViU3ViSW5zdGFuY2VfKTtcbn1cblxuY2xhc3MgUHViU3ViIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5zdWJzID0ge307XG4gIH1cblxuICBzdWIgKG5hbWUsIGNhbGxiYWNrKSB7XG5cbiAgICBpZiAoIXRoaXMuc3Vic1tuYW1lXSlcbiAgICAgIHRoaXMuc3Vic1tuYW1lXSA9IFtdO1xuXG4gICAgdGhpcy5zdWJzW25hbWVdLnB1c2goY2FsbGJhY2spO1xuICB9XG5cbiAgdW5zdWIgKG5hbWUsIGNhbGxiYWNrKSB7XG5cbiAgICBpZiAoIXRoaXMuc3Vic1tuYW1lXSlcbiAgICAgIHJldHVybjtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuc3Vicy5pbmRleE9mKGNhbGxiYWNrKTtcblxuICAgIGlmIChpbmRleCA9PT0gLTEpXG4gICAgICByZXR1cm47XG5cbiAgICB0aGlzLnN1YnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuXG4gIHB1YiAobmFtZSwgbWVzc2FnZSkge1xuXG4gICAgaWYgKCF0aGlzLnN1YnNbbmFtZV0pXG4gICAgICByZXR1cm47XG5cbiAgICB0aGlzLnN1YnNbbmFtZV0uZm9yRWFjaChzdWJzY3JpYmVyID0+IHtcbiAgICAgIHN1YnNjcmliZXIobWVzc2FnZSk7XG4gICAgfSlcbiAgfVxuXG59XG4iXX0=
},{}],9:[function(require,module,exports){
/**
 * Copyright 2014 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = RouterInstance;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function RouterInstance() {

  if (typeof window.RouterInstance_ !== 'undefined') return Promise.resolve(window.RouterInstance_);

  window.RouterInstance_ = new Router();

  return Promise.resolve(window.RouterInstance_);
}

var Router = (function () {
  function Router() {
    var _this = this;

    _classCallCheck(this, Router);

    this.routes = {};
    this.currentAction = null;
    this.loader = document.querySelector('.loader');

    window.addEventListener('popstate', function (e) {
      _this.onPopState(e);
    });

    this.manageState();
  }

  _createClass(Router, [{
    key: 'add',
    value: function add(path, callbackIn, callbackOut, callbackUpdate) {
      var _this2 = this;

      // Assume the first part of the path is the
      // verb we want to action, with the rest of the path
      // being the data to pass to the handler.
      var pathParts = path.split('/');
      var action = pathParts.shift();

      if (this.routes[action]) throw "A handler already exists for this action: " + action;

      this.routes[action] = {
        'in': callbackIn,
        out: callbackOut,
        update: callbackUpdate
      };

      // Check to see if this path is fulfilled.
      requestAnimationFrame(function () {
        if (_this2.manageState()) {
          document.body.classList.remove('deeplink');
        }
      });
    }
  }, {
    key: 'remove',
    value: function remove(path) {

      var pathParts = path.split('/');
      var action = pathParts.shift();

      if (!this.routes[action]) return;

      delete this.routes[action];
    }
  }, {
    key: 'manageState',
    value: function manageState() {

      var path = document.location.pathname.replace(/^\//, '');

      // Assume the first part of the path is the
      // verb we want to action, with the rest of the path
      // being the data to pass to the handler.
      var pathParts = path.split('/');
      var action = pathParts.shift();
      var data = pathParts.join('/');

      // Add a special case for the root.
      if (action === '') action = '_root';

      // Remove any deeplink covers.
      if (document.body.classList.contains('app-deeplink')) document.body.classList.remove('app-deeplink');

      // Hide the loader.
      this.loader.classList.add('hidden');

      if (this.currentAction === this.routes[action]) {

        if (typeof this.currentAction.update === 'function') {
          this.currentAction.update(data);
          return true;
        }

        return false;
      }

      if (!this.routes[action]) {

        if (this.currentAction) this.currentAction.out();

        this.currentAction = null;
        document.body.focus();
        return false;
      }

      // Set the new action going.
      var delay = this.routes[action]['in'](data) || 0;

      // Remove the old action and update the reference.
      if (this.currentAction) {

        // Allow the incoming view to delay the outgoing one
        // so that we don't get too much overlapping animation.
        if (delay === 0) this.currentAction.out();else setTimeout(this.currentAction.out, delay);
      }

      this.currentAction = this.routes[action];

      return true;
    }
  }, {
    key: 'go',
    value: function go(path) {
      var _this3 = this;

      // Only process real changes.
      if (path === window.location.pathname) return;

      history.pushState(undefined, "", path);
      requestAnimationFrame(function () {
        _this3.manageState();
      });
    }
  }, {
    key: 'onPopState',
    value: function onPopState(e) {
      var _this4 = this;

      e.preventDefault();
      requestAnimationFrame(function () {
        _this4.manageState();
      });
    }
  }]);

  return Router;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],10:[function(require,module,exports){
/**
 * Copyright 2014 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = ToasterInstance;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function ToasterInstance() {

  if (typeof window.ToasterInstance_ !== 'undefined') return Promise.resolve(window.ToasterInstance_);

  window.ToasterInstance_ = new Toaster();

  return Promise.resolve(window.ToasterInstance_);
}

var Toaster = (function () {
  function Toaster() {
    _classCallCheck(this, Toaster);

    this.view = document.querySelector('.toast-view');
    this.hideTimeout = 0;
    this.hideBound = this.hide.bind(this);
  }

  _createClass(Toaster, [{
    key: 'toast',
    value: function toast(message) {

      this.view.textContent = message;
      this.view.classList.add('toast-view--visible');

      clearTimeout(this.hideTimeout);
      this.hideTimeout = setTimeout(this.hideBound, 3000);
    }
  }, {
    key: 'hide',
    value: function hide() {
      this.view.classList.remove('toast-view--visible');
    }
  }]);

  return Toaster;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2xpYnMvVG9hc3Rlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUJBZ0J3QixlQUFlOzs7O0FBQXhCLFNBQVMsZUFBZSxHQUFJOztBQUV6QyxNQUFJLE9BQU8sTUFBTSxDQUFDLGdCQUFnQixLQUFLLFdBQVcsRUFDaEQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDOztBQUVsRCxRQUFNLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQzs7QUFFeEMsU0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0NBQ2pEOztJQUVLLE9BQU87QUFFQyxXQUZSLE9BQU8sR0FFSTswQkFGWCxPQUFPOztBQUdULFFBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNsRCxRQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztBQUNyQixRQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQ3ZDOztlQU5HLE9BQU87O1dBUUwsZUFBQyxPQUFPLEVBQUU7O0FBRWQsVUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO0FBQ2hDLFVBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDOztBQUUvQyxrQkFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMvQixVQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ3JEOzs7V0FFSSxnQkFBRztBQUNOLFVBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0tBQ25EOzs7U0FuQkcsT0FBTyIsImZpbGUiOiIvVXNlcnMvaGVybWFudy9Eb2N1bWVudHMvaGVybXdvbmcvaW9zVGVzdC9zcmMvc2NyaXB0cy9saWJzL1RvYXN0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE0IEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRvYXN0ZXJJbnN0YW5jZSAoKSB7XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cuVG9hc3Rlckluc3RhbmNlXyAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh3aW5kb3cuVG9hc3Rlckluc3RhbmNlXyk7XG5cbiAgd2luZG93LlRvYXN0ZXJJbnN0YW5jZV8gPSBuZXcgVG9hc3RlcigpO1xuXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUod2luZG93LlRvYXN0ZXJJbnN0YW5jZV8pO1xufVxuXG5jbGFzcyBUb2FzdGVyIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy52aWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvYXN0LXZpZXcnKTtcbiAgICB0aGlzLmhpZGVUaW1lb3V0ID0gMDtcbiAgICB0aGlzLmhpZGVCb3VuZCA9IHRoaXMuaGlkZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgdG9hc3QgKG1lc3NhZ2UpIHtcblxuICAgIHRoaXMudmlldy50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG4gICAgdGhpcy52aWV3LmNsYXNzTGlzdC5hZGQoJ3RvYXN0LXZpZXctLXZpc2libGUnKTtcblxuICAgIGNsZWFyVGltZW91dCh0aGlzLmhpZGVUaW1lb3V0KTtcbiAgICB0aGlzLmhpZGVUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLmhpZGVCb3VuZCwgMzAwMCk7XG4gIH1cblxuICBoaWRlICgpIHtcbiAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LnJlbW92ZSgndG9hc3Qtdmlldy0tdmlzaWJsZScpO1xuICB9XG59XG4iXX0=
},{}],11:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Model2 = require('./Model');

var _Model3 = _interopRequireDefault(_Model2);

var AppModel = (function (_Model) {
  _inherits(AppModel, _Model);

  function AppModel(data, key) {
    _classCallCheck(this, AppModel);

    _get(Object.getPrototypeOf(AppModel.prototype), 'constructor', this).call(this, key);

    this.firstRun = true;
    this.preferences = {};
  }

  _createClass(AppModel, null, [{
    key: 'UPDATED',
    get: function get() {
      return 'AppModel-updated';
    }
  }, {
    key: 'storeName',
    get: function get() {
      return 'AppModel';
    }
  }]);

  return AppModel;
})(_Model3['default']);

exports['default'] = AppModel;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL21vZGVsL0FwcE1vZGVsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztzQkFpQmtCLFNBQVM7Ozs7SUFFTixRQUFRO1lBQVIsUUFBUTs7QUFFZixXQUZPLFFBQVEsQ0FFZCxJQUFJLEVBQUUsR0FBRyxFQUFFOzBCQUZMLFFBQVE7O0FBSXpCLCtCQUppQixRQUFRLDZDQUluQixHQUFHLEVBQUU7O0FBRVgsUUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFDckIsUUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7R0FDdkI7O2VBUmtCLFFBQVE7O1NBVVIsZUFBRztBQUNwQixhQUFPLGtCQUFrQixDQUFDO0tBQzNCOzs7U0FFb0IsZUFBRztBQUN0QixhQUFPLFVBQVUsQ0FBQztLQUNuQjs7O1NBaEJrQixRQUFROzs7cUJBQVIsUUFBUSIsImZpbGUiOiIvVXNlcnMvaGVybWFudy9Eb2N1bWVudHMvaGVybXdvbmcvaW9zVGVzdC9zcmMvc2NyaXB0cy9tb2RlbC9BcHBNb2RlbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBNb2RlbCBmcm9tICcuL01vZGVsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwTW9kZWwgZXh0ZW5kcyBNb2RlbCB7XG5cbiAgY29uc3RydWN0b3IgKGRhdGEsIGtleSkge1xuXG4gICAgc3VwZXIoa2V5KTtcblxuICAgIHRoaXMuZmlyc3RSdW4gPSB0cnVlO1xuICAgIHRoaXMucHJlZmVyZW5jZXMgPSB7fTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgVVBEQVRFRCAoKSB7XG4gICAgcmV0dXJuICdBcHBNb2RlbC11cGRhdGVkJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgc3RvcmVOYW1lICgpIHtcbiAgICByZXR1cm4gJ0FwcE1vZGVsJztcbiAgfVxuXG59XG4iXX0=
},{"./Model":13}],12:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Model2 = require('./Model');

var _Model3 = _interopRequireDefault(_Model2);

var MemoModel = (function (_Model) {
  _inherits(MemoModel, _Model);

  function MemoModel(data, key) {
    _classCallCheck(this, MemoModel);

    _get(Object.getPrototypeOf(MemoModel.prototype), 'constructor', this).call(this, key);

    this.title = data.title || 'Untitled Memo';
    this.description = data.description || null;
    this.url = data.url || MemoModel.makeURL();
    this.audio = data.audio || null;
    this.volumeData = data.volumeData || null;
    this.time = data.time || Date.now();
    this.transcript = data.transcript || null;
  }

  _createClass(MemoModel, null, [{
    key: 'makeURL',
    value: function makeURL() {
      var url = '';
      for (var i = 0; i < 16; i++) {
        url += Number(Math.floor(Math.random() * 16)).toString(16);
      }

      return url;
    }
  }, {
    key: 'UPDATED',
    get: function get() {
      return 'MemoModel-updated';
    }
  }, {
    key: 'storeName',
    get: function get() {
      return 'MemoModel';
    }
  }]);

  return MemoModel;
})(_Model3['default']);

exports['default'] = MemoModel;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL21vZGVsL01lbW9Nb2RlbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c0JBaUJrQixTQUFTOzs7O0lBRU4sU0FBUztZQUFULFNBQVM7O0FBRWhCLFdBRk8sU0FBUyxDQUVmLElBQUksRUFBRSxHQUFHLEVBQUU7MEJBRkwsU0FBUzs7QUFJMUIsK0JBSmlCLFNBQVMsNkNBSXBCLEdBQUcsRUFBRTs7QUFFWCxRQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksZUFBZSxDQUFDO0FBQzNDLFFBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUM7QUFDNUMsUUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUMzQyxRQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDO0FBQ2hDLFFBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUM7QUFDMUMsUUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQyxRQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDO0dBQzNDOztlQWJrQixTQUFTOztXQWViLG1CQUFHO0FBQ2hCLFVBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFdBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDM0IsV0FBRyxJQUFJLE1BQU0sQ0FDVCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FDakMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7T0FDaEI7O0FBRUQsYUFBTyxHQUFHLENBQUM7S0FDWjs7O1NBRWtCLGVBQUc7QUFDcEIsYUFBTyxtQkFBbUIsQ0FBQztLQUM1Qjs7O1NBRW9CLGVBQUc7QUFDdEIsYUFBTyxXQUFXLENBQUM7S0FDcEI7OztTQWhDa0IsU0FBUzs7O3FCQUFULFNBQVMiLCJmaWxlIjoiL1VzZXJzL2hlcm1hbncvRG9jdW1lbnRzL2hlcm13b25nL2lvc1Rlc3Qvc3JjL3NjcmlwdHMvbW9kZWwvTWVtb01vZGVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IE1vZGVsIGZyb20gJy4vTW9kZWwnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZW1vTW9kZWwgZXh0ZW5kcyBNb2RlbCB7XG5cbiAgY29uc3RydWN0b3IgKGRhdGEsIGtleSkge1xuXG4gICAgc3VwZXIoa2V5KTtcblxuICAgIHRoaXMudGl0bGUgPSBkYXRhLnRpdGxlIHx8ICdVbnRpdGxlZCBNZW1vJztcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvbiB8fCBudWxsO1xuICAgIHRoaXMudXJsID0gZGF0YS51cmwgfHwgTWVtb01vZGVsLm1ha2VVUkwoKTtcbiAgICB0aGlzLmF1ZGlvID0gZGF0YS5hdWRpbyB8fCBudWxsO1xuICAgIHRoaXMudm9sdW1lRGF0YSA9IGRhdGEudm9sdW1lRGF0YSB8fCBudWxsO1xuICAgIHRoaXMudGltZSA9IGRhdGEudGltZSB8fCBEYXRlLm5vdygpO1xuICAgIHRoaXMudHJhbnNjcmlwdCA9IGRhdGEudHJhbnNjcmlwdCB8fCBudWxsO1xuICB9XG5cbiAgc3RhdGljIG1ha2VVUkwgKCkge1xuICAgIHZhciB1cmwgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgIHVybCArPSBOdW1iZXIoXG4gICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTYpXG4gICAgICApLnRvU3RyaW5nKDE2KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgc3RhdGljIGdldCBVUERBVEVEICgpIHtcbiAgICByZXR1cm4gJ01lbW9Nb2RlbC11cGRhdGVkJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgc3RvcmVOYW1lICgpIHtcbiAgICByZXR1cm4gJ01lbW9Nb2RlbCc7XG4gIH1cblxufVxuIl19
},{"./Model":13}],13:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _libsDatabase = require('../libs/Database');

var _libsDatabase2 = _interopRequireDefault(_libsDatabase);

var _libsConfigManager = require('../libs/ConfigManager');

var _libsConfigManager2 = _interopRequireDefault(_libsConfigManager);

var Model = (function () {
  function Model(key) {
    _classCallCheck(this, Model);

    this.key = key;
  }

  _createClass(Model, [{
    key: 'put',
    value: function put() {
      return this.constructor.put(this);
    }

    /**
     * Either inserts or update depending on whether the key / keyPath is set.
     * If the keyPath is set, and a property of the value matches (in-line key)
     * then the object is updated. If the keyPath is not set and the value's key
     * is null, then the object is inserted. If the keypath is not set and the
     * value's key is set then the object is updated.
     */
  }, {
    key: 'delete',
    value: function _delete() {
      return this.constructor['delete'](this);
    }
  }], [{
    key: 'nuke',
    value: function nuke() {
      return (0, _libsDatabase2['default'])().then(function (db) {
        return db.close();
      }).then(function (db) {
        return db.nuke();
      });
    }
  }, {
    key: 'get',
    value: function get(key) {
      var _this = this;

      if (this instanceof Model) Promise.reject("Can't call get on Model directly. Inherit first.");

      return (0, _libsDatabase2['default'])()

      // Do the query.
      .then(function (db) {
        return db.get(_this.storeName, key);
      })

      // Wrap the result in the correct class.
      .then(function (result) {

        return (0, _libsConfigManager2['default'])().then(function (configManager) {

          var store = configManager.getStore(_this.storeName);

          if (!result) return;

          var resultKey = key;

          // If the store uses a keypath then reset
          // the key back to undefined.
          if (store.properties.keyPath) resultKey = undefined;

          return new _this(result, resultKey);
        });
      });
    }

    /**
     * Gets all the objects from the database.
     */
  }, {
    key: 'getAll',
    value: function getAll(index, order) {
      var _this2 = this;

      if (this instanceof Model) Promise.reject("Can't call getAll on Model directly. Inherit first.");

      return (0, _libsDatabase2['default'])()

      // Do the query.
      .then(function (db) {
        return db.getAll(_this2.storeName, index, order);
      })

      // Wrap all the results in the correct class.
      .then(function (results) {

        return (0, _libsConfigManager2['default'])().then(function (configManager) {

          var store = configManager.getStore(_this2.storeName);
          var results_ = [];

          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = results[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var result = _step.value;

              var key = result.key;

              // If the store uses a keypath then reset
              // the key back to undefined.
              if (store.properties.keyPath) key = undefined;

              results_.push(new _this2(result.value, key));
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          return results_;
        });
      });
    }
  }, {
    key: 'put',
    value: function put(value) {
      var _this3 = this;

      if (this instanceof Model) Promise.reject("Can't call put on Model directly. Inherit first.");

      return (0, _libsDatabase2['default'])()

      // Do the query.
      .then(function (db) {
        return db.put(_this3.storeName, value, value.key);
      }).then(function (key) {

        return (0, _libsConfigManager2['default'])().then(function (configManager) {

          // Inserting may provide a key. If there is no keyPath set
          // the object needs to be updated with a key value so it can
          // be altered and saved again without creating a new record.
          var store = configManager.getStore(_this3.storeName);

          var keyPath = store.properties.keyPath;

          if (!keyPath) value.key = key;

          return value;
        });
      });
    }
  }, {
    key: 'deleteAll',
    value: function deleteAll() {
      var _this4 = this;

      if (this instanceof Model) Promise.reject("Can't call deleteAll on Model directly. Inherit first.");

      return (0, _libsDatabase2['default'])().then(function (db) {
        return db.deleteAll(_this4.storeName);
      })['catch'](function (e) {
        // It may be that the store doesn't exist yet, so relax for that one.
        if (e.name !== 'NotFoundError') throw e;
      });
    }
  }, {
    key: 'delete',
    value: function _delete(value) {
      var _this5 = this;

      if (this instanceof Model) Promise.reject("Can't call delete on Model directly. Inherit first.");

      return (0, _libsConfigManager2['default'])().then(function (configManager) {

        // If passed the full object to delete then
        // grab its key for the delete
        if (value instanceof _this5) {

          var store = configManager.getStore(_this5.storeName);
          var keyPath = store.properties.keyPath;

          if (keyPath) value = value[keyPath];else value = value.key;
        }

        return (0, _libsDatabase2['default'])().then(function (db) {
          return db['delete'](_this5.storeName, value);
        });
      });
    }
  }, {
    key: 'ASCENDING',
    get: function get() {
      return 'next';
    }
  }, {
    key: 'DESCENDING',
    get: function get() {
      return 'prev';
    }
  }, {
    key: 'UPDATED',
    get: function get() {
      return 'Model-updated';
    }
  }, {
    key: 'storeName',
    get: function get() {
      return 'Model';
    }
  }]);

  return Model;
})();

exports['default'] = Model;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../libs/ConfigManager":5,"../libs/Database":6}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
