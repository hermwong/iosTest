/*!
 * Copyright 2017 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _controllerDetailsController = require('./controller/DetailsController');

var _controllerDetailsController2 = _interopRequireDefault(_controllerDetailsController);

var _controllerEditController = require('./controller/EditController');

var _controllerEditController2 = _interopRequireDefault(_controllerEditController);

new _controllerDetailsController2['default']();
new _controllerEditController2['default']();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL3ZvaWNlbWVtby1kZXRhaWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJDQWdCOEIsZ0NBQWdDOzs7O3dDQUNuQyw2QkFBNkI7Ozs7QUFFeEQsOENBQXVCLENBQUM7QUFDeEIsMkNBQW9CLENBQUMiLCJmaWxlIjoiL1VzZXJzL2hlcm1hbncvRG9jdW1lbnRzL2hlcm13b25nL2lvc1Rlc3Qvc3JjL3NjcmlwdHMvdm9pY2VtZW1vLWRldGFpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuaW1wb3J0IERldGFpbHNDb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlci9EZXRhaWxzQ29udHJvbGxlcic7XG5pbXBvcnQgRWRpdENvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVyL0VkaXRDb250cm9sbGVyJztcblxubmV3IERldGFpbHNDb250cm9sbGVyKCk7XG5uZXcgRWRpdENvbnRyb2xsZXIoKTtcbiJdfQ==
},{"./controller/DetailsController":4,"./controller/EditController":5}],2:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var Config = {
  name: 'voicememo',
  version: 1,
  stores: {
    'MemoModel': {
      properties: {
        autoIncrement: true,
        keyPath: 'url'
      },
      indexes: {
        time: { unique: true }
      }
    },
    'AppModel': {
      deleteOnUpgrade: true,
      properties: {
        autoIncrement: true
      }
    }
  }
};

exports['default'] = Config;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2NvbmZpZy9Db25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxJQUFNLE1BQU0sR0FBRztBQUNiLE1BQUksRUFBRSxXQUFXO0FBQ2pCLFNBQU8sRUFBRSxDQUFDO0FBQ1YsUUFBTSxFQUFFO0FBQ04sZUFBVyxFQUFFO0FBQ1gsZ0JBQVUsRUFBRTtBQUNWLHFCQUFhLEVBQUUsSUFBSTtBQUNuQixlQUFPLEVBQUUsS0FBSztPQUNmO0FBQ0QsYUFBTyxFQUFFO0FBQ1AsWUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtPQUN2QjtLQUNGO0FBQ0QsY0FBVSxFQUFFO0FBQ1YscUJBQWUsRUFBRSxJQUFJO0FBQ3JCLGdCQUFVLEVBQUU7QUFDVixxQkFBYSxFQUFFLElBQUk7T0FDcEI7S0FDRjtHQUNGO0NBQ0YsQ0FBQzs7cUJBRWEsTUFBTSIsImZpbGUiOiIvVXNlcnMvaGVybWFudy9Eb2N1bWVudHMvaGVybXdvbmcvaW9zVGVzdC9zcmMvc2NyaXB0cy9jb25maWcvQ29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuY29uc3QgQ29uZmlnID0ge1xuICBuYW1lOiAndm9pY2VtZW1vJyxcbiAgdmVyc2lvbjogMSxcbiAgc3RvcmVzOiB7XG4gICAgJ01lbW9Nb2RlbCc6IHtcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZSxcbiAgICAgICAga2V5UGF0aDogJ3VybCdcbiAgICAgIH0sXG4gICAgICBpbmRleGVzOiB7XG4gICAgICAgIHRpbWU6IHsgdW5pcXVlOiB0cnVlIH1cbiAgICAgIH1cbiAgICB9LFxuICAgICdBcHBNb2RlbCc6IHtcbiAgICAgIGRlbGV0ZU9uVXBncmFkZTogdHJ1ZSxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29uZmlnO1xuIl19
},{}],3:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Controller = (function () {
  function Controller() {
    _classCallCheck(this, Controller);
  }

  _createClass(Controller, [{
    key: 'loadScript',
    value: function loadScript(url) {

      return new Promise(function (resolve, reject) {
        var script = document.createElement('script');
        script.async = true;
        script.src = url;

        script.onload = resolve;
        script.onerror = reject;

        document.head.appendChild(script);
      });
    }
  }, {
    key: 'loadCSS',
    value: function loadCSS(url) {
      return new Promise(function (resolve, reject) {

        var xhr = new XMLHttpRequest();
        xhr.open('GET', url);
        xhr.responseType = 'text';
        xhr.onload = function (e) {

          if (this.status == 200) {

            var style = document.createElement('style');
            style.textContent = xhr.response;
            document.head.appendChild(style);
            resolve();
          } else {

            reject();
          }
        };

        xhr.send();
      });
    }
  }]);

  return Controller;
})();

exports['default'] = Controller;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2NvbnRyb2xsZXIvQ29udHJvbGxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFpQnFCLFVBQVU7V0FBVixVQUFVOzBCQUFWLFVBQVU7OztlQUFWLFVBQVU7O1dBRWxCLG9CQUFDLEdBQUcsRUFBRTs7QUFFZixhQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBSztBQUN0QyxZQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzlDLGNBQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ3BCLGNBQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDOztBQUVqQixjQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztBQUN4QixjQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQzs7QUFFeEIsZ0JBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO09BQ25DLENBQUMsQ0FBQztLQUNKOzs7V0FFTyxpQkFBQyxHQUFHLEVBQUU7QUFDWixhQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBSzs7QUFFdEMsWUFBSSxHQUFHLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztBQUMvQixXQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNyQixXQUFHLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQztBQUMxQixXQUFHLENBQUMsTUFBTSxHQUFHLFVBQVMsQ0FBQyxFQUFFOztBQUV2QixjQUFJLElBQUksQ0FBQyxNQUFNLElBQUksR0FBRyxFQUFFOztBQUV0QixnQkFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM1QyxpQkFBSyxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBQ2pDLG9CQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqQyxtQkFBTyxFQUFFLENBQUM7V0FFWCxNQUFNOztBQUVMLGtCQUFNLEVBQUUsQ0FBQztXQUVWO1NBQ0YsQ0FBQTs7QUFFRCxXQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7T0FFWixDQUFDLENBQUM7S0FDSjs7O1NBekNrQixVQUFVOzs7cUJBQVYsVUFBVSIsImZpbGUiOiIvVXNlcnMvaGVybWFudy9Eb2N1bWVudHMvaGVybXdvbmcvaW9zVGVzdC9zcmMvc2NyaXB0cy9jb250cm9sbGVyL0NvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250cm9sbGVyIHtcblxuICBsb2FkU2NyaXB0ICh1cmwpIHtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgICAgc2NyaXB0LnNyYyA9IHVybDtcblxuICAgICAgc2NyaXB0Lm9ubG9hZCA9IHJlc29sdmU7XG4gICAgICBzY3JpcHQub25lcnJvciA9IHJlamVjdDtcblxuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIH0pO1xuICB9XG5cbiAgbG9hZENTUyAodXJsKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT0gMjAwKSB7XG5cbiAgICAgICAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0geGhyLnJlc3BvbnNlO1xuICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgICAgICAgIHJlc29sdmUoKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgcmVqZWN0KCk7XG5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB4aHIuc2VuZCgpO1xuXG4gICAgfSk7XG4gIH1cblxufVxuIl19
},{}],4:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Controller2 = require('./Controller');

var _Controller3 = _interopRequireDefault(_Controller2);

var _modelMemoModel = require('../model/MemoModel');

var _modelMemoModel2 = _interopRequireDefault(_modelMemoModel);

var _libsRouter = require('../libs/Router');

var _libsRouter2 = _interopRequireDefault(_libsRouter);

var _libsPubSub = require('../libs/PubSub');

var _libsPubSub2 = _interopRequireDefault(_libsPubSub);

var _libsDialog = require('../libs/Dialog');

var _libsDialog2 = _interopRequireDefault(_libsDialog);

var _libsToaster = require('../libs/Toaster');

var _libsToaster2 = _interopRequireDefault(_libsToaster);

var DetailsController = (function (_Controller) {
  _inherits(DetailsController, _Controller);

  function DetailsController() {
    var _this = this;

    _classCallCheck(this, DetailsController);

    _get(Object.getPrototypeOf(DetailsController.prototype), 'constructor', this).call(this);

    this.memos = null;

    this.header = document.querySelector('.header');
    this.view = document.querySelector('.js-details-view');
    this.reveal = this.view.querySelector('.js-box-reveal');
    this.panel = this.view.querySelector('.js-details-panel');
    this.panelHeader = this.view.querySelector('.js-details-panel-header');
    this.underPanel = document.querySelector('.js-underpanel');

    this.backButton = this.view.querySelector('.js-back');
    this.downloadButton = this.view.querySelector('.js-download');
    this.editButton = this.view.querySelector('.js-edit');
    this.deleteButton = this.view.querySelector('.js-delete');

    this.title = this.view.querySelector('.js-title');
    this.audioPlaybackButton = this.view.querySelector('.js-playback-toggle');
    this.description = this.view.querySelector('.js-description');

    this.audio = document.createElement('audio');
    this.audioPlaying = false;
    this.memoId = null;
    this.volumeData = null;

    this.progressCanvas = this.view.querySelector('.js-playback-progress');
    this.progressCtx = this.progressCanvas.getContext('2d');
    this.progressWidth = 0;
    this.progressHeight = 0;

    this.waveCanvas = this.view.querySelector('.js-wave');
    this.waveCtx = this.waveCanvas.getContext('2d');
    this.waveWidth = 0;
    this.waveHeight = 0;

    this.playbackStarted = 0;
    this.renderPlaybackCanvasBound = this.renderPlaybackCanvas.bind(this);

    this.loadCSS('/styles/voicememo-details.css').then(function () {

      _this.view.classList.remove('hidden');

      (0, _libsRouter2['default'])().then(function (router) {

        _this.configureWaveCanvas();
        window.addEventListener('resize', function () {
          _this.configureWaveCanvas();
          _this.renderWaveCanvas();
        });

        router.add('details', function (data) {
          return _this.show(data);
        }, function () {
          return _this.hide();
        }, function (data) {
          return _this.update(data);
        });
      });
    });

    // Set up event listeners to always be bound to the class.
    this.onAudioEndedBound = this.onAudioEnded.bind(this);
    this.onAudioPlaybackButtonClickBound = this.onAudioPlaybackButtonClick.bind(this);
    this.onEditButtonClickBound = this.onEditButtonClick.bind(this);
    this.onBackButtonClickBound = this.onBackButtonClick.bind(this);
    this.onDeleteButtonClickBound = this.onDeleteButtonClick.bind(this);
  }

  _createClass(DetailsController, [{
    key: 'releaseAudioURL',
    value: function releaseAudioURL() {
      if (!this.audio) return;

      URL.revokeObjectURL(this.audio.src);
      this.audio.removeAttribute('src');
      this.downloadButton.removeAttribute('href');
    }
  }, {
    key: 'update',
    value: function update(id) {
      this.releaseAudioURL();
      this.memoId = id;
      this.populateDetails(id);
    }
  }, {
    key: 'show',
    value: function show(id) {
      var _this2 = this;

      var viewport600px = window.matchMedia('(min-width: 600px)').matches;
      var viewport960px = window.matchMedia('(min-width: 960px)').matches;
      var cameFromEdit = document.querySelector('.edit-view__panel--visible');

      this.addEventListeners();
      this.setTabIndexes();
      this.view.classList.add('details-view--visible');

      (0, _libsPubSub2['default'])().then(function (ps) {
        ps.pub('list-covered');
      });

      this.populateDetails(id).then(function () {

        // Locate the source element
        _this2.memoId = id;

        var source = document.querySelector('#vm-' + id);

        _this2.reveal.classList.add('details-view__box-reveal--visible');

        if (source === null || cameFromEdit !== null) {
          _this2.panel.style.transform = '';
          _this2.reveal.classList.add('details-view__box-reveal--expanded');
          _this2.panel.classList.add('details-view__panel--visible');
          _this2.underPanel.classList.add('view-underpanel--visible');
          _this2.renderWaveCanvas();
          return;
        }

        // Get all the other list items for animating out of the way.
        var listItems = document.querySelectorAll('.list-view__item');
        var sourceBB = source.getBoundingClientRect();
        var revealBB = _this2.reveal.getBoundingClientRect();

        if (viewport960px) {
          _this2.panel.style.transform = 'translateY(50px)';
          _this2.reveal.style.transform = 'translateY(50px)';
        } else if (viewport600px) {
          _this2.panel.style.transform = 'translateX(105%)';
          _this2.reveal.style.transform = 'translateX(105%)';
        } else {
          _this2.panel.style.transform = 'translateY(' + sourceBB.top + 'px)';

          _this2.reveal.style.transform = 'translateY(' + sourceBB.top + 'px) scale(1, ' + sourceBB.height / revealBB.height;
          ')';
        }

        // Sometimes we have to wait a while for changes to take hold, so let's
        // give the browser 5ms to do that then go on the next frame. No, I don't
        // think it's great, either.
        setTimeout(function () {

          requestAnimationFrame(function () {

            var onRevealAnimEnd = function onRevealAnimEnd(e) {
              _this2.renderWaveCanvas();
              _this2.reveal.removeEventListener('transitionend', onRevealAnimEnd);
            };

            _this2.reveal.addEventListener('transitionend', onRevealAnimEnd);

            _this2.header.classList.add('header--collapsed');

            _this2.reveal.classList.add('details-view__box-reveal--animatable');
            _this2.reveal.classList.add('details-view__box-reveal--expanded');
            _this2.reveal.style.transform = '';

            _this2.panel.classList.add('details-view__panel--visible');
            _this2.panel.classList.add('details-view__panel--animatable');
            _this2.panel.style.transform = '';

            _this2.underPanel.classList.add('view-underpanel--visible');

            if (viewport600px) return;

            var before = true;
            var translationBefore = sourceBB.top;
            var translationAfter = revealBB.height - sourceBB.top - sourceBB.height;

            for (var i = 0; i < listItems.length; i++) {

              listItems[i].classList.add('list-view__item--animatable');
              if (listItems[i] === source) {
                before = false;
                continue;
              }

              if (before) {
                listItems[i].style.transform = 'translateY(-' + translationBefore + 'px)';
              } else {
                listItems[i].style.transform = 'translateY(' + translationAfter + 'px)';
              }
            }
          });
        }, 5);
      });
    }
  }, {
    key: 'hide',
    value: function hide() {
      var _this3 = this;

      var viewport600px = window.matchMedia('(min-width: 600px)').matches;
      var viewport960px = window.matchMedia('(min-width: 960px)').matches;

      this.view.classList.remove('details-view--visible');
      this.removeEventListeners();
      this.unsetTabIndexes();
      this.releaseAudioURL();

      this.header.classList.remove('header--collapsed');

      this.panel.classList.remove('details-view__panel--visible');
      this.reveal.classList.remove('details-view__box-reveal--expanded');
      this.reveal.classList.add('details-view__box-reveal--animatable');

      requestAnimationFrame(function () {

        var id = _this3.memoId;
        var source = document.querySelector('#vm-' + id);
        var revealBB = _this3.reveal.getBoundingClientRect();
        var listItems = document.querySelectorAll('.list-view__item');
        var revealTarget = null;

        if (source) revealTarget = source.getBoundingClientRect();else revealTarget = revealBB;

        if (viewport960px) {
          _this3.panel.style.transform = 'translateY(50px)';
          _this3.reveal.style.transform = 'translateY(50px)';
        } else if (viewport600px) {
          _this3.panel.style.transform = 'translateX(105%)';
          _this3.reveal.style.transform = 'translateX(105%)';
        } else {
          _this3.panel.style.transform = 'translateY(' + revealTarget.top + 'px)';

          _this3.reveal.style.transform = 'translateY(' + revealTarget.top + 'px) scale(1, ' + revealTarget.height / revealBB.height;
          ')';
        }

        var hideElements = function hideElements(e) {
          _this3.reveal.removeEventListener('transitionend', hideElements);
          _this3.reveal.addEventListener('transitionend', removeRevealTransform);
          _this3.reveal.classList.remove('details-view__box-reveal--visible');
          _this3.waveCanvas.classList.remove('details-view__wave--visible');
        };

        var removeRevealTransform = function removeRevealTransform(e) {
          _this3.panel.classList.remove('details-view__panel--animatable');

          _this3.reveal.removeEventListener('transitionend', removeRevealTransform);
          _this3.reveal.classList.remove('details-view__box-reveal--animatable');
          _this3.reveal.style.transform = '';
          _this3.panel.style.transform = '';

          (0, _libsPubSub2['default'])().then(function (ps) {
            ps.pub('list-uncovered');
          });
        };

        _this3.underPanel.classList.remove('view-underpanel--visible');
        _this3.reveal.addEventListener('transitionend', hideElements);
        _this3.memoId = null;

        if (viewport960px) _this3.reveal.classList.remove('details-view__box-reveal--visible');

        if (viewport600px) return;

        for (var i = 0; i < listItems.length; i++) {
          listItems[i].classList.add('list-view__item--animatable');
          listItems[i].style.transform = '';
        }
      });
    }
  }, {
    key: 'configureWaveCanvas',
    value: function configureWaveCanvas() {

      var dPR = window.devicePixelRatio || 1;

      this.waveWidth = this.waveCanvas.parentElement.offsetWidth;
      this.waveHeight = this.waveCanvas.parentElement.offsetHeight;

      // Scale the backing store by the dPR.
      this.waveCanvas.width = this.waveWidth * dPR;
      this.waveCanvas.height = this.waveHeight * dPR;

      // Scale it back down to the width and height we want in logical pixels.
      this.waveCanvas.style.width = this.waveWidth + 'px';
      this.waveCanvas.style.height = this.waveHeight + 'px';

      // Account for any upscaling by applying a single scale transform.
      this.waveCtx.scale(dPR, dPR);
    }
  }, {
    key: 'configurePlaybackCanvas',
    value: function configurePlaybackCanvas() {

      var dPR = window.devicePixelRatio || 1;

      this.progressWidth = this.progressCanvas.parentElement.offsetWidth;
      this.progressHeight = this.progressCanvas.parentElement.offsetHeight;

      // Scale the backing store by the dPR.
      this.progressCanvas.width = this.progressWidth * dPR;
      this.progressCanvas.height = this.progressHeight * dPR;

      // Scale it back down to the width and height we want in logical pixels.
      this.progressCanvas.style.width = this.progressWidth + 'px';
      this.progressCanvas.style.height = this.progressHeight + 'px';

      // Account for any upscaling by applying a single scale transform.
      this.progressCtx.scale(dPR, dPR);
    }
  }, {
    key: 'renderWaveCanvas',
    value: function renderWaveCanvas() {

      if (!this.volumeData) return;

      this.waveCanvas.classList.add('details-view__wave--visible');

      var padding = 50;
      var maxHeight = this.waveHeight - 2 * padding;

      this.waveCtx.clearRect(0, 0, this.waveWidth, this.waveHeight);
      this.waveCtx.save();
      this.waveCtx.translate(0, this.waveHeight * 0.5);
      this.waveCtx.beginPath();
      this.waveCtx.globalAlpha = 0.2;

      for (var d = 0; d < this.volumeData.length; d++) {
        var x = d / this.volumeData.length * this.waveWidth;
        var h = this.volumeData[d] * maxHeight * 0.5;
        h = Math.max(1, h);
        this.waveCtx.lineTo(x, -h);
      }

      for (d = this.volumeData.length - 1; d >= 0; d--) {
        var x = d / this.volumeData.length * this.waveWidth;
        var h = this.volumeData[d] * maxHeight * 0.5;
        h = Math.max(1, h);
        this.waveCtx.lineTo(x, h);
      }

      this.waveCtx.closePath();
      this.waveCtx.fill();
      this.waveCtx.restore();
    }
  }, {
    key: 'renderPlaybackCanvas',
    value: function renderPlaybackCanvas() {

      var duration = this.audio.duration * 1000;
      var position = (Date.now() - this.playbackStarted) / duration;
      var start = -Math.PI * 0.5;

      this.progressCtx.clearRect(0, 0, this.progressWidth, this.progressHeight);
      this.progressCtx.fillStyle = '#F8BBD0';

      this.progressCtx.save();

      this.progressCtx.translate(this.progressWidth * 0.5, this.progressHeight * 0.5);

      // Progress.
      this.progressCtx.beginPath();
      this.progressCtx.arc(0, 0, this.progressWidth * 0.502, start, start + position * Math.PI * 2);
      this.progressCtx.lineTo(0, 0);

      this.progressCtx.closePath();
      this.progressCtx.fill();

      // Punch through.
      this.progressCtx.globalCompositeOperation = 'destination-out';
      this.progressCtx.beginPath();
      this.progressCtx.arc(0, 0, this.progressWidth * 0.43, 0, Math.PI * 2);
      this.progressCtx.closePath();
      this.progressCtx.fill();

      this.progressCtx.restore();

      if (this.audioPlaying) requestAnimationFrame(this.renderPlaybackCanvasBound);
    }
  }, {
    key: 'populateDetails',
    value: function populateDetails(id) {
      var _this4 = this;

      return _modelMemoModel2['default'].get(id).then(function (memo) {

        _this4.title.textContent = memo.title;
        _this4.description.textContent = memo.description || "No description";
        _this4.volumeData = memo.volumeData;

        _this4.audio.src = URL.createObjectURL(memo.audio);
        _this4.downloadButton.href = _this4.audio.src;
        _this4.downloadButton.download = memo.title;

        _this4.configurePlaybackCanvas();

        _this4.panel.appendChild(_this4.audio);
      })['catch'](function (e) {

        (0, _libsRouter2['default'])().then(function (router) {
          router.go('/');
        });
      });
    }
  }, {
    key: 'onAudioEnded',
    value: function onAudioEnded() {
      this.audio.currentTime = 0;
      this.audio.pause();
      this.audioPlaying = false;

      this.playbackStarted = Date.now();
      this.renderPlaybackCanvas();
    }
  }, {
    key: 'onAudioPlaybackButtonClick',
    value: function onAudioPlaybackButtonClick(e) {

      if (!this.audio) return;

      if (this.audioPlaying) {

        this.audio.pause();
        this.audio.currentTime = 0;
      } else {

        this.audio.play();
      }

      this.audioPlaying = !this.audioPlaying;

      this.playbackStarted = Date.now();
      this.renderPlaybackCanvasBound();
    }
  }, {
    key: 'onEditButtonClick',
    value: function onEditButtonClick(e) {
      var _this5 = this;

      (0, _libsRouter2['default'])().then(function (router) {
        router.go('/edit/' + _this5.memoId);
      });
    }
  }, {
    key: 'onBackButtonClick',
    value: function onBackButtonClick(e) {

      (0, _libsRouter2['default'])().then(function (router) {
        router.go('/');
      });
    }
  }, {
    key: 'onDeleteButtonClick',
    value: function onDeleteButtonClick() {
      var _this6 = this;

      (0, _libsDialog2['default'])().then(function (dialog) {

        return dialog.show('Delete this memo?', 'Can\'t get it back if you get rid of it. Just sayin\'.');
      }).then(function () {

        // User chose to delete.
        _modelMemoModel2['default']['delete'](_this6.memoId).then(function () {

          (0, _libsPubSub2['default'])().then(function (ps) {
            ps.pub(_modelMemoModel2['default'].UPDATED);
          });

          (0, _libsRouter2['default'])().then(function (router) {
            router.go('/');
          });

          (0, _libsToaster2['default'])().then(function (toaster) {
            toaster.toast('Memo deleted.');
          });
        });
      })['catch'](function (e) {
        console.warn(e);
      });
    }
  }, {
    key: 'addEventListeners',
    value: function addEventListeners() {
      this.audio.addEventListener('ended', this.onAudioEndedBound);
      this.audioPlaybackButton.addEventListener('click', this.onAudioPlaybackButtonClickBound);

      this.editButton.addEventListener('click', this.onEditButtonClickBound);
      this.backButton.addEventListener('click', this.onBackButtonClickBound);
      this.deleteButton.addEventListener('click', this.onDeleteButtonClickBound);
    }
  }, {
    key: 'removeEventListeners',
    value: function removeEventListeners() {
      this.audio.removeEventListener('ended', this.onAudioEndedBound);
      this.audioPlaybackButton.removeEventListener('click', this.onAudioPlaybackButtonClickBound);

      this.editButton.removeEventListener('click', this.onEditButtonClickBound);
      this.backButton.removeEventListener('click', this.onBackButtonClickBound);
      this.deleteButton.removeEventListener('click', this.onDeleteButtonClickBound);
    }
  }, {
    key: 'setTabIndexes',
    value: function setTabIndexes() {
      this.audioPlaybackButton.tabIndex = 1;
      this.backButton.tabIndex = 2;
      this.deleteButton.tabIndex = 3;
      this.editButton.tabIndex = 4;
      this.downloadButton.tabIndex = 5;

      this.audioPlaybackButton.focus();
    }
  }, {
    key: 'unsetTabIndexes',
    value: function unsetTabIndexes() {
      this.audioPlaybackButton.tabIndex = -1;
      this.backButton.tabIndex = -1;
      this.deleteButton.tabIndex = -1;
      this.editButton.tabIndex = -1;
      this.downloadButton.tabIndex = -1;
    }
  }]);

  return DetailsController;
})(_Controller3['default']);

exports['default'] = DetailsController;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../libs/Dialog":8,"../libs/PubSub":9,"../libs/Router":10,"../libs/Toaster":11,"../model/MemoModel":12,"./Controller":3}],5:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Controller2 = require('./Controller');

var _Controller3 = _interopRequireDefault(_Controller2);

var _modelMemoModel = require('../model/MemoModel');

var _modelMemoModel2 = _interopRequireDefault(_modelMemoModel);

var _libsRouter = require('../libs/Router');

var _libsRouter2 = _interopRequireDefault(_libsRouter);

var _libsPubSub = require('../libs/PubSub');

var _libsPubSub2 = _interopRequireDefault(_libsPubSub);

var _libsToaster = require('../libs/Toaster');

var _libsToaster2 = _interopRequireDefault(_libsToaster);

var EditController = (function (_Controller) {
  _inherits(EditController, _Controller);

  function EditController() {
    var _this = this;

    _classCallCheck(this, EditController);

    _get(Object.getPrototypeOf(EditController.prototype), 'constructor', this).call(this);

    this.memo = null;

    this.header = document.querySelector('.header');
    this.view = document.querySelector('.js-edit-view');
    this.reveal = document.querySelector('.js-circular-reveal');
    this.panel = this.view.querySelector('.js-edit-panel');
    this.underPanel = document.querySelector('.js-underpanel');

    this.backButton = this.view.querySelector('.js-back');
    this.submitButton = this.view.querySelector('.js-done');

    this.form = this.view.querySelector('.js-edit-view__edit-form');

    this.formTitle = this.form.querySelector('#edit-view__edit-form-title');
    this.formTitleLabel = this.form.querySelector('.edit-view__edit-form-title-label');
    this.formDescription = this.form.querySelector('#edit-view__edit-form-description');
    this.formDescriptionLabel = this.form.querySelector('.edit-view__edit-form-description-label');

    this.loadCSS('/styles/voicememo-edit.css').then(function () {

      _this.view.classList.remove('hidden');

      (0, _libsRouter2['default'])().then(function (router) {
        router.add('edit', function (data) {
          return _this.show(data);
        }, function () {
          return _this.hide();
        });
      });
    });

    // Create bound event listeners, because this will be the event target.
    this.saveAndCloseBound = this.saveAndClose.bind(this);
    this.cancelAndCloseBound = this.cancelAndClose.bind(this);
    this.onFormTitleInputBound = this.onFormTitleInput.bind(this);
    this.onFormDescriptionInputBound = this.onFormDescriptionInput.bind(this);
  }

  _createClass(EditController, [{
    key: 'show',
    value: function show(id) {
      var _this2 = this;

      var isOnLargerScreen = window.matchMedia('(min-width: 600px)').matches;

      this.addEventListeners();
      this.setTabIndexes();

      if (!id) {
        (0, _libsRouter2['default'])().then(function (router) {
          router.go('/');
        });
        return;
      }

      (0, _libsPubSub2['default'])().then(function (ps) {
        ps.pub('list-locked');
      });

      this.underPanel.classList.add('view-underpanel--locked');

      var delayNextViewBy = 420;
      var revealTargetBB = null;
      var revealParentBB = null;
      var revealBB = null;
      var revealFromDetails = document.querySelector('.details-view__panel--visible .js-edit');
      var revealFromRecord = document.querySelector('.record-view--visible .js-record-stop-btn');

      if (revealFromDetails) {
        revealParentBB = document.querySelector('.details-view__panel').getBoundingClientRect();

        revealTargetBB = revealFromDetails.getBoundingClientRect();
      } else if (!isOnLargerScreen && revealFromRecord) {
        revealTargetBB = revealFromRecord.getBoundingClientRect();
      }

      var revealBB = this.reveal.getBoundingClientRect();
      var r = Math.sqrt(revealBB.width * revealBB.width + revealBB.height * revealBB.height);

      var ex = revealBB.width * 0.5;
      var ey = revealBB.height * 0.5;

      if (!revealTargetBB) {
        this.reveal.style.transform = 'translate(-50%, -50%)\n              translate(' + ex + 'px, ' + ey + 'px) scale(1)';
        delayNextViewBy = 0;
      }

      setTimeout(function () {
        _this2.header.classList.add('header--collapsed');
      }, delayNextViewBy + 50);

      _modelMemoModel2['default'].get(id).then(function (memo) {

        _this2.memo = memo;

        _this2.formTitle.value = memo.title;
        _this2.formDescription.textContent = memo.description;

        _this2.onFormTitleInput();
        _this2.onFormDescriptionInput();

        // Now do the reveal.
        if (revealTargetBB) {

          var sx = revealTargetBB.left + revealTargetBB.width * 0.5;
          var sy = revealTargetBB.top + revealTargetBB.height * 0.5;

          // Adjust for any transforms applied to the details panel when we read it.
          if (revealParentBB) {
            sx -= revealParentBB.left;
            sy -= revealParentBB.top;
          }

          _this2.reveal.classList.add('edit-view__circular-reveal--visible');

          _this2.reveal.style.width = _this2.reveal.style.height = r + 'px';
          _this2.reveal.style.transform = 'translate(-50%, -50%)\n            translate(' + sx + 'px, ' + sy + 'px) scale(0.001)';

          var onRevealTransitionComplete = function onRevealTransitionComplete(e) {

            _this2.reveal.classList.remove('edit-view__circular-reveal--visible');

            _this2.reveal.removeEventListener('transitionend', onRevealTransitionComplete);
          };

          setTimeout(function () {
            requestAnimationFrame(function () {

              _this2.reveal.classList.add('edit-view__circular-reveal--animatable');

              _this2.reveal.style.transform = 'translate(-50%, -50%)\n              translate(' + ex + 'px, ' + ey + 'px) scale(1)';

              _this2.reveal.addEventListener('transitionend', onRevealTransitionComplete);
            });
          }, 200);
        }

        if (_this2.memo.title === 'Untitled Memo') {
          _this2.formTitle.focus();
          _this2.formTitle.select();
        }

        _this2.showPanelAndForm();
      });

      return delayNextViewBy;
    }
  }, {
    key: 'showPanelAndForm',
    value: function showPanelAndForm() {
      this.panel.classList.add('edit-view__panel--visible');
      this.form.classList.add('edit-view__edit-form--animatable');
      this.form.classList.add('edit-view__edit-form--visible');
    }
  }, {
    key: 'hide',
    value: function hide() {
      var _this3 = this;

      (0, _libsPubSub2['default'])().then(function (ps) {
        ps.pub('list-unlocked');
      });

      this.underPanel.classList.remove('view-underpanel--locked');
      this.removeEventListeners();
      this.unsetTabIndexes();

      var detailsPanel = document.querySelector('.details-view__panel');
      var revealToDetails = detailsPanel.querySelector('.js-edit');

      var detailsPanelBB = detailsPanel.getBoundingClientRect();
      var revealTargetBB = revealToDetails.getBoundingClientRect();

      var revealBB = this.reveal.getBoundingClientRect();
      var r = Math.sqrt(revealBB.width * revealBB.width + revealBB.height * revealBB.height);

      var ex = revealTargetBB.left + revealTargetBB.width * 0.5;
      var ey = revealTargetBB.top + revealTargetBB.height * 0.5;

      // Adjust for any transforms applied to the details panel when we read it.
      ex -= detailsPanelBB.left;
      ey -= detailsPanelBB.top;

      var onRevealTransitionComplete = function onRevealTransitionComplete() {

        _this3.reveal.removeEventListener('transitionend', onRevealTransitionComplete);

        _this3.header.classList.remove('header--collapsed');

        _this3.reveal.style.transform = '';
        _this3.reveal.classList.remove('edit-view__circular-reveal--visible');
        _this3.reveal.classList.remove('edit-view__circular-reveal--animatable');
        _this3.reveal.style.width = '100%';
        _this3.reveal.style.height = '100%';

        _this3.memo = null;
      };

      this.reveal.style.width = this.reveal.style.height = r + 'px';
      this.reveal.classList.remove('edit-view__circular-reveal--animatable');
      this.reveal.classList.add('edit-view__circular-reveal--visible');

      this.form.classList.remove('edit-view__edit-form--animatable');
      this.form.classList.remove('edit-view__edit-form--visible');
      this.panel.classList.remove('edit-view__panel--animatable');
      this.panel.classList.remove('edit-view__panel--visible');

      setTimeout(function () {

        _this3.reveal.classList.add('edit-view__circular-reveal--animatable');
        _this3.reveal.style.transform = 'translate(-50%, -50%)\n        translate(' + ex + 'px, ' + ey + 'px) scale(0.001)';
      }, 300);

      this.reveal.addEventListener('transitionend', onRevealTransitionComplete);
    }
  }, {
    key: 'saveAndClose',
    value: function saveAndClose(e) {
      var _this4 = this;

      if (e) e.preventDefault();

      this.memo.title = this.formTitle.value;
      this.memo.description = this.formDescription.textContent;

      if (this.memo.title.trim() === '') this.memo.title = 'Untitled Memo';

      this.memo.put().then(function () {

        (0, _libsPubSub2['default'])().then(function (ps) {
          ps.pub(_modelMemoModel2['default'].UPDATED);
        });

        (0, _libsRouter2['default'])().then(function (router) {
          router.go('/details/' + _this4.memo.url);
        });

        (0, _libsToaster2['default'])().then(function (toaster) {
          toaster.toast('Memo saved.');
        });
      });
    }
  }, {
    key: 'cancelAndClose',
    value: function cancelAndClose(e) {
      var _this5 = this;

      e.preventDefault();
      (0, _libsRouter2['default'])().then(function (router) {
        router.go('/details/' + _this5.memo.url);
      });
    }
  }, {
    key: 'onFormTitleInput',
    value: function onFormTitleInput() {
      if (this.formTitle.value.length === 0) {
        this.formTitleLabel.classList.remove('edit-view__edit-form-title-label--collapsed');
      } else {
        this.formTitleLabel.classList.add('edit-view__edit-form-title-label--collapsed');
      }
    }
  }, {
    key: 'onFormDescriptionInput',
    value: function onFormDescriptionInput() {
      if (this.formDescription.textContent.length === 0) {
        this.formDescriptionLabel.classList.remove('edit-view__edit-form-description-label--collapsed');
      } else {
        this.formDescriptionLabel.classList.add('edit-view__edit-form-description-label--collapsed');
      }
    }
  }, {
    key: 'addEventListeners',
    value: function addEventListeners() {
      this.form.addEventListener('submit', this.saveAndCloseBound);
      this.backButton.addEventListener('click', this.cancelAndCloseBound);
      this.formTitle.addEventListener('input', this.onFormTitleInputBound);
      this.formDescription.addEventListener('input', this.onFormDescriptionInputBound);
    }
  }, {
    key: 'removeEventListeners',
    value: function removeEventListeners() {
      this.form.removeEventListener('submit', this.saveAndCloseBound);
      this.backButton.removeEventListener('click', this.cancelAndCloseBound);
      this.formTitle.removeEventListener('input', this.onFormTitleInputBound);
      this.formDescription.removeEventListener('input', this.onFormDescriptionInputBound);
    }
  }, {
    key: 'setTabIndexes',
    value: function setTabIndexes() {
      this.formTitle.focus();
      this.formTitle.tabIndex = 1;
      this.formDescription.tabIndex = 2;
      this.submitButton.tabIndex = 3;
      this.backButton.tabIndex = 4;
    }
  }, {
    key: 'unsetTabIndexes',
    value: function unsetTabIndexes() {
      this.formTitle.tabIndex = -1;
      this.formDescription.tabIndex = -1;
      this.submitButton.tabIndex = -1;
      this.backButton.tabIndex = -1;
    }
  }]);

  return EditController;
})(_Controller3['default']);

exports['default'] = EditController;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2NvbnRyb2xsZXIvRWRpdENvbnRyb2xsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJCQWlCdUIsY0FBYzs7Ozs4QkFDZixvQkFBb0I7Ozs7MEJBQ2YsZ0JBQWdCOzs7OzBCQUNoQixnQkFBZ0I7Ozs7MkJBQ2YsaUJBQWlCOzs7O0lBRXhCLGNBQWM7WUFBZCxjQUFjOztBQUVyQixXQUZPLGNBQWMsR0FFbEI7OzswQkFGSSxjQUFjOztBQUkvQiwrQkFKaUIsY0FBYyw2Q0FJdkI7O0FBRVIsUUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7O0FBRWpCLFFBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNoRCxRQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDcEQsUUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDNUQsUUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3ZELFFBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDOztBQUUzRCxRQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3RELFFBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7O0FBRXhELFFBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsMEJBQTBCLENBQUMs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QUFDZixVQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3ZCLFVBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztBQUM1QixVQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7QUFDbEMsVUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0FBQy9CLFVBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztLQUM5Qjs7O1dBRWUsMkJBQUc7QUFDakIsVUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDN0IsVUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDbkMsVUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDaEMsVUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDL0I7OztTQXZVa0IsY0FBYzs7O3FCQUFkLGNBQWMiLCJmaWxlIjoiL1VzZXJzL2hlcm1hbncvRG9jdW1lbnRzL2hlcm13b25nL2lvc1Rlc3Qvc3JjL3NjcmlwdHMvY29udHJvbGxlci9FZGl0Q29udHJvbGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCBDb250cm9sbGVyIGZyb20gJy4vQ29udHJvbGxlcic7XG5pbXBvcnQgTWVtb01vZGVsIGZyb20gJy4uL21vZGVsL01lbW9Nb2RlbCc7XG5pbXBvcnQgUm91dGVySW5zdGFuY2UgZnJvbSAnLi4vbGlicy9Sb3V0ZXInO1xuaW1wb3J0IFB1YlN1Ykluc3RhbmNlIGZyb20gJy4uL2xpYnMvUHViU3ViJztcbmltcG9ydCBUb2FzdGVySW5zdGFuY2UgZnJvbSAnLi4vbGlicy9Ub2FzdGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWRpdENvbnRyb2xsZXIgZXh0ZW5kcyBDb250cm9sbGVyIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG5cbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5tZW1vID0gbnVsbDtcblxuICAgIHRoaXMuaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpO1xuICAgIHRoaXMudmlldyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lZGl0LXZpZXcnKTtcbiAgICB0aGlzLnJldmVhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1jaXJjdWxhci1yZXZlYWwnKTtcbiAgICB0aGlzLnBhbmVsID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy1lZGl0LXBhbmVsJyk7XG4gICAgdGhpcy51bmRlclBhbmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXVuZGVycGFuZWwnKTtcblxuICAgIHRoaXMuYmFja0J1dHRvbiA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtYmFjaycpO1xuICAgIHRoaXMuc3VibWl0QnV0dG9uID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy1kb25lJyk7XG5cbiAgICB0aGlzLmZvcm0gPSB0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignLmpzLWVkaXQtdmlld19fZWRpdC1mb3JtJyk7XG5cbiAgICB0aGlzLmZvcm1UaXRsZSA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yKCcjZWRpdC12aWV3X19lZGl0LWZvcm0tdGl0bGUnKTtcbiAgICB0aGlzLmZvcm1UaXRsZUxhYmVsID1cbiAgICAgICAgdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoJy5lZGl0LXZpZXdfX2VkaXQtZm9ybS10aXRsZS1sYWJlbCcpO1xuICAgIHRoaXMuZm9ybURlc2NyaXB0aW9uID1cbiAgICAgICAgdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3IoJyNlZGl0LXZpZXdfX2VkaXQtZm9ybS1kZXNjcmlwdGlvbicpO1xuICAgIHRoaXMuZm9ybURlc2NyaXB0aW9uTGFiZWwgPVxuICAgICAgICB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcignLmVkaXQtdmlld19fZWRpdC1mb3JtLWRlc2NyaXB0aW9uLWxhYmVsJyk7XG5cbiAgICB0aGlzLmxvYWRDU1MoJy9zdHlsZXMvdm9pY2VtZW1vLWVkaXQuY3NzJykudGhlbiggKCkgPT4ge1xuXG4gICAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG5cbiAgICAgIFJvdXRlckluc3RhbmNlKClcbiAgICAgICAgICAudGhlbihyb3V0ZXIgPT4ge1xuICAgICAgICAgICAgcm91dGVyLmFkZCgnZWRpdCcsXG4gICAgICAgICAgICAgICAgKGRhdGEpID0+IHRoaXMuc2hvdyhkYXRhKSxcbiAgICAgICAgICAgICAgICAoKSA9PiB0aGlzLmhpZGUoKSk7XG4gICAgICAgICAgfSk7XG5cbiAgICB9KTtcblxuICAgIC8vIENyZWF0ZSBib3VuZCBldmVudCBsaXN0ZW5lcnMsIGJlY2F1c2UgdGhpcyB3aWxsIGJlIHRoZSBldmVudCB0YXJnZXQuXG4gICAgdGhpcy5zYXZlQW5kQ2xvc2VCb3VuZCA9IHRoaXMuc2F2ZUFuZENsb3NlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jYW5jZWxBbmRDbG9zZUJvdW5kID0gdGhpcy5jYW5jZWxBbmRDbG9zZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Gb3JtVGl0bGVJbnB1dEJvdW5kID0gdGhpcy5vbkZvcm1UaXRsZUlucHV0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkZvcm1EZXNjcmlwdGlvbklucHV0Qm91bmQgPSB0aGlzLm9uRm9ybURlc2NyaXB0aW9uSW5wdXQuYmluZCh0aGlzKTtcblxuICB9XG5cbiAgc2hvdyAoaWQpIHtcblxuICAgIHZhciBpc09uTGFyZ2VyU2NyZWVuID0gd2luZG93Lm1hdGNoTWVkaWEoJyhtaW4td2lkdGg6IDYwMHB4KScpLm1hdGNoZXM7XG5cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy5zZXRUYWJJbmRleGVzKCk7XG5cbiAgICBpZiAoIWlkKSB7XG4gICAgICBSb3V0ZXJJbnN0YW5jZSgpLnRoZW4ocm91dGVyID0+IHtcbiAgICAgICAgcm91dGVyLmdvKCcvJyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBQdWJTdWJJbnN0YW5jZSgpLnRoZW4ocHMgPT4ge1xuICAgICAgcHMucHViKCdsaXN0LWxvY2tlZCcpO1xuICAgIH0pO1xuXG4gICAgdGhpcy51bmRlclBhbmVsLmNsYXNzTGlzdC5hZGQoJ3ZpZXctdW5kZXJwYW5lbC0tbG9ja2VkJyk7XG5cbiAgICB2YXIgZGVsYXlOZXh0Vmlld0J5ID0gNDIwO1xuICAgIHZhciByZXZlYWxUYXJnZXRCQiA9IG51bGw7XG4gICAgdmFyIHJldmVhbFBhcmVudEJCID0gbnVsbDtcbiAgICB2YXIgcmV2ZWFsQkIgPSBudWxsO1xuICAgIHZhciByZXZlYWxGcm9tRGV0YWlscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAnLmRldGFpbHMtdmlld19fcGFuZWwtLXZpc2libGUgLmpzLWVkaXQnKTtcbiAgICB2YXIgcmV2ZWFsRnJvbVJlY29yZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAnLnJlY29yZC12aWV3LS12aXNpYmxlIC5qcy1yZWNvcmQtc3RvcC1idG4nKTtcblxuICAgIGlmIChyZXZlYWxGcm9tRGV0YWlscykge1xuICAgICAgcmV2ZWFsUGFyZW50QkIgPSBkb2N1bWVudFxuICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKCcuZGV0YWlscy12aWV3X19wYW5lbCcpXG4gICAgICAgICAgLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICByZXZlYWxUYXJnZXRCQiA9IHJldmVhbEZyb21EZXRhaWxzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH0gZWxzZSBpZiAoIWlzT25MYXJnZXJTY3JlZW4gJiYgcmV2ZWFsRnJvbVJlY29yZCkge1xuICAgICAgcmV2ZWFsVGFyZ2V0QkIgPSByZXZlYWxGcm9tUmVjb3JkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cblxuICAgIHZhciByZXZlYWxCQiA9IHRoaXMucmV2ZWFsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciByID0gTWF0aC5zcXJ0KHJldmVhbEJCLndpZHRoICogcmV2ZWFsQkIud2lkdGggK1xuICAgICAgICByZXZlYWxCQi5oZWlnaHQgKiByZXZlYWxCQi5oZWlnaHQpO1xuXG4gICAgdmFyIGV4ID0gcmV2ZWFsQkIud2lkdGggKiAwLjU7XG4gICAgdmFyIGV5ID0gcmV2ZWFsQkIuaGVpZ2h0ICogMC41O1xuXG4gICAgaWYgKCFyZXZlYWxUYXJnZXRCQikge1xuICAgICAgdGhpcy5yZXZlYWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgtNTAlLCAtNTAlKVxuICAgICAgICAgICAgICB0cmFuc2xhdGUoJHtleH1weCwgJHtleX1weCkgc2NhbGUoMSlgO1xuICAgICAgZGVsYXlOZXh0Vmlld0J5ID0gMDtcbiAgICB9XG5cbiAgICBzZXRUaW1lb3V0KCAoKSA9PiB7XG4gICAgICB0aGlzLmhlYWRlci5jbGFzc0xpc3QuYWRkKCdoZWFkZXItLWNvbGxhcHNlZCcpO1xuICAgIH0sIGRlbGF5TmV4dFZpZXdCeSArIDUwKTtcblxuICAgIE1lbW9Nb2RlbC5nZXQoaWQpLnRoZW4obWVtbyA9PiB7XG5cbiAgICAgIHRoaXMubWVtbyA9IG1lbW87XG5cbiAgICAgIHRoaXMuZm9ybVRpdGxlLnZhbHVlID0gbWVtby50aXRsZTtcbiAgICAgIHRoaXMuZm9ybURlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gbWVtby5kZXNjcmlwdGlvbjtcblxuICAgICAgdGhpcy5vbkZvcm1UaXRsZUlucHV0KCk7XG4gICAgICB0aGlzLm9uRm9ybURlc2NyaXB0aW9uSW5wdXQoKTtcblxuICAgICAgLy8gTm93IGRvIHRoZSByZXZlYWwuXG4gICAgICBpZiAocmV2ZWFsVGFyZ2V0QkIpIHtcblxuICAgICAgICB2YXIgc3ggPSByZXZlYWxUYXJnZXRCQi5sZWZ0ICsgcmV2ZWFsVGFyZ2V0QkIud2lkdGggKiAwLjU7XG4gICAgICAgIHZhciBzeSA9IHJldmVhbFRhcmdldEJCLnRvcCArIHJldmVhbFRhcmdldEJCLmhlaWdodCAqIDAuNTtcblxuICAgICAgICAvLyBBZGp1c3QgZm9yIGFueSB0cmFuc2Zvcm1zIGFwcGxpZWQgdG8gdGhlIGRldGFpbHMgcGFuZWwgd2hlbiB3ZSByZWFkIGl0LlxuICAgICAgICBpZiAocmV2ZWFsUGFyZW50QkIpIHtcbiAgICAgICAgICBzeCAtPSByZXZlYWxQYXJlbnRCQi5sZWZ0O1xuICAgICAgICAgIHN5IC09IHJldmVhbFBhcmVudEJCLnRvcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmV2ZWFsLmNsYXNzTGlzdFxuICAgICAgICAgICAgLmFkZCgnZWRpdC12aWV3X19jaXJjdWxhci1yZXZlYWwtLXZpc2libGUnKTtcblxuICAgICAgICB0aGlzLnJldmVhbC5zdHlsZS53aWR0aCA9IHRoaXMucmV2ZWFsLnN0eWxlLmhlaWdodCA9IGAke3J9cHhgO1xuICAgICAgICB0aGlzLnJldmVhbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKC01MCUsIC01MCUpXG4gICAgICAgICAgICB0cmFuc2xhdGUoJHtzeH1weCwgJHtzeX1weCkgc2NhbGUoMC4wMDEpYDtcblxuICAgICAgICB2YXIgb25SZXZlYWxUcmFuc2l0aW9uQ29tcGxldGUgPSAoZSkgPT4ge1xuXG4gICAgICAgICAgdGhpcy5yZXZlYWwuY2xhc3NMaXN0LnJlbW92ZSgnZWRpdC12aWV3X19jaXJjdWxhci1yZXZlYWwtLXZpc2libGUnKTtcblxuICAgICAgICAgIHRoaXMucmV2ZWFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgICAgICAgICBvblJldmVhbFRyYW5zaXRpb25Db21wbGV0ZSk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRpbWVvdXQoICgpID0+IHtcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoICgpID0+IHtcblxuICAgICAgICAgICAgdGhpcy5yZXZlYWwuY2xhc3NMaXN0XG4gICAgICAgICAgICAgICAgLmFkZCgnZWRpdC12aWV3X19jaXJjdWxhci1yZXZlYWwtLWFuaW1hdGFibGUnKTtcblxuICAgICAgICAgICAgdGhpcy5yZXZlYWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgtNTAlLCAtNTAlKVxuICAgICAgICAgICAgICB0cmFuc2xhdGUoJHtleH1weCwgJHtleX1weCkgc2NhbGUoMSlgO1xuXG4gICAgICAgICAgICB0aGlzLnJldmVhbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJyxcbiAgICAgICAgICAgICAgICBvblJldmVhbFRyYW5zaXRpb25Db21wbGV0ZSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgfSwgMjAwKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubWVtby50aXRsZSA9PT0gJ1VudGl0bGVkIE1lbW8nKSB7XG4gICAgICAgIHRoaXMuZm9ybVRpdGxlLmZvY3VzKCk7XG4gICAgICAgIHRoaXMuZm9ybVRpdGxlLnNlbGVjdCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNob3dQYW5lbEFuZEZvcm0oKTtcblxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRlbGF5TmV4dFZpZXdCeTtcbiAgfVxuXG4gIHNob3dQYW5lbEFuZEZvcm0gKCkge1xuICAgIHRoaXMucGFuZWwuY2xhc3NMaXN0LmFkZCgnZWRpdC12aWV3X19wYW5lbC0tdmlzaWJsZScpO1xuICAgIHRoaXMuZm9ybS5jbGFzc0xpc3QuYWRkKCdlZGl0LXZpZXdfX2VkaXQtZm9ybS0tYW5pbWF0YWJsZScpO1xuICAgIHRoaXMuZm9ybS5jbGFzc0xpc3QuYWRkKCdlZGl0LXZpZXdfX2VkaXQtZm9ybS0tdmlzaWJsZScpO1xuICB9XG5cbiAgaGlkZSAoKSB7XG5cbiAgICBQdWJTdWJJbnN0YW5jZSgpLnRoZW4ocHMgPT4ge1xuICAgICAgcHMucHViKCdsaXN0LXVubG9ja2VkJyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnVuZGVyUGFuZWwuY2xhc3NMaXN0LnJlbW92ZSgndmlldy11bmRlcnBhbmVsLS1sb2NrZWQnKTtcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgdGhpcy51bnNldFRhYkluZGV4ZXMoKTtcblxuICAgIHZhciBkZXRhaWxzUGFuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGV0YWlscy12aWV3X19wYW5lbCcpXG4gICAgdmFyIHJldmVhbFRvRGV0YWlscyA9IGRldGFpbHNQYW5lbC5xdWVyeVNlbGVjdG9yKCcuanMtZWRpdCcpO1xuXG4gICAgdmFyIGRldGFpbHNQYW5lbEJCID0gZGV0YWlsc1BhbmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciByZXZlYWxUYXJnZXRCQiA9IHJldmVhbFRvRGV0YWlscy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIHZhciByZXZlYWxCQiA9IHRoaXMucmV2ZWFsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciByID0gTWF0aC5zcXJ0KHJldmVhbEJCLndpZHRoICogcmV2ZWFsQkIud2lkdGggK1xuICAgICAgICAgICAgcmV2ZWFsQkIuaGVpZ2h0ICogcmV2ZWFsQkIuaGVpZ2h0KTtcblxuICAgIHZhciBleCA9IHJldmVhbFRhcmdldEJCLmxlZnQgKyByZXZlYWxUYXJnZXRCQi53aWR0aCAqIDAuNTtcbiAgICB2YXIgZXkgPSByZXZlYWxUYXJnZXRCQi50b3AgKyByZXZlYWxUYXJnZXRCQi5oZWlnaHQgKiAwLjU7XG5cbiAgICAvLyBBZGp1c3QgZm9yIGFueSB0cmFuc2Zvcm1zIGFwcGxpZWQgdG8gdGhlIGRldGFpbHMgcGFuZWwgd2hlbiB3ZSByZWFkIGl0LlxuICAgIGV4IC09IGRldGFpbHNQYW5lbEJCLmxlZnQ7XG4gICAgZXkgLT0gZGV0YWlsc1BhbmVsQkIudG9wO1xuXG4gICAgdmFyIG9uUmV2ZWFsVHJhbnNpdGlvbkNvbXBsZXRlID0gKCkgPT4ge1xuXG4gICAgICB0aGlzLnJldmVhbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJyxcbiAgICAgICAgb25SZXZlYWxUcmFuc2l0aW9uQ29tcGxldGUpO1xuXG4gICAgICB0aGlzLmhlYWRlci5jbGFzc0xpc3QucmVtb3ZlKCdoZWFkZXItLWNvbGxhcHNlZCcpO1xuXG4gICAgICB0aGlzLnJldmVhbC5zdHlsZS50cmFuc2Zvcm0gPSAnJztcbiAgICAgIHRoaXMucmV2ZWFsLmNsYXNzTGlzdC5yZW1vdmUoJ2VkaXQtdmlld19fY2lyY3VsYXItcmV2ZWFsLS12aXNpYmxlJyk7XG4gICAgICB0aGlzLnJldmVhbC5jbGFzc0xpc3QucmVtb3ZlKCdlZGl0LXZpZXdfX2NpcmN1bGFyLXJldmVhbC0tYW5pbWF0YWJsZScpO1xuICAgICAgdGhpcy5yZXZlYWwuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICB0aGlzLnJldmVhbC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG5cbiAgICAgIHRoaXMubWVtbyA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5yZXZlYWwuc3R5bGUud2lkdGggPSB0aGlzLnJldmVhbC5zdHlsZS5oZWlnaHQgPSBgJHtyfXB4YDtcbiAgICB0aGlzLnJldmVhbC5jbGFzc0xpc3RcbiAgICAgICAgICAgICAgLnJlbW92ZSgnZWRpdC12aWV3X19jaXJjdWxhci1yZXZlYWwtLWFuaW1hdGFibGUnKTtcbiAgICB0aGlzLnJldmVhbC5jbGFzc0xpc3QuYWRkKCdlZGl0LXZpZXdfX2NpcmN1bGFyLXJldmVhbC0tdmlzaWJsZScpO1xuXG4gICAgdGhpcy5mb3JtLmNsYXNzTGlzdC5yZW1vdmUoJ2VkaXQtdmlld19fZWRpdC1mb3JtLS1hbmltYXRhYmxlJyk7XG4gICAgdGhpcy5mb3JtLmNsYXNzTGlzdC5yZW1vdmUoJ2VkaXQtdmlld19fZWRpdC1mb3JtLS12aXNpYmxlJyk7XG4gICAgdGhpcy5wYW5lbC5jbGFzc0xpc3QucmVtb3ZlKCdlZGl0LXZpZXdfX3BhbmVsLS1hbmltYXRhYmxlJyk7XG4gICAgdGhpcy5wYW5lbC5jbGFzc0xpc3QucmVtb3ZlKCdlZGl0LXZpZXdfX3BhbmVsLS12aXNpYmxlJyk7XG5cbiAgICBzZXRUaW1lb3V0KCAoKSA9PiB7XG5cbiAgICAgIHRoaXMucmV2ZWFsLmNsYXNzTGlzdC5hZGQoJ2VkaXQtdmlld19fY2lyY3VsYXItcmV2ZWFsLS1hbmltYXRhYmxlJyk7XG4gICAgICB0aGlzLnJldmVhbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlKC01MCUsIC01MCUpXG4gICAgICAgIHRyYW5zbGF0ZSgke2V4fXB4LCAke2V5fXB4KSBzY2FsZSgwLjAwMSlgO1xuICAgIH0sIDMwMCk7XG5cbiAgICB0aGlzLnJldmVhbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJyxcbiAgICAgICAgb25SZXZlYWxUcmFuc2l0aW9uQ29tcGxldGUpO1xuXG4gIH1cblxuICBzYXZlQW5kQ2xvc2UgKGUpIHtcblxuICAgIGlmIChlKVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgdGhpcy5tZW1vLnRpdGxlID0gdGhpcy5mb3JtVGl0bGUudmFsdWU7XG4gICAgdGhpcy5tZW1vLmRlc2NyaXB0aW9uID0gdGhpcy5mb3JtRGVzY3JpcHRpb24udGV4dENvbnRlbnQ7XG5cbiAgICBpZiAodGhpcy5tZW1vLnRpdGxlLnRyaW0oKSA9PT0gJycpXG4gICAgICB0aGlzLm1lbW8udGl0bGUgPSAnVW50aXRsZWQgTWVtbyc7XG5cbiAgICB0aGlzLm1lbW8ucHV0KCkudGhlbiggKCkgPT4ge1xuXG4gICAgICBQdWJTdWJJbnN0YW5jZSgpLnRoZW4ocHMgPT4ge1xuICAgICAgICBwcy5wdWIoTWVtb01vZGVsLlVQREFURUQpO1xuICAgICAgfSk7XG5cbiAgICAgIFJvdXRlckluc3RhbmNlKCkudGhlbihyb3V0ZXIgPT4ge1xuICAgICAgICByb3V0ZXIuZ28oYC9kZXRhaWxzLyR7dGhpcy5tZW1vLnVybH1gKTtcbiAgICAgIH0pO1xuXG4gICAgICBUb2FzdGVySW5zdGFuY2UoKS50aGVuKHRvYXN0ZXIgPT4ge1xuICAgICAgICB0b2FzdGVyLnRvYXN0KCdNZW1vIHNhdmVkLicpO1xuICAgICAgfSk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIGNhbmNlbEFuZENsb3NlIChlKSB7XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgUm91dGVySW5zdGFuY2UoKS50aGVuKHJvdXRlciA9PiB7XG4gICAgICByb3V0ZXIuZ28oYC9kZXRhaWxzLyR7dGhpcy5tZW1vLnVybH1gKTtcbiAgICB9KTtcbiAgfVxuXG4gIG9uRm9ybVRpdGxlSW5wdXQgKCkge1xuICAgIGlmICh0aGlzLmZvcm1UaXRsZS52YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuZm9ybVRpdGxlTGFiZWwuY2xhc3NMaXN0XG4gICAgICAgICAgLnJlbW92ZSgnZWRpdC12aWV3X19lZGl0LWZvcm0tdGl0bGUtbGFiZWwtLWNvbGxhcHNlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZvcm1UaXRsZUxhYmVsLmNsYXNzTGlzdFxuICAgICAgICAgIC5hZGQoJ2VkaXQtdmlld19fZWRpdC1mb3JtLXRpdGxlLWxhYmVsLS1jb2xsYXBzZWQnKTtcbiAgICB9XG4gIH1cblxuICBvbkZvcm1EZXNjcmlwdGlvbklucHV0ICgpIHtcbiAgICBpZiAodGhpcy5mb3JtRGVzY3JpcHRpb24udGV4dENvbnRlbnQubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLmZvcm1EZXNjcmlwdGlvbkxhYmVsLmNsYXNzTGlzdFxuICAgICAgICAgIC5yZW1vdmUoJ2VkaXQtdmlld19fZWRpdC1mb3JtLWRlc2NyaXB0aW9uLWxhYmVsLS1jb2xsYXBzZWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mb3JtRGVzY3JpcHRpb25MYWJlbC5jbGFzc0xpc3RcbiAgICAgICAgICAuYWRkKCdlZGl0LXZpZXdfX2VkaXQtZm9ybS1kZXNjcmlwdGlvbi1sYWJlbC0tY29sbGFwc2VkJyk7XG4gICAgfVxuICB9XG5cbiAgYWRkRXZlbnRMaXN0ZW5lcnMgKCkge1xuICAgIHRoaXMuZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLnNhdmVBbmRDbG9zZUJvdW5kKTtcbiAgICB0aGlzLmJhY2tCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNhbmNlbEFuZENsb3NlQm91bmQpO1xuICAgIHRoaXMuZm9ybVRpdGxlLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdGhpcy5vbkZvcm1UaXRsZUlucHV0Qm91bmQpO1xuICAgIHRoaXMuZm9ybURlc2NyaXB0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JyxcbiAgICAgICAgdGhpcy5vbkZvcm1EZXNjcmlwdGlvbklucHV0Qm91bmQpO1xuICB9XG5cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMgKCkge1xuICAgIHRoaXMuZm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLnNhdmVBbmRDbG9zZUJvdW5kKTtcbiAgICB0aGlzLmJhY2tCdXR0b24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNhbmNlbEFuZENsb3NlQm91bmQpO1xuICAgIHRoaXMuZm9ybVRpdGxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JyxcbiAgICAgICAgdGhpcy5vbkZvcm1UaXRsZUlucHV0Qm91bmQpO1xuICAgIHRoaXMuZm9ybURlc2NyaXB0aW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JyxcbiAgICAgICAgdGhpcy5vbkZvcm1EZXNjcmlwdGlvbklucHV0Qm91bmQpO1xuICB9XG5cbiAgc2V0VGFiSW5kZXhlcyAoKSB7XG4gICAgdGhpcy5mb3JtVGl0bGUuZm9jdXMoKTtcbiAgICB0aGlzLmZvcm1UaXRsZS50YWJJbmRleCA9IDE7XG4gICAgdGhpcy5mb3JtRGVzY3JpcHRpb24udGFiSW5kZXggPSAyO1xuICAgIHRoaXMuc3VibWl0QnV0dG9uLnRhYkluZGV4ID0gMztcbiAgICB0aGlzLmJhY2tCdXR0b24udGFiSW5kZXggPSA0O1xuICB9XG5cbiAgdW5zZXRUYWJJbmRleGVzICgpIHtcbiAgICB0aGlzLmZvcm1UaXRsZS50YWJJbmRleCA9IC0xO1xuICAgIHRoaXMuZm9ybURlc2NyaXB0aW9uLnRhYkluZGV4ID0gLTE7XG4gICAgdGhpcy5zdWJtaXRCdXR0b24udGFiSW5kZXggPSAtMTtcbiAgICB0aGlzLmJhY2tCdXR0b24udGFiSW5kZXggPSAtMTtcbiAgfVxuXG59XG4iXX0=
},{"../libs/PubSub":9,"../libs/Router":10,"../libs/Toaster":11,"../model/MemoModel":12,"./Controller":3}],6:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = ConfigManagerInstance;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _configConfig = require('../config/Config');

var _configConfig2 = _interopRequireDefault(_configConfig);

function ConfigManagerInstance() {

  if (typeof window.ConfigManagerInstance_ !== 'undefined') return Promise.resolve(window.ConfigManagerInstance_);

  window.ConfigManagerInstance_ = new ConfigManager();

  return Promise.resolve(window.ConfigManagerInstance_);
}

var ConfigManager = (function () {
  function ConfigManager() {
    _classCallCheck(this, ConfigManager);

    this.config = _configConfig2['default'];
  }

  _createClass(ConfigManager, [{
    key: 'getStore',
    value: function getStore(storeName) {
      return this.config_.stores[storeName];
    }
  }, {
    key: 'config',
    set: function set(c) {
      this.config_ = c;
    },
    get: function get() {
      return this.config_;
    }
  }]);

  return ConfigManager;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2xpYnMvQ29uZmlnTWFuYWdlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FCQW1Cd0IscUJBQXFCOzs7Ozs7NEJBRjFCLGtCQUFrQjs7OztBQUV0QixTQUFTLHFCQUFxQixHQUFJOztBQUUvQyxNQUFJLE9BQU8sTUFBTSxDQUFDLHNCQUFzQixLQUFLLFdBQVcsRUFDdEQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDOztBQUV4RCxRQUFNLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQzs7QUFFcEQsU0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0NBQ3ZEOztJQUVLLGFBQWE7QUFFTCxXQUZSLGFBQWEsR0FFRjswQkFGWCxhQUFhOztBQUdmLFFBQUksQ0FBQyxNQUFNLDRCQUFTLENBQUM7R0FDdEI7O2VBSkcsYUFBYTs7V0FjUixrQkFBQyxTQUFTLEVBQUU7QUFDbkIsYUFBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUN2Qzs7O1NBVlUsYUFBQyxDQUFDLEVBQUU7QUFDYixVQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztLQUNsQjtTQUVVLGVBQUc7QUFDWixhQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7S0FDckI7OztTQVpHLGFBQWEiLCJmaWxlIjoiL1VzZXJzL2hlcm1hbncvRG9jdW1lbnRzL2hlcm13b25nL2lvc1Rlc3Qvc3JjL3NjcmlwdHMvbGlicy9Db25maWdNYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IENvbmZpZyBmcm9tICcuLi9jb25maWcvQ29uZmlnJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29uZmlnTWFuYWdlckluc3RhbmNlICgpIHtcblxuICBpZiAodHlwZW9mIHdpbmRvdy5Db25maWdNYW5hZ2VySW5zdGFuY2VfICE9PSAndW5kZWZpbmVkJylcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdpbmRvdy5Db25maWdNYW5hZ2VySW5zdGFuY2VfKTtcblxuICB3aW5kb3cuQ29uZmlnTWFuYWdlckluc3RhbmNlXyA9IG5ldyBDb25maWdNYW5hZ2VyKCk7XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh3aW5kb3cuQ29uZmlnTWFuYWdlckluc3RhbmNlXyk7XG59XG5cbmNsYXNzIENvbmZpZ01hbmFnZXIge1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmNvbmZpZyA9IENvbmZpZztcbiAgfVxuXG4gIHNldCBjb25maWcgKGMpIHtcbiAgICB0aGlzLmNvbmZpZ18gPSBjO1xuICB9XG5cbiAgZ2V0IGNvbmZpZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnXztcbiAgfVxuXG4gIGdldFN0b3JlIChzdG9yZU5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWdfLnN0b3Jlc1tzdG9yZU5hbWVdO1xuICB9XG5cbn1cbiJdfQ==
},{"../config/Config":2}],7:[function(require,module,exports){
/**
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = DatabaseInstance;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ConfigManager = require('./ConfigManager');

var _ConfigManager2 = _interopRequireDefault(_ConfigManager);

function DatabaseInstance() {

  if (typeof window.DatabaseInstance_ !== 'undefined') return Promise.resolve(window.DatabaseInstance_);

  window.DatabaseInstance_ = new Database();

  return Promise.resolve(window.DatabaseInstance_);
}

var Database = (function () {
  function Database() {
    var _this = this;

    _classCallCheck(this, Database);

    (0, _ConfigManager2['default'])().then(function (configManager) {

      var config = configManager.config;

      _this.db_ = null;
      _this.name_ = config.name;
      _this.version_ = config.version;
      _this.stores_ = config.stores;
    });
  }

  _createClass(Database, [{
    key: 'getStore',
    value: function getStore(storeName) {

      if (!this.stores_[storeName]) throw 'There is no store with name "' + storeName + '"';

      return this.stores_[storeName];
    }
  }, {
    key: 'open',
    value: function open() {
      var _this2 = this;

      if (this.db_) return Promise.resolve(this.db_);

      return new Promise(function (resolve, reject) {

        var dbOpen = indexedDB.open(_this2.name_, _this2.version_);

        dbOpen.onupgradeneeded = function (e) {

          _this2.db_ = e.target.result;

          var storeNames = Object.keys(_this2.stores_);
          var storeName;

          for (var s = 0; s < storeNames.length; s++) {

            storeName = storeNames[s];

            // If the store already exists
            if (_this2.db_.objectStoreNames.contains(storeName)) {

              // Check to see if the store should be deleted.
              // If so delete, and if not skip to the next store.
              if (_this2.stores_[storeName].deleteOnUpgrade) _this2.db_.deleteObjectStore(storeName);else continue;
            }

            var dbStore = _this2.db_.createObjectStore(storeName, _this2.stores_[storeName].properties);

            if (typeof _this2.stores_[storeName].indexes !== 'undefined') {
              var indexes = _this2.stores_[storeName].indexes;
              var indexNames = Object.keys(indexes);
              var index;

              for (var i = 0; i < indexNames.length; i++) {
                index = indexNames[i];
                dbStore.createIndex(index, index, indexes[index]);
              }
            }
          }
        };

        dbOpen.onsuccess = function (e) {
          _this2.db_ = e.target.result;
          resolve(_this2.db_);
        };

        dbOpen.onerror = function (e) {
          reject(e);
        };
      });
    }
  }, {
    key: 'close',
    value: function close() {
      var _this3 = this;

      return new Promise(function (resolve, reject) {

        if (!_this3.db_) reject('No database connection');

        _this3.db_.close();
        resolve(_this3.db_);
      });
    }
  }, {
    key: 'nuke',
    value: function nuke() {
      var _this4 = this;

      return new Promise(function (resolve, reject) {

        console.log("Nuking... " + _this4.name_);

        _this4.close();

        var dbTransaction = indexedDB.deleteDatabase(_this4.name_);
        dbTransaction.onsuccess = function (e) {
          console.log("Nuked...");
          resolve(e);
        };

        dbTransaction.onerror = function (e) {
          reject(e);
        };
      });
    }
  }, {
    key: 'put',
    value: function put(storeName, value, key) {

      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readwrite');
          var dbStore = dbTransaction.objectStore(storeName);
          var dbRequest = dbStore.put(value, key);

          dbTransaction.oncomplete = function (e) {
            resolve(dbRequest.result);
          };

          dbTransaction.onabort = dbTransaction.onerror = function (e) {
            reject(e);
          };
        });
      });
    }
  }, {
    key: 'get',
    value: function get(storeName, value) {

      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readonly');
          var dbStore = dbTransaction.objectStore(storeName);
          var dbStoreRequest;

          dbTransaction.oncomplete = function (e) {
            resolve(dbStoreRequest.result);
          };

          dbTransaction.onabort = dbTransaction.onerror = function (e) {
            reject(e);
          };

          dbStoreRequest = dbStore.get(value);
        });
      });
    }
  }, {
    key: 'getAll',
    value: function getAll(storeName, index, order) {

      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readonly');
          var dbStore = dbTransaction.objectStore(storeName);
          var dbCursor;

          if (typeof order !== 'string') order = 'next';

          if (typeof index === 'string') dbCursor = dbStore.index(index).openCursor(null, order);else dbCursor = dbStore.openCursor();

          var dbResults = [];

          dbCursor.onsuccess = function (e) {
            var cursor = e.target.result;

            if (cursor) {
              dbResults.push({
                key: cursor.key,
                value: cursor.value
              });
              cursor['continue']();
            } else {
              resolve(dbResults);
            }
          };

          dbCursor.onerror = function (e) {
            reject(e);
          };
        });
      });
    }
  }, {
    key: 'delete',
    value: function _delete(storeName, key) {
      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readwrite');
          var dbStore = dbTransaction.objectStore(storeName);

          dbTransaction.oncomplete = function (e) {
            resolve(e);
          };

          dbTransaction.onabort = dbTransaction.onerror = function (e) {
            reject(e);
          };

          dbStore['delete'](key);
        });
      });
    }
  }, {
    key: 'deleteAll',
    value: function deleteAll(storeName) {

      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readwrite');
          var dbStore = dbTransaction.objectStore(storeName);
          var dbRequest = dbStore.clear();

          dbRequest.onsuccess = function (e) {
            resolve(e);
          };

          dbRequest.onerror = function (e) {
            reject(e);
          };
        });
      });
    }
  }]);

  return Database;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./ConfigManager":6}],8:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = DialogInstance;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function DialogInstance() {

  if (typeof window.DialogInstance_ !== 'undefined') return Promise.resolve(window.DialogInstance_);

  window.DialogInstance_ = new Dialog();

  return Promise.resolve(window.DialogInstance_);
}

var Dialog = (function () {
  function Dialog() {
    _classCallCheck(this, Dialog);

    this.view = document.querySelector('.js-dialog');
    this.title = this.view.querySelector('.js-title');
    this.message = this.view.querySelector('.js-message');
    this.cancelButton = this.view.querySelector('.js-cancel');
    this.okayButton = this.view.querySelector('.js-okay');
  }

  _createClass(Dialog, [{
    key: 'show',
    value: function show(title, message, hideCancel) {
      var _this = this;

      this.title.textContent = title;
      this.message.textContent = message;
      this.view.classList.add('dialog-view--visible');

      if (hideCancel) this.cancelButton.classList.add('hidden');else this.cancelButton.classList.remove('hidden');

      return new Promise(function (resolve, reject) {

        var removeEventListenersAndHide = function removeEventListenersAndHide() {
          _this.cancelButton.removeEventListener('click', onCancel);
          _this.okayButton.removeEventListener('click', onOkay);
          _this.view.classList.remove('dialog-view--visible');
        };

        var onCancel = function onCancel(e) {
          removeEventListenersAndHide();
          reject();
        };

        var onOkay = function onOkay(e) {
          removeEventListenersAndHide();
          resolve();
        };

        _this.cancelButton.addEventListener('click', onCancel);
        _this.okayButton.addEventListener('click', onOkay);
      });
    }
  }]);

  return Dialog;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2xpYnMvRGlhbG9nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUJBaUJ3QixjQUFjOzs7O0FBQXZCLFNBQVMsY0FBYyxHQUFJOztBQUV4QyxNQUFJLE9BQU8sTUFBTSxDQUFDLGVBQWUsS0FBSyxXQUFXLEVBQy9DLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7O0FBRWpELFFBQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQzs7QUFFdEMsU0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztDQUNoRDs7SUFFSyxNQUFNO0FBRUUsV0FGUixNQUFNLEdBRUs7MEJBRlgsTUFBTTs7QUFHUixRQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDakQsUUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNsRCxRQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3RELFFBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDMUQsUUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztHQUN2RDs7ZUFSRyxNQUFNOztXQVVMLGNBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUU7OztBQUVoQyxVQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7QUFDL0IsVUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO0FBQ25DLFVBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDOztBQUVoRCxVQUFJLFVBQVUsRUFDWixJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsS0FFMUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztBQUUvQyxhQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBSzs7QUFFdEMsWUFBSSwyQkFBMkIsR0FBRyxTQUE5QiwyQkFBMkIsR0FBUztBQUN0QyxnQkFBSyxZQUFZLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3pELGdCQUFLLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDckQsZ0JBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQztTQUNwRCxDQUFBOztBQUVELFlBQUksUUFBUSxHQUFHLFNBQVgsUUFBUSxDQUFJLENBQUMsRUFBSztBQUNwQixxQ0FBMkIsRUFBRSxDQUFDO0FBQzlCLGdCQUFNLEVBQUUsQ0FBQztTQUNWLENBQUE7O0FBRUQsWUFBSSxNQUFNLEdBQUcsU0FBVCxNQUFNLENBQUksQ0FBQyxFQUFLO0FBQ2xCLHFDQUEyQixFQUFFLENBQUM7QUFDOUIsaUJBQU8sRUFBRSxDQUFDO1NBQ1gsQ0FBQTs7QUFFRCxjQUFLLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDdEQsY0FBSyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO09BRW5ELENBQUMsQ0FBQztLQUNKOzs7U0EzQ0csTUFBTSIsImZpbGUiOiIvVXNlcnMvaGVybWFudy9Eb2N1bWVudHMvaGVybXdvbmcvaW9zVGVzdC9zcmMvc2NyaXB0cy9saWJzL0RpYWxvZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERpYWxvZ0luc3RhbmNlICgpIHtcblxuICBpZiAodHlwZW9mIHdpbmRvdy5EaWFsb2dJbnN0YW5jZV8gIT09ICd1bmRlZmluZWQnKVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod2luZG93LkRpYWxvZ0luc3RhbmNlXyk7XG5cbiAgd2luZG93LkRpYWxvZ0luc3RhbmNlXyA9IG5ldyBEaWFsb2coKTtcblxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdpbmRvdy5EaWFsb2dJbnN0YW5jZV8pO1xufVxuXG5jbGFzcyBEaWFsb2cge1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnZpZXcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZGlhbG9nJyk7XG4gICAgdGhpcy50aXRsZSA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtdGl0bGUnKTtcbiAgICB0aGlzLm1lc3NhZ2UgPSB0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignLmpzLW1lc3NhZ2UnKTtcbiAgICB0aGlzLmNhbmNlbEJ1dHRvbiA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtY2FuY2VsJyk7XG4gICAgdGhpcy5va2F5QnV0dG9uID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy1va2F5Jyk7XG4gIH1cblxuICBzaG93ICh0aXRsZSwgbWVzc2FnZSwgaGlkZUNhbmNlbCkge1xuXG4gICAgdGhpcy50aXRsZS50ZXh0Q29udGVudCA9IHRpdGxlO1xuICAgIHRoaXMubWVzc2FnZS50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG4gICAgdGhpcy52aWV3LmNsYXNzTGlzdC5hZGQoJ2RpYWxvZy12aWV3LS12aXNpYmxlJyk7XG5cbiAgICBpZiAoaGlkZUNhbmNlbClcbiAgICAgIHRoaXMuY2FuY2VsQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgIGVsc2VcbiAgICAgIHRoaXMuY2FuY2VsQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgdmFyIHJlbW92ZUV2ZW50TGlzdGVuZXJzQW5kSGlkZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5jYW5jZWxCdXR0b24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNhbmNlbCk7XG4gICAgICAgIHRoaXMub2theUJ1dHRvbi5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG9uT2theSk7XG4gICAgICAgIHRoaXMudmlldy5jbGFzc0xpc3QucmVtb3ZlKCdkaWFsb2ctdmlldy0tdmlzaWJsZScpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb25DYW5jZWwgPSAoZSkgPT4ge1xuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyc0FuZEhpZGUoKTtcbiAgICAgICAgcmVqZWN0KCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvbk9rYXkgPSAoZSkgPT4ge1xuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyc0FuZEhpZGUoKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNhbmNlbEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2FuY2VsKTtcbiAgICAgIHRoaXMub2theUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uT2theSk7XG5cbiAgICB9KTtcbiAgfVxuXG59XG4iXX0=
},{}],9:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = PubSubInstance;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function PubSubInstance() {

  if (typeof window.PubSubInstance_ !== 'undefined') return Promise.resolve(window.PubSubInstance_);

  window.PubSubInstance_ = new PubSub();

  return Promise.resolve(window.PubSubInstance_);
}

var PubSub = (function () {
  function PubSub() {
    _classCallCheck(this, PubSub);

    this.subs = {};
  }

  _createClass(PubSub, [{
    key: 'sub',
    value: function sub(name, callback) {

      if (!this.subs[name]) this.subs[name] = [];

      this.subs[name].push(callback);
    }
  }, {
    key: 'unsub',
    value: function unsub(name, callback) {

      if (!this.subs[name]) return;

      var index = this.subs.indexOf(callback);

      if (index === -1) return;

      this.subs.splice(index, 1);
    }
  }, {
    key: 'pub',
    value: function pub(name, message) {

      if (!this.subs[name]) return;

      this.subs[name].forEach(function (subscriber) {
        subscriber(message);
      });
    }
  }]);

  return PubSub;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2xpYnMvUHViU3ViLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUJBaUJ3QixjQUFjOzs7O0FBQXZCLFNBQVMsY0FBYyxHQUFJOztBQUV4QyxNQUFJLE9BQU8sTUFBTSxDQUFDLGVBQWUsS0FBSyxXQUFXLEVBQy9DLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7O0FBRWpELFFBQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQzs7QUFFdEMsU0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztDQUNoRDs7SUFFSyxNQUFNO0FBRUUsV0FGUixNQUFNLEdBRUs7MEJBRlgsTUFBTTs7QUFHUixRQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztHQUNoQjs7ZUFKRyxNQUFNOztXQU1OLGFBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTs7QUFFbkIsVUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDOztBQUV2QixVQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNoQzs7O1dBRUssZUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFFOztBQUVyQixVQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFDbEIsT0FBTzs7QUFFVCxVQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzs7QUFFeEMsVUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQ2QsT0FBTzs7QUFFVCxVQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDNUI7OztXQUVHLGFBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRTs7QUFFbEIsVUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ2xCLE9BQU87O0FBRVQsVUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxVQUFVLEVBQUk7QUFDcEMsa0JBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztPQUNyQixDQUFDLENBQUE7S0FDSDs7O1NBbkNHLE1BQU0iLCJmaWxlIjoiL1VzZXJzL2hlcm1hbncvRG9jdW1lbnRzL2hlcm13b25nL2lvc1Rlc3Qvc3JjL3NjcmlwdHMvbGlicy9QdWJTdWIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQdWJTdWJJbnN0YW5jZSAoKSB7XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cuUHViU3ViSW5zdGFuY2VfICE9PSAndW5kZWZpbmVkJylcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdpbmRvdy5QdWJTdWJJbnN0YW5jZV8pO1xuXG4gIHdpbmRvdy5QdWJTdWJJbnN0YW5jZV8gPSBuZXcgUHViU3ViKCk7XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh3aW5kb3cuUHViU3ViSW5zdGFuY2VfKTtcbn1cblxuY2xhc3MgUHViU3ViIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5zdWJzID0ge307XG4gIH1cblxuICBzdWIgKG5hbWUsIGNhbGxiYWNrKSB7XG5cbiAgICBpZiAoIXRoaXMuc3Vic1tuYW1lXSlcbiAgICAgIHRoaXMuc3Vic1tuYW1lXSA9IFtdO1xuXG4gICAgdGhpcy5zdWJzW25hbWVdLnB1c2goY2FsbGJhY2spO1xuICB9XG5cbiAgdW5zdWIgKG5hbWUsIGNhbGxiYWNrKSB7XG5cbiAgICBpZiAoIXRoaXMuc3Vic1tuYW1lXSlcbiAgICAgIHJldHVybjtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuc3Vicy5pbmRleE9mKGNhbGxiYWNrKTtcblxuICAgIGlmIChpbmRleCA9PT0gLTEpXG4gICAgICByZXR1cm47XG5cbiAgICB0aGlzLnN1YnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuXG4gIHB1YiAobmFtZSwgbWVzc2FnZSkge1xuXG4gICAgaWYgKCF0aGlzLnN1YnNbbmFtZV0pXG4gICAgICByZXR1cm47XG5cbiAgICB0aGlzLnN1YnNbbmFtZV0uZm9yRWFjaChzdWJzY3JpYmVyID0+IHtcbiAgICAgIHN1YnNjcmliZXIobWVzc2FnZSk7XG4gICAgfSlcbiAgfVxuXG59XG4iXX0=
},{}],10:[function(require,module,exports){
/**
 * Copyright 2014 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = RouterInstance;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function RouterInstance() {

  if (typeof window.RouterInstance_ !== 'undefined') return Promise.resolve(window.RouterInstance_);

  window.RouterInstance_ = new Router();

  return Promise.resolve(window.RouterInstance_);
}

var Router = (function () {
  function Router() {
    var _this = this;

    _classCallCheck(this, Router);

    this.routes = {};
    this.currentAction = null;
    this.loader = document.querySelector('.loader');

    window.addEventListener('popstate', function (e) {
      _this.onPopState(e);
    });

    this.manageState();
  }

  _createClass(Router, [{
    key: 'add',
    value: function add(path, callbackIn, callbackOut, callbackUpdate) {
      var _this2 = this;

      // Assume the first part of the path is the
      // verb we want to action, with the rest of the path
      // being the data to pass to the handler.
      var pathParts = path.split('/');
      var action = pathParts.shift();

      if (this.routes[action]) throw "A handler already exists for this action: " + action;

      this.routes[action] = {
        'in': callbackIn,
        out: callbackOut,
        update: callbackUpdate
      };

      // Check to see if this path is fulfilled.
      requestAnimationFrame(function () {
        if (_this2.manageState()) {
          document.body.classList.remove('deeplink');
        }
      });
    }
  }, {
    key: 'remove',
    value: function remove(path) {

      var pathParts = path.split('/');
      var action = pathParts.shift();

      if (!this.routes[action]) return;

      delete this.routes[action];
    }
  }, {
    key: 'manageState',
    value: function manageState() {

      var path = document.location.pathname.replace(/^\//, '');

      // Assume the first part of the path is the
      // verb we want to action, with the rest of the path
      // being the data to pass to the handler.
      var pathParts = path.split('/');
      var action = pathParts.shift();
      var data = pathParts.join('/');

      // Add a special case for the root.
      if (action === '') action = '_root';

      // Remove any deeplink covers.
      if (document.body.classList.contains('app-deeplink')) document.body.classList.remove('app-deeplink');

      // Hide the loader.
      this.loader.classList.add('hidden');

      if (this.currentAction === this.routes[action]) {

        if (typeof this.currentAction.update === 'function') {
          this.currentAction.update(data);
          return true;
        }

        return false;
      }

      if (!this.routes[action]) {

        if (this.currentAction) this.currentAction.out();

        this.currentAction = null;
        document.body.focus();
        return false;
      }

      // Set the new action going.
      var delay = this.routes[action]['in'](data) || 0;

      // Remove the old action and update the reference.
      if (this.currentAction) {

        // Allow the incoming view to delay the outgoing one
        // so that we don't get too much overlapping animation.
        if (delay === 0) this.currentAction.out();else setTimeout(this.currentAction.out, delay);
      }

      this.currentAction = this.routes[action];

      return true;
    }
  }, {
    key: 'go',
    value: function go(path) {
      var _this3 = this;

      // Only process real changes.
      if (path === window.location.pathname) return;

      history.pushState(undefined, "", path);
      requestAnimationFrame(function () {
        _this3.manageState();
      });
    }
  }, {
    key: 'onPopState',
    value: function onPopState(e) {
      var _this4 = this;

      e.preventDefault();
      requestAnimationFrame(function () {
        _this4.manageState();
      });
    }
  }]);

  return Router;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],11:[function(require,module,exports){
/**
 * Copyright 2014 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = ToasterInstance;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function ToasterInstance() {

  if (typeof window.ToasterInstance_ !== 'undefined') return Promise.resolve(window.ToasterInstance_);

  window.ToasterInstance_ = new Toaster();

  return Promise.resolve(window.ToasterInstance_);
}

var Toaster = (function () {
  function Toaster() {
    _classCallCheck(this, Toaster);

    this.view = document.querySelector('.toast-view');
    this.hideTimeout = 0;
    this.hideBound = this.hide.bind(this);
  }

  _createClass(Toaster, [{
    key: 'toast',
    value: function toast(message) {

      this.view.textContent = message;
      this.view.classList.add('toast-view--visible');

      clearTimeout(this.hideTimeout);
      this.hideTimeout = setTimeout(this.hideBound, 3000);
    }
  }, {
    key: 'hide',
    value: function hide() {
      this.view.classList.remove('toast-view--visible');
    }
  }]);

  return Toaster;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2xpYnMvVG9hc3Rlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUJBZ0J3QixlQUFlOzs7O0FBQXhCLFNBQVMsZUFBZSxHQUFJOztBQUV6QyxNQUFJLE9BQU8sTUFBTSxDQUFDLGdCQUFnQixLQUFLLFdBQVcsRUFDaEQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDOztBQUVsRCxRQUFNLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQzs7QUFFeEMsU0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0NBQ2pEOztJQUVLLE9BQU87QUFFQyxXQUZSLE9BQU8sR0FFSTswQkFGWCxPQUFPOztBQUdULFFBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNsRCxRQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztBQUNyQixRQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQ3ZDOztlQU5HLE9BQU87O1dBUUwsZUFBQyxPQUFPLEVBQUU7O0FBRWQsVUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO0FBQ2hDLFVBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDOztBQUUvQyxrQkFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMvQixVQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ3JEOzs7V0FFSSxnQkFBRztBQUNOLFVBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0tBQ25EOzs7U0FuQkcsT0FBTyIsImZpbGUiOiIvVXNlcnMvaGVybWFudy9Eb2N1bWVudHMvaGVybXdvbmcvaW9zVGVzdC9zcmMvc2NyaXB0cy9saWJzL1RvYXN0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE0IEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRvYXN0ZXJJbnN0YW5jZSAoKSB7XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cuVG9hc3Rlckluc3RhbmNlXyAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh3aW5kb3cuVG9hc3Rlckluc3RhbmNlXyk7XG5cbiAgd2luZG93LlRvYXN0ZXJJbnN0YW5jZV8gPSBuZXcgVG9hc3RlcigpO1xuXG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUod2luZG93LlRvYXN0ZXJJbnN0YW5jZV8pO1xufVxuXG5jbGFzcyBUb2FzdGVyIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy52aWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvYXN0LXZpZXcnKTtcbiAgICB0aGlzLmhpZGVUaW1lb3V0ID0gMDtcbiAgICB0aGlzLmhpZGVCb3VuZCA9IHRoaXMuaGlkZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgdG9hc3QgKG1lc3NhZ2UpIHtcblxuICAgIHRoaXMudmlldy50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG4gICAgdGhpcy52aWV3LmNsYXNzTGlzdC5hZGQoJ3RvYXN0LXZpZXctLXZpc2libGUnKTtcblxuICAgIGNsZWFyVGltZW91dCh0aGlzLmhpZGVUaW1lb3V0KTtcbiAgICB0aGlzLmhpZGVUaW1lb3V0ID0gc2V0VGltZW91dCh0aGlzLmhpZGVCb3VuZCwgMzAwMCk7XG4gIH1cblxuICBoaWRlICgpIHtcbiAgICB0aGlzLnZpZXcuY2xhc3NMaXN0LnJlbW92ZSgndG9hc3Qtdmlldy0tdmlzaWJsZScpO1xuICB9XG59XG4iXX0=
},{}],12:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Model2 = require('./Model');

var _Model3 = _interopRequireDefault(_Model2);

var MemoModel = (function (_Model) {
  _inherits(MemoModel, _Model);

  function MemoModel(data, key) {
    _classCallCheck(this, MemoModel);

    _get(Object.getPrototypeOf(MemoModel.prototype), 'constructor', this).call(this, key);

    this.title = data.title || 'Untitled Memo';
    this.description = data.description || null;
    this.url = data.url || MemoModel.makeURL();
    this.audio = data.audio || null;
    this.volumeData = data.volumeData || null;
    this.time = data.time || Date.now();
    this.transcript = data.transcript || null;
  }

  _createClass(MemoModel, null, [{
    key: 'makeURL',
    value: function makeURL() {
      var url = '';
      for (var i = 0; i < 16; i++) {
        url += Number(Math.floor(Math.random() * 16)).toString(16);
      }

      return url;
    }
  }, {
    key: 'UPDATED',
    get: function get() {
      return 'MemoModel-updated';
    }
  }, {
    key: 'storeName',
    get: function get() {
      return 'MemoModel';
    }
  }]);

  return MemoModel;
})(_Model3['default']);

exports['default'] = MemoModel;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL21vZGVsL01lbW9Nb2RlbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c0JBaUJrQixTQUFTOzs7O0lBRU4sU0FBUztZQUFULFNBQVM7O0FBRWhCLFdBRk8sU0FBUyxDQUVmLElBQUksRUFBRSxHQUFHLEVBQUU7MEJBRkwsU0FBUzs7QUFJMUIsK0JBSmlCLFNBQVMsNkNBSXBCLEdBQUcsRUFBRTs7QUFFWCxRQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksZUFBZSxDQUFDO0FBQzNDLFFBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUM7QUFDNUMsUUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUMzQyxRQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDO0FBQ2hDLFFBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUM7QUFDMUMsUUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQyxRQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDO0dBQzNDOztlQWJrQixTQUFTOztXQWViLG1CQUFHO0FBQ2hCLFVBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFdBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDM0IsV0FBRyxJQUFJLE1BQU0sQ0FDVCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FDakMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7T0FDaEI7O0FBRUQsYUFBTyxHQUFHLENBQUM7S0FDWjs7O1NBRWtCLGVBQUc7QUFDcEIsYUFBTyxtQkFBbUIsQ0FBQztLQUM1Qjs7O1NBRW9CLGVBQUc7QUFDdEIsYUFBTyxXQUFXLENBQUM7S0FDcEI7OztTQWhDa0IsU0FBUzs7O3FCQUFULFNBQVMiLCJmaWxlIjoiL1VzZXJzL2hlcm1hbncvRG9jdW1lbnRzL2hlcm13b25nL2lvc1Rlc3Qvc3JjL3NjcmlwdHMvbW9kZWwvTWVtb01vZGVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IE1vZGVsIGZyb20gJy4vTW9kZWwnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZW1vTW9kZWwgZXh0ZW5kcyBNb2RlbCB7XG5cbiAgY29uc3RydWN0b3IgKGRhdGEsIGtleSkge1xuXG4gICAgc3VwZXIoa2V5KTtcblxuICAgIHRoaXMudGl0bGUgPSBkYXRhLnRpdGxlIHx8ICdVbnRpdGxlZCBNZW1vJztcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvbiB8fCBudWxsO1xuICAgIHRoaXMudXJsID0gZGF0YS51cmwgfHwgTWVtb01vZGVsLm1ha2VVUkwoKTtcbiAgICB0aGlzLmF1ZGlvID0gZGF0YS5hdWRpbyB8fCBudWxsO1xuICAgIHRoaXMudm9sdW1lRGF0YSA9IGRhdGEudm9sdW1lRGF0YSB8fCBudWxsO1xuICAgIHRoaXMudGltZSA9IGRhdGEudGltZSB8fCBEYXRlLm5vdygpO1xuICAgIHRoaXMudHJhbnNjcmlwdCA9IGRhdGEudHJhbnNjcmlwdCB8fCBudWxsO1xuICB9XG5cbiAgc3RhdGljIG1ha2VVUkwgKCkge1xuICAgIHZhciB1cmwgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgIHVybCArPSBOdW1iZXIoXG4gICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTYpXG4gICAgICApLnRvU3RyaW5nKDE2KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgc3RhdGljIGdldCBVUERBVEVEICgpIHtcbiAgICByZXR1cm4gJ01lbW9Nb2RlbC11cGRhdGVkJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgc3RvcmVOYW1lICgpIHtcbiAgICByZXR1cm4gJ01lbW9Nb2RlbCc7XG4gIH1cblxufVxuIl19
},{"./Model":13}],13:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _libsDatabase = require('../libs/Database');

var _libsDatabase2 = _interopRequireDefault(_libsDatabase);

var _libsConfigManager = require('../libs/ConfigManager');

var _libsConfigManager2 = _interopRequireDefault(_libsConfigManager);

var Model = (function () {
  function Model(key) {
    _classCallCheck(this, Model);

    this.key = key;
  }

  _createClass(Model, [{
    key: 'put',
    value: function put() {
      return this.constructor.put(this);
    }

    /**
     * Either inserts or update depending on whether the key / keyPath is set.
     * If the keyPath is set, and a property of the value matches (in-line key)
     * then the object is updated. If the keyPath is not set and the value's key
     * is null, then the object is inserted. If the keypath is not set and the
     * value's key is set then the object is updated.
     */
  }, {
    key: 'delete',
    value: function _delete() {
      return this.constructor['delete'](this);
    }
  }], [{
    key: 'nuke',
    value: function nuke() {
      return (0, _libsDatabase2['default'])().then(function (db) {
        return db.close();
      }).then(function (db) {
        return db.nuke();
      });
    }
  }, {
    key: 'get',
    value: function get(key) {
      var _this = this;

      if (this instanceof Model) Promise.reject("Can't call get on Model directly. Inherit first.");

      return (0, _libsDatabase2['default'])()

      // Do the query.
      .then(function (db) {
        return db.get(_this.storeName, key);
      })

      // Wrap the result in the correct class.
      .then(function (result) {

        return (0, _libsConfigManager2['default'])().then(function (configManager) {

          var store = configManager.getStore(_this.storeName);

          if (!result) return;

          var resultKey = key;

          // If the store uses a keypath then reset
          // the key back to undefined.
          if (store.properties.keyPath) resultKey = undefined;

          return new _this(result, resultKey);
        });
      });
    }

    /**
     * Gets all the objects from the database.
     */
  }, {
    key: 'getAll',
    value: function getAll(index, order) {
      var _this2 = this;

      if (this instanceof Model) Promise.reject("Can't call getAll on Model directly. Inherit first.");

      return (0, _libsDatabase2['default'])()

      // Do the query.
      .then(function (db) {
        return db.getAll(_this2.storeName, index, order);
      })

      // Wrap all the results in the correct class.
      .then(function (results) {

        return (0, _libsConfigManager2['default'])().then(function (configManager) {

          var store = configManager.getStore(_this2.storeName);
          var results_ = [];

          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = results[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var result = _step.value;

              var key = result.key;

              // If the store uses a keypath then reset
              // the key back to undefined.
              if (store.properties.keyPath) key = undefined;

              results_.push(new _this2(result.value, key));
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          return results_;
        });
      });
    }
  }, {
    key: 'put',
    value: function put(value) {
      var _this3 = this;

      if (this instanceof Model) Promise.reject("Can't call put on Model directly. Inherit first.");

      return (0, _libsDatabase2['default'])()

      // Do the query.
      .then(function (db) {
        return db.put(_this3.storeName, value, value.key);
      }).then(function (key) {

        return (0, _libsConfigManager2['default'])().then(function (configManager) {

          // Inserting may provide a key. If there is no keyPath set
          // the object needs to be updated with a key value so it can
          // be altered and saved again without creating a new record.
          var store = configManager.getStore(_this3.storeName);

          var keyPath = store.properties.keyPath;

          if (!keyPath) value.key = key;

          return value;
        });
      });
    }
  }, {
    key: 'deleteAll',
    value: function deleteAll() {
      var _this4 = this;

      if (this instanceof Model) Promise.reject("Can't call deleteAll on Model directly. Inherit first.");

      return (0, _libsDatabase2['default'])().then(function (db) {
        return db.deleteAll(_this4.storeName);
      })['catch'](function (e) {
        // It may be that the store doesn't exist yet, so relax for that one.
        if (e.name !== 'NotFoundError') throw e;
      });
    }
  }, {
    key: 'delete',
    value: function _delete(value) {
      var _this5 = this;

      if (this instanceof Model) Promise.reject("Can't call delete on Model directly. Inherit first.");

      return (0, _libsConfigManager2['default'])().then(function (configManager) {

        // If passed the full object to delete then
        // grab its key for the delete
        if (value instanceof _this5) {

          var store = configManager.getStore(_this5.storeName);
          var keyPath = store.properties.keyPath;

          if (keyPath) value = value[keyPath];else value = value.key;
        }

        return (0, _libsDatabase2['default'])().then(function (db) {
          return db['delete'](_this5.storeName, value);
        });
      });
    }
  }, {
    key: 'ASCENDING',
    get: function get() {
      return 'next';
    }
  }, {
    key: 'DESCENDING',
    get: function get() {
      return 'prev';
    }
  }, {
    key: 'UPDATED',
    get: function get() {
      return 'Model-updated';
    }
  }, {
    key: 'storeName',
    get: function get() {
      return 'Model';
    }
  }]);

  return Model;
})();

exports['default'] = Model;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../libs/ConfigManager":6,"../libs/Database":7}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
