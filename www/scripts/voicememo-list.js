/*!
 * Copyright 2017 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _controllerListController = require('./controller/ListController');

var _controllerListController2 = _interopRequireDefault(_controllerListController);

new _controllerListController2['default']();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL3ZvaWNlbWVtby1saXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3Q0FpQjJCLDZCQUE2Qjs7OztBQUV4RCwyQ0FBb0IsQ0FBQyIsImZpbGUiOiIvVXNlcnMvaGVybWFudy9Eb2N1bWVudHMvaGVybXdvbmcvaW9zVGVzdC9zcmMvc2NyaXB0cy92b2ljZW1lbW8tbGlzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5cbmltcG9ydCBMaXN0Q29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXIvTGlzdENvbnRyb2xsZXInO1xuXG5uZXcgTGlzdENvbnRyb2xsZXIoKTtcbiJdfQ==
},{"./controller/ListController":4}],2:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var Config = {
  name: 'voicememo',
  version: 1,
  stores: {
    'MemoModel': {
      properties: {
        autoIncrement: true,
        keyPath: 'url'
      },
      indexes: {
        time: { unique: true }
      }
    },
    'AppModel': {
      deleteOnUpgrade: true,
      properties: {
        autoIncrement: true
      }
    }
  }
};

exports['default'] = Config;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2NvbmZpZy9Db25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxJQUFNLE1BQU0sR0FBRztBQUNiLE1BQUksRUFBRSxXQUFXO0FBQ2pCLFNBQU8sRUFBRSxDQUFDO0FBQ1YsUUFBTSxFQUFFO0FBQ04sZUFBVyxFQUFFO0FBQ1gsZ0JBQVUsRUFBRTtBQUNWLHFCQUFhLEVBQUUsSUFBSTtBQUNuQixlQUFPLEVBQUUsS0FBSztPQUNmO0FBQ0QsYUFBTyxFQUFFO0FBQ1AsWUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtPQUN2QjtLQUNGO0FBQ0QsY0FBVSxFQUFFO0FBQ1YscUJBQWUsRUFBRSxJQUFJO0FBQ3JCLGdCQUFVLEVBQUU7QUFDVixxQkFBYSxFQUFFLElBQUk7T0FDcEI7S0FDRjtHQUNGO0NBQ0YsQ0FBQzs7cUJBRWEsTUFBTSIsImZpbGUiOiIvVXNlcnMvaGVybWFudy9Eb2N1bWVudHMvaGVybXdvbmcvaW9zVGVzdC9zcmMvc2NyaXB0cy9jb25maWcvQ29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuY29uc3QgQ29uZmlnID0ge1xuICBuYW1lOiAndm9pY2VtZW1vJyxcbiAgdmVyc2lvbjogMSxcbiAgc3RvcmVzOiB7XG4gICAgJ01lbW9Nb2RlbCc6IHtcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZSxcbiAgICAgICAga2V5UGF0aDogJ3VybCdcbiAgICAgIH0sXG4gICAgICBpbmRleGVzOiB7XG4gICAgICAgIHRpbWU6IHsgdW5pcXVlOiB0cnVlIH1cbiAgICAgIH1cbiAgICB9LFxuICAgICdBcHBNb2RlbCc6IHtcbiAgICAgIGRlbGV0ZU9uVXBncmFkZTogdHJ1ZSxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29uZmlnO1xuIl19
},{}],3:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Controller = (function () {
  function Controller() {
    _classCallCheck(this, Controller);
  }

  _createClass(Controller, [{
    key: 'loadScript',
    value: function loadScript(url) {

      return new Promise(function (resolve, reject) {
        var script = document.createElement('script');
        script.async = true;
        script.src = url;

        script.onload = resolve;
        script.onerror = reject;

        document.head.appendChild(script);
      });
    }
  }, {
    key: 'loadCSS',
    value: function loadCSS(url) {
      return new Promise(function (resolve, reject) {

        var xhr = new XMLHttpRequest();
        xhr.open('GET', url);
        xhr.responseType = 'text';
        xhr.onload = function (e) {

          if (this.status == 200) {

            var style = document.createElement('style');
            style.textContent = xhr.response;
            document.head.appendChild(style);
            resolve();
          } else {

            reject();
          }
        };

        xhr.send();
      });
    }
  }]);

  return Controller;
})();

exports['default'] = Controller;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2NvbnRyb2xsZXIvQ29udHJvbGxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFpQnFCLFVBQVU7V0FBVixVQUFVOzBCQUFWLFVBQVU7OztlQUFWLFVBQVU7O1dBRWxCLG9CQUFDLEdBQUcsRUFBRTs7QUFFZixhQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBSztBQUN0QyxZQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzlDLGNBQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ3BCLGNBQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDOztBQUVqQixjQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztBQUN4QixjQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQzs7QUFFeEIsZ0JBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO09BQ25DLENBQUMsQ0FBQztLQUNKOzs7V0FFTyxpQkFBQyxHQUFHLEVBQUU7QUFDWixhQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBSzs7QUFFdEMsWUFBSSxHQUFHLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztBQUMvQixXQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNyQixXQUFHLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQztBQUMxQixXQUFHLENBQUMsTUFBTSxHQUFHLFVBQVMsQ0FBQyxFQUFFOztBQUV2QixjQUFJLElBQUksQ0FBQyxNQUFNLElBQUksR0FBRyxFQUFFOztBQUV0QixnQkFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM1QyxpQkFBSyxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBQ2pDLG9CQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqQyxtQkFBTyxFQUFFLENBQUM7V0FFWCxNQUFNOztBQUVMLGtCQUFNLEVBQUUsQ0FBQztXQUVWO1NBQ0YsQ0FBQTs7QUFFRCxXQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7T0FFWixDQUFDLENBQUM7S0FDSjs7O1NBekNrQixVQUFVOzs7cUJBQVYsVUFBVSIsImZpbGUiOiIvVXNlcnMvaGVybWFudy9Eb2N1bWVudHMvaGVybXdvbmcvaW9zVGVzdC9zcmMvc2NyaXB0cy9jb250cm9sbGVyL0NvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250cm9sbGVyIHtcblxuICBsb2FkU2NyaXB0ICh1cmwpIHtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgICAgc2NyaXB0LnNyYyA9IHVybDtcblxuICAgICAgc2NyaXB0Lm9ubG9hZCA9IHJlc29sdmU7XG4gICAgICBzY3JpcHQub25lcnJvciA9IHJlamVjdDtcblxuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIH0pO1xuICB9XG5cbiAgbG9hZENTUyAodXJsKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT0gMjAwKSB7XG5cbiAgICAgICAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0geGhyLnJlc3BvbnNlO1xuICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgICAgICAgIHJlc29sdmUoKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgcmVqZWN0KCk7XG5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB4aHIuc2VuZCgpO1xuXG4gICAgfSk7XG4gIH1cblxufVxuIl19
},{}],4:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Controller2 = require('./Controller');

var _Controller3 = _interopRequireDefault(_Controller2);

var _modelMemoModel = require('../model/MemoModel');

var _modelMemoModel2 = _interopRequireDefault(_modelMemoModel);

var _libsRouter = require('../libs/Router');

var _libsRouter2 = _interopRequireDefault(_libsRouter);

var _libsPubSub = require('../libs/PubSub');

var _libsPubSub2 = _interopRequireDefault(_libsPubSub);

var ListController = (function (_Controller) {
  _inherits(ListController, _Controller);

  function ListController() {
    var _this = this;

    _classCallCheck(this, ListController);

    _get(Object.getPrototypeOf(ListController.prototype), 'constructor', this).call(this);

    this.memos = null;
    this.ctaView = document.querySelector('.js-cta');
    this.view = document.querySelector('.js-list-view');

    Promise.all([this.loadCSS('/styles/voicememo-list.css'), this.loadScript('/third_party/moment.min.js')]).then(function () {
      _this.getMemosAndPopulate();

      (0, _libsPubSub2['default'])().then(function (ps) {
        ps.sub(_modelMemoModel2['default'].UPDATED, function () {
          _this.getMemosAndPopulate();
        });
      });

      (0, _libsPubSub2['default'])().then(function (ps) {
        ps.sub('list-covered', function () {
          _this.view.classList.add('list-view--shrunk');
          _this.unsetTabIndexes();
        });
      });

      (0, _libsPubSub2['default'])().then(function (ps) {
        ps.sub('list-uncovered', function () {
          _this.view.classList.remove('list-view--shrunk');
          _this.setTabIndexes();
        });
      });

      (0, _libsPubSub2['default'])().then(function (ps) {
        ps.sub('list-locked', function () {
          _this.view.classList.add('list-view--locked');
          _this.unsetTabIndexes();
        });
      });

      (0, _libsPubSub2['default'])().then(function (ps) {
        ps.sub('list-unlocked', function () {
          _this.view.classList.remove('list-view--locked');
          _this.unsetTabIndexes();
        });
      });
    });
  }

  _createClass(ListController, [{
    key: 'getMemosAndPopulate',
    value: function getMemosAndPopulate() {
      var _this2 = this;

      _modelMemoModel2['default'].getAll('time', _modelMemoModel2['default'].DESCENDING).then(function (memos) {
        _this2.memos = memos;
        _this2.populate();
        _this2.setTabIndexes();
      });
    }
  }, {
    key: 'escapeHTML',
    value: function escapeHTML(str) {

      if (str === null) return str;

      // Similar to both http://php.net/htmlspecialchars and
      // http://www.2ality.com/2015/01/template-strings-html.html in what
      // it chooses to replace.
      return str.replace(/&/g, '&amp;').replace(/>/g, '&gt;').replace(/</g, '&lt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
    }
  }, {
    key: 'populate',
    value: function populate() {
      var _this3 = this;

      if (!this.memos.length) {
        this.ctaView.classList.add('empty-set-cta--visible');
        return;
      }

      this.ctaView.classList.remove('empty-set-cta--visible');
      this.removeEventListeners();

      var list = '<ol class="list-view__contents">';

      this.memos.forEach(function (memo) {

        var memoTimeAgo = moment(memo.time).fromNow();
        var memoTitle = _this3.escapeHTML(memo.title);
        var memoDescription = _this3.escapeHTML(memo.description);

        list += '<li class="list-view__item" id="vm-' + memo.url + '" data-url="' + memo.url + '">\n                <div class="list-view__item-details">\n                  <div class="list-view__item-date">' + memoTimeAgo + '</div>\n                  <div class="list-view__item-title">' + memoTitle + '</div>';

        if (memo.description !== null) {
          list += '<div class="list-view__item-description">\n                  ' + memoDescription + '\n                </div>';
        }

        list += '</div></li>';
      });

      list += '</ol>';

      this.view.innerHTML = list;
      this.addEventListeners();
    }
  }, {
    key: 'setTabIndexes',
    value: function setTabIndexes() {

      if (this.view.classList.contains('list-view--locked')) return;

      if (this.view.classList.contains('list-view--shrunk')) return;

      var listItems = document.querySelectorAll('.list-view__item');

      for (var l = 0; l < listItems.length; l++) {
        listItems[l].tabIndex = l + 2;
      }
    }
  }, {
    key: 'unsetTabIndexes',
    value: function unsetTabIndexes() {

      var listItems = document.querySelectorAll('.list-view__item');

      for (var l = 0; l < listItems.length; l++) {
        listItems[l].removeAttribute('tabindex');
      }
    }
  }, {
    key: 'addEventListeners',
    value: function addEventListeners() {
      var toggleButtons = document.querySelectorAll('.list-view__item-preview-toggle');

      var listItems = document.querySelectorAll('.list-view__item');

      for (var l = 0; l < listItems.length; l++) {
        listItems[l].addEventListener('keyup', this.onListItemClick);
        listItems[l].addEventListener('click', this.onListItemClick);
      }
    }
  }, {
    key: 'removeEventListeners',
    value: function removeEventListeners() {
      var listItems = document.querySelectorAll('.list-view__item');

      for (var l = 0; l < listItems.length; l++) {
        listItems[l].removeEventListener('keyup', this.onListItemClick);
        listItems[l].removeEventListener('click', this.onListItemClick);
      }
    }
  }, {
    key: 'onListItemClick',
    value: function onListItemClick(e) {
      var _this4 = this;

      if (e.type == 'keyup' && e.keyCode !== 13) return;

      e.target.classList.add('active');

      (0, _libsRouter2['default'])().then(function (router) {
        router.go('/details/' + _this4.dataset.url);
      });
    }
  }, {
    key: 'onToggleButtonPress',
    value: function onToggleButtonPress() {
      // get the for attribute, find the audio, set the src
      // when the user clicks stop, we should unhook the audio
      // via revokeObjectURL
    }
  }]);

  return ListController;
})(_Controller3['default']);

exports['default'] = ListController;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../libs/PubSub":7,"../libs/Router":8,"../model/MemoModel":9,"./Controller":3}],5:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = ConfigManagerInstance;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _configConfig = require('../config/Config');

var _configConfig2 = _interopRequireDefault(_configConfig);

function ConfigManagerInstance() {

  if (typeof window.ConfigManagerInstance_ !== 'undefined') return Promise.resolve(window.ConfigManagerInstance_);

  window.ConfigManagerInstance_ = new ConfigManager();

  return Promise.resolve(window.ConfigManagerInstance_);
}

var ConfigManager = (function () {
  function ConfigManager() {
    _classCallCheck(this, ConfigManager);

    this.config = _configConfig2['default'];
  }

  _createClass(ConfigManager, [{
    key: 'getStore',
    value: function getStore(storeName) {
      return this.config_.stores[storeName];
    }
  }, {
    key: 'config',
    set: function set(c) {
      this.config_ = c;
    },
    get: function get() {
      return this.config_;
    }
  }]);

  return ConfigManager;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2xpYnMvQ29uZmlnTWFuYWdlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FCQW1Cd0IscUJBQXFCOzs7Ozs7NEJBRjFCLGtCQUFrQjs7OztBQUV0QixTQUFTLHFCQUFxQixHQUFJOztBQUUvQyxNQUFJLE9BQU8sTUFBTSxDQUFDLHNCQUFzQixLQUFLLFdBQVcsRUFDdEQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDOztBQUV4RCxRQUFNLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQzs7QUFFcEQsU0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0NBQ3ZEOztJQUVLLGFBQWE7QUFFTCxXQUZSLGFBQWEsR0FFRjswQkFGWCxhQUFhOztBQUdmLFFBQUksQ0FBQyxNQUFNLDRCQUFTLENBQUM7R0FDdEI7O2VBSkcsYUFBYTs7V0FjUixrQkFBQyxTQUFTLEVBQUU7QUFDbkIsYUFBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUN2Qzs7O1NBVlUsYUFBQyxDQUFDLEVBQUU7QUFDYixVQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztLQUNsQjtTQUVVLGVBQUc7QUFDWixhQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7S0FDckI7OztTQVpHLGFBQWEiLCJmaWxlIjoiL1VzZXJzL2hlcm1hbncvRG9jdW1lbnRzL2hlcm13b25nL2lvc1Rlc3Qvc3JjL3NjcmlwdHMvbGlicy9Db25maWdNYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IENvbmZpZyBmcm9tICcuLi9jb25maWcvQ29uZmlnJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29uZmlnTWFuYWdlckluc3RhbmNlICgpIHtcblxuICBpZiAodHlwZW9mIHdpbmRvdy5Db25maWdNYW5hZ2VySW5zdGFuY2VfICE9PSAndW5kZWZpbmVkJylcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdpbmRvdy5Db25maWdNYW5hZ2VySW5zdGFuY2VfKTtcblxuICB3aW5kb3cuQ29uZmlnTWFuYWdlckluc3RhbmNlXyA9IG5ldyBDb25maWdNYW5hZ2VyKCk7XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh3aW5kb3cuQ29uZmlnTWFuYWdlckluc3RhbmNlXyk7XG59XG5cbmNsYXNzIENvbmZpZ01hbmFnZXIge1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmNvbmZpZyA9IENvbmZpZztcbiAgfVxuXG4gIHNldCBjb25maWcgKGMpIHtcbiAgICB0aGlzLmNvbmZpZ18gPSBjO1xuICB9XG5cbiAgZ2V0IGNvbmZpZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnXztcbiAgfVxuXG4gIGdldFN0b3JlIChzdG9yZU5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWdfLnN0b3Jlc1tzdG9yZU5hbWVdO1xuICB9XG5cbn1cbiJdfQ==
},{"../config/Config":2}],6:[function(require,module,exports){
/**
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = DatabaseInstance;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ConfigManager = require('./ConfigManager');

var _ConfigManager2 = _interopRequireDefault(_ConfigManager);

function DatabaseInstance() {

  if (typeof window.DatabaseInstance_ !== 'undefined') return Promise.resolve(window.DatabaseInstance_);

  window.DatabaseInstance_ = new Database();

  return Promise.resolve(window.DatabaseInstance_);
}

var Database = (function () {
  function Database() {
    var _this = this;

    _classCallCheck(this, Database);

    (0, _ConfigManager2['default'])().then(function (configManager) {

      var config = configManager.config;

      _this.db_ = null;
      _this.name_ = config.name;
      _this.version_ = config.version;
      _this.stores_ = config.stores;
    });
  }

  _createClass(Database, [{
    key: 'getStore',
    value: function getStore(storeName) {

      if (!this.stores_[storeName]) throw 'There is no store with name "' + storeName + '"';

      return this.stores_[storeName];
    }
  }, {
    key: 'open',
    value: function open() {
      var _this2 = this;

      if (this.db_) return Promise.resolve(this.db_);

      return new Promise(function (resolve, reject) {

        var dbOpen = indexedDB.open(_this2.name_, _this2.version_);

        dbOpen.onupgradeneeded = function (e) {

          _this2.db_ = e.target.result;

          var storeNames = Object.keys(_this2.stores_);
          var storeName;

          for (var s = 0; s < storeNames.length; s++) {

            storeName = storeNames[s];

            // If the store already exists
            if (_this2.db_.objectStoreNames.contains(storeName)) {

              // Check to see if the store should be deleted.
              // If so delete, and if not skip to the next store.
              if (_this2.stores_[storeName].deleteOnUpgrade) _this2.db_.deleteObjectStore(storeName);else continue;
            }

            var dbStore = _this2.db_.createObjectStore(storeName, _this2.stores_[storeName].properties);

            if (typeof _this2.stores_[storeName].indexes !== 'undefined') {
              var indexes = _this2.stores_[storeName].indexes;
              var indexNames = Object.keys(indexes);
              var index;

              for (var i = 0; i < indexNames.length; i++) {
                index = indexNames[i];
                dbStore.createIndex(index, index, indexes[index]);
              }
            }
          }
        };

        dbOpen.onsuccess = function (e) {
          _this2.db_ = e.target.result;
          resolve(_this2.db_);
        };

        dbOpen.onerror = function (e) {
          reject(e);
        };
      });
    }
  }, {
    key: 'close',
    value: function close() {
      var _this3 = this;

      return new Promise(function (resolve, reject) {

        if (!_this3.db_) reject('No database connection');

        _this3.db_.close();
        resolve(_this3.db_);
      });
    }
  }, {
    key: 'nuke',
    value: function nuke() {
      var _this4 = this;

      return new Promise(function (resolve, reject) {

        console.log("Nuking... " + _this4.name_);

        _this4.close();

        var dbTransaction = indexedDB.deleteDatabase(_this4.name_);
        dbTransaction.onsuccess = function (e) {
          console.log("Nuked...");
          resolve(e);
        };

        dbTransaction.onerror = function (e) {
          reject(e);
        };
      });
    }
  }, {
    key: 'put',
    value: function put(storeName, value, key) {

      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readwrite');
          var dbStore = dbTransaction.objectStore(storeName);
          var dbRequest = dbStore.put(value, key);

          dbTransaction.oncomplete = function (e) {
            resolve(dbRequest.result);
          };

          dbTransaction.onabort = dbTransaction.onerror = function (e) {
            reject(e);
          };
        });
      });
    }
  }, {
    key: 'get',
    value: function get(storeName, value) {

      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readonly');
          var dbStore = dbTransaction.objectStore(storeName);
          var dbStoreRequest;

          dbTransaction.oncomplete = function (e) {
            resolve(dbStoreRequest.result);
          };

          dbTransaction.onabort = dbTransaction.onerror = function (e) {
            reject(e);
          };

          dbStoreRequest = dbStore.get(value);
        });
      });
    }
  }, {
    key: 'getAll',
    value: function getAll(storeName, index, order) {

      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readonly');
          var dbStore = dbTransaction.objectStore(storeName);
          var dbCursor;

          if (typeof order !== 'string') order = 'next';

          if (typeof index === 'string') dbCursor = dbStore.index(index).openCursor(null, order);else dbCursor = dbStore.openCursor();

          var dbResults = [];

          dbCursor.onsuccess = function (e) {
            var cursor = e.target.result;

            if (cursor) {
              dbResults.push({
                key: cursor.key,
                value: cursor.value
              });
              cursor['continue']();
            } else {
              resolve(dbResults);
            }
          };

          dbCursor.onerror = function (e) {
            reject(e);
          };
        });
      });
    }
  }, {
    key: 'delete',
    value: function _delete(storeName, key) {
      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readwrite');
          var dbStore = dbTransaction.objectStore(storeName);

          dbTransaction.oncomplete = function (e) {
            resolve(e);
          };

          dbTransaction.onabort = dbTransaction.onerror = function (e) {
            reject(e);
          };

          dbStore['delete'](key);
        });
      });
    }
  }, {
    key: 'deleteAll',
    value: function deleteAll(storeName) {

      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readwrite');
          var dbStore = dbTransaction.objectStore(storeName);
          var dbRequest = dbStore.clear();

          dbRequest.onsuccess = function (e) {
            resolve(e);
          };

          dbRequest.onerror = function (e) {
            reject(e);
          };
        });
      });
    }
  }]);

  return Database;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2xpYnMvRGF0YWJhc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztxQkFtQndCLGdCQUFnQjs7Ozs7OzZCQUZOLGlCQUFpQjs7OztBQUVwQyxTQUFTLGdCQUFnQixHQUFJOztBQUUxQyxNQUFJLE9BQU8sTUFBTSxDQUFDLGlCQUFpQixLQUFLLFdBQVcsRUFDakQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDOztBQUVuRCxRQUFNLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQzs7QUFFMUMsU0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0NBQ2xEOztJQUVLLFFBQVE7QUFFQSxXQUZSLFFBQVEsR0FFRzs7OzBCQUZYLFFBQVE7O0FBSVYscUNBQXVCLENBQUMsSUFBSSxDQUFFLFVBQUMsYUFBYSxFQUFLOztBQUUvQyxVQUFJLE1BQU0sR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDOztBQUVsQyxZQUFLLEdBQUcsR0FBRyxJQUFJLENBQUM7QUFDaEIsWUFBSyxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztBQUN6QixZQUFLLFFBQVEsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQy9CLFlBQUssT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7S0FFOUIsQ0FBQyxDQUFDO0dBQ0o7O2VBZEcsUUFBUTs7V0FnQkgsa0JBQUMsU0FBUyxFQUFFOztBQUVuQixVQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFDMUIsTUFBTSwrQkFBK0IsR0FBRyxTQUFTLEdBQUcsR0FBRyxDQUFDOztBQUUxRCxhQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7S0FD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cHRzL2xpYnMvRGF0YWJhc2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuXG5pbXBvcnQgQ29uZmlnTWFuYWdlckluc3RhbmNlIGZyb20gJy4vQ29uZmlnTWFuYWdlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERhdGFiYXNlSW5zdGFuY2UgKCkge1xuXG4gIGlmICh0eXBlb2Ygd2luZG93LkRhdGFiYXNlSW5zdGFuY2VfICE9PSAndW5kZWZpbmVkJylcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdpbmRvdy5EYXRhYmFzZUluc3RhbmNlXyk7XG5cbiAgd2luZG93LkRhdGFiYXNlSW5zdGFuY2VfID0gbmV3IERhdGFiYXNlKCk7XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh3aW5kb3cuRGF0YWJhc2VJbnN0YW5jZV8pO1xufVxuXG5jbGFzcyBEYXRhYmFzZSB7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuXG4gICAgQ29uZmlnTWFuYWdlckluc3RhbmNlKCkudGhlbiggKGNvbmZpZ01hbmFnZXIpID0+IHtcblxuICAgICAgdmFyIGNvbmZpZyA9IGNvbmZpZ01hbmFnZXIuY29uZmlnO1xuXG4gICAgICB0aGlzLmRiXyA9IG51bGw7XG4gICAgICB0aGlzLm5hbWVfID0gY29uZmlnLm5hbWU7XG4gICAgICB0aGlzLnZlcnNpb25fID0gY29uZmlnLnZlcnNpb247XG4gICAgICB0aGlzLnN0b3Jlc18gPSBjb25maWcuc3RvcmVzO1xuXG4gICAgfSk7XG4gIH1cblxuICBnZXRTdG9yZSAoc3RvcmVOYW1lKSB7XG5cbiAgICBpZiAoIXRoaXMuc3RvcmVzX1tzdG9yZU5hbWVdKVxuICAgICAgdGhyb3cgJ1RoZXJlIGlzIG5vIHN0b3JlIHdpdGggbmFtZSBcIicgKyBzdG9yZU5hbWUgKyAnXCInO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RvcmVzX1tzdG9yZU5hbWVdO1xuICB9XG5cbiAgb3BlbiAoKSB7XG5cbiAgICBpZiAodGhpcy5kYl8pXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuZGJfKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIHZhciBkYk9wZW4gPSBpbmRleGVkREIub3Blbih0aGlzLm5hbWVfLCB0aGlzLnZlcnNpb25fKTtcblxuICAgICAgZGJPcGVuLm9udXBncmFkZW5lZWRlZCA9IChlKSA9PiB7XG5cbiAgICAgICAgdGhpcy5kYl8gPSBlLnRhcmdldC5yZXN1bHQ7XG5cbiAgICAgICAgdmFyIHN0b3JlTmFtZXMgPSBPYmplY3Qua2V5cyh0aGlzLnN0b3Jlc18pO1xuICAgICAgICB2YXIgc3RvcmVOYW1lO1xuXG4gICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgc3RvcmVOYW1lcy5sZW5ndGg7IHMrKykge1xuXG4gICAgICAgICAgc3RvcmVOYW1lID0gc3RvcmVOYW1lc1tzXTtcblxuICAgICAgICAgIC8vIElmIHRoZSBzdG9yZSBhbHJlYWR5IGV4aXN0c1xuICAgICAgICAgIGlmICh0aGlzLmRiXy5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKHN0b3JlTmFtZSkpIHtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBzdG9yZSBzaG91bGQgYmUgZGVsZXRlZC5cbiAgICAgICAgICAgIC8vIElmIHNvIGRlbGV0ZSwgYW5kIGlmIG5vdCBza2lwIHRvIHRoZSBuZXh0IHN0b3JlLlxuICAgICAgICAgICAgaWYgKHRoaXMuc3RvcmVzX1tzdG9yZU5hbWVdLmRlbGV0ZU9uVXBncmFkZSlcbiAgICAgICAgICAgICAgdGhpcy5kYl8uZGVsZXRlT2JqZWN0U3RvcmUoc3RvcmVOYW1lKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGRiU3RvcmUgPSB0aGlzLmRiXy5jcmVhdGVPYmplY3RTdG9yZShcbiAgICAgICAgICAgIHN0b3JlTmFtZSxcbiAgICAgICAgICAgIHRoaXMuc3RvcmVzX1tzdG9yZU5hbWVdLnByb3BlcnRpZXNcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnN0b3Jlc19bc3RvcmVOYW1lXS5pbmRleGVzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdmFyIGluZGV4ZXMgPSB0aGlzLnN0b3Jlc19bc3RvcmVOYW1lXS5pbmRleGVzO1xuICAgICAgICAgICAgdmFyIGluZGV4TmFtZXMgPSBPYmplY3Qua2V5cyhpbmRleGVzKTtcbiAgICAgICAgICAgIHZhciBpbmRleDtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmRleE5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGluZGV4ID0gaW5kZXhOYW1lc1tpXTtcbiAgICAgICAgICAgICAgZGJTdG9yZS5jcmVhdGVJbmRleChpbmRleCwgaW5kZXgsIGluZGV4ZXNbaW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZGJPcGVuLm9uc3VjY2VzcyA9IChlKSA9PiB7XG4gICAgICAgIHRoaXMuZGJfID0gZS50YXJnZXQucmVzdWx0O1xuICAgICAgICByZXNvbHZlKHRoaXMuZGJfKTtcbiAgICAgIH1cblxuICAgICAgZGJPcGVuLm9uZXJyb3IgPSAoZSkgPT4ge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9O1xuXG4gICAgfSk7XG4gIH1cblxuICBjbG9zZSAoKSB7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBpZiAoIXRoaXMuZGJfKVxuICAgICAgICByZWplY3QoJ05vIGRhdGFiYXNlIGNvbm5lY3Rpb24nKTtcblxuICAgICAgdGhpcy5kYl8uY2xvc2UoKTtcbiAgICAgIHJlc29sdmUodGhpcy5kYl8pO1xuXG4gICAgfSk7XG4gIH1cblxuICBudWtlICgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBjb25zb2xlLmxvZyhcIk51a2luZy4uLiBcIiArIHRoaXMubmFtZV8pO1xuXG4gICAgICB0aGlzLmNsb3NlKCk7XG5cbiAgICAgIHZhciBkYlRyYW5zYWN0aW9uID0gaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKHRoaXMubmFtZV8pO1xuICAgICAgZGJUcmFuc2FjdGlvbi5vbnN1Y2Nlc3MgPSAoZSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIk51a2VkLi4uXCIpO1xuICAgICAgICByZXNvbHZlKGUpO1xuICAgICAgfVxuXG4gICAgICBkYlRyYW5zYWN0aW9uLm9uZXJyb3IgPSAoZSkgPT4ge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdXQgKHN0b3JlTmFtZSwgdmFsdWUsIGtleSkge1xuXG4gICAgcmV0dXJuIHRoaXMub3BlbigpLnRoZW4oKGRiKSA9PiB7XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgICAgdmFyIGRiVHJhbnNhY3Rpb24gPSBkYi50cmFuc2FjdGlvbihzdG9yZU5hbWUsICdyZWFkd3JpdGUnKTtcbiAgICAgICAgdmFyIGRiU3RvcmUgPSBkYlRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHN0b3JlTmFtZSk7XG4gICAgICAgIHZhciBkYlJlcXVlc3QgPSBkYlN0b3JlLnB1dCh2YWx1ZSwga2V5KTtcblxuICAgICAgICBkYlRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSAoZSkgPT4ge1xuICAgICAgICAgIHJlc29sdmUoZGJSZXF1ZXN0LnJlc3VsdCk7XG4gICAgICAgIH1cblxuICAgICAgICBkYlRyYW5zYWN0aW9uLm9uYWJvcnQgPVxuICAgICAgICBkYlRyYW5zYWN0aW9uLm9uZXJyb3IgPSAoZSkgPT4ge1xuICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfVxuXG4gICAgICB9KTtcblxuICAgIH0pO1xuXG4gIH1cblxuICBnZXQgKHN0b3JlTmFtZSwgdmFsdWUpIHtcblxuICAgIHJldHVybiB0aGlzLm9wZW4oKS50aGVuKChkYikgPT4ge1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgIHZhciBkYlRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCAncmVhZG9ubHknKTtcbiAgICAgICAgdmFyIGRiU3RvcmUgPSBkYlRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHN0b3JlTmFtZSk7XG4gICAgICAgIHZhciBkYlN0b3JlUmVxdWVzdDtcblxuICAgICAgICBkYlRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSAoZSkgPT4ge1xuICAgICAgICAgIHJlc29sdmUoZGJTdG9yZVJlcXVlc3QucmVzdWx0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRiVHJhbnNhY3Rpb24ub25hYm9ydCA9XG4gICAgICAgIGRiVHJhbnNhY3Rpb24ub25lcnJvciA9IChlKSA9PiB7XG4gICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGJTdG9yZVJlcXVlc3QgPSBkYlN0b3JlLmdldCh2YWx1ZSk7XG5cbiAgICAgIH0pO1xuXG4gICAgfSk7XG5cbiAgfVxuXG4gIGdldEFsbCAoc3RvcmVOYW1lLCBpbmRleCwgb3JkZXIpIHtcblxuICAgIHJldHVybiB0aGlzLm9wZW4oKS50aGVuKChkYikgPT4ge1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgIHZhciBkYlRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCAncmVhZG9ubHknKTtcbiAgICAgICAgdmFyIGRiU3RvcmUgPSBkYlRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHN0b3JlTmFtZSk7XG4gICAgICAgIHZhciBkYkN1cnNvcjtcblxuICAgICAgICBpZiAodHlwZW9mIG9yZGVyICE9PSAnc3RyaW5nJylcbiAgICAgICAgICBvcmRlciA9ICduZXh0JztcblxuICAgICAgICBpZiAodHlwZW9mIGluZGV4ID09PSAnc3RyaW5nJylcbiAgICAgICAgICBkYkN1cnNvciA9IGRiU3RvcmUuaW5kZXgoaW5kZXgpLm9wZW5DdXJzb3IobnVsbCwgb3JkZXIpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgZGJDdXJzb3IgPSBkYlN0b3JlLm9wZW5DdXJzb3IoKTtcblxuICAgICAgICB2YXIgZGJSZXN1bHRzID0gW107XG5cbiAgICAgICAgZGJDdXJzb3Iub25zdWNjZXNzID0gKGUpID0+IHtcbiAgICAgICAgICB2YXIgY3Vyc29yID0gZS50YXJnZXQucmVzdWx0O1xuXG4gICAgICAgICAgaWYgKGN1cnNvcikge1xuICAgICAgICAgICAgZGJSZXN1bHRzLnB1c2goe1xuICAgICAgICAgICAgICBrZXk6IGN1cnNvci5rZXksXG4gICAgICAgICAgICAgIHZhbHVlOiBjdXJzb3IudmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY3Vyc29yLmNvbnRpbnVlKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoZGJSZXN1bHRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkYkN1cnNvci5vbmVycm9yID0gKGUpID0+IHtcbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cblxuICAgICAgfSk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIGRlbGV0ZSAoc3RvcmVOYW1lLCBrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5vcGVuKCkudGhlbigoZGIpID0+IHtcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgICB2YXIgZGJUcmFuc2FjdGlvbiA9IGRiLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgJ3JlYWR3cml0ZScpO1xuICAgICAgICB2YXIgZGJTdG9yZSA9IGRiVHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoc3RvcmVOYW1lKTtcblxuICAgICAgICBkYlRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSAoZSkgPT4ge1xuICAgICAgICAgIHJlc29sdmUoZSk7XG4gICAgICAgIH1cblxuICAgICAgICBkYlRyYW5zYWN0aW9uLm9uYWJvcnQgPVxuICAgICAgICBkYlRyYW5zYWN0aW9uLm9uZXJyb3IgPSAoZSkgPT4ge1xuICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRiU3RvcmUuZGVsZXRlKGtleSk7XG5cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZGVsZXRlQWxsIChzdG9yZU5hbWUpIHtcblxuICAgIHJldHVybiB0aGlzLm9wZW4oKS50aGVuKChkYikgPT4ge1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgIHZhciBkYlRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCAncmVhZHdyaXRlJyk7XG4gICAgICAgIHZhciBkYlN0b3JlID0gZGJUcmFuc2FjdGlvbi5vYmplY3RTdG9yZShzdG9yZU5hbWUpO1xuICAgICAgICB2YXIgZGJSZXF1ZXN0ID0gZGJTdG9yZS5jbGVhcigpO1xuXG4gICAgICAgIGRiUmVxdWVzdC5vbnN1Y2Nlc3MgPSAoZSkgPT4ge1xuICAgICAgICAgIHJlc29sdmUoZSk7XG4gICAgICAgIH1cblxuICAgICAgICBkYlJlcXVlc3Qub25lcnJvciA9IChlKSA9PiB7XG4gICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9XG5cbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxufVxuIl19
},{"./ConfigManager":5}],7:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = PubSubInstance;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function PubSubInstance() {

  if (typeof window.PubSubInstance_ !== 'undefined') return Promise.resolve(window.PubSubInstance_);

  window.PubSubInstance_ = new PubSub();

  return Promise.resolve(window.PubSubInstance_);
}

var PubSub = (function () {
  function PubSub() {
    _classCallCheck(this, PubSub);

    this.subs = {};
  }

  _createClass(PubSub, [{
    key: 'sub',
    value: function sub(name, callback) {

      if (!this.subs[name]) this.subs[name] = [];

      this.subs[name].push(callback);
    }
  }, {
    key: 'unsub',
    value: function unsub(name, callback) {

      if (!this.subs[name]) return;

      var index = this.subs.indexOf(callback);

      if (index === -1) return;

      this.subs.splice(index, 1);
    }
  }, {
    key: 'pub',
    value: function pub(name, message) {

      if (!this.subs[name]) return;

      this.subs[name].forEach(function (subscriber) {
        subscriber(message);
      });
    }
  }]);

  return PubSub;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2xpYnMvUHViU3ViLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUJBaUJ3QixjQUFjOzs7O0FBQXZCLFNBQVMsY0FBYyxHQUFJOztBQUV4QyxNQUFJLE9BQU8sTUFBTSxDQUFDLGVBQWUsS0FBSyxXQUFXLEVBQy9DLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7O0FBRWpELFFBQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQzs7QUFFdEMsU0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztDQUNoRDs7SUFFSyxNQUFNO0FBRUUsV0FGUixNQUFNLEdBRUs7MEJBRlgsTUFBTTs7QUFHUixRQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztHQUNoQjs7ZUFKRyxNQUFNOztXQU1OLGFBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTs7QUFFbkIsVUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDOztBQUV2QixVQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNoQzs7O1dBRUssZUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFFOztBQUVyQixVQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFDbEIsT0FBTzs7QUFFVCxVQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzs7QUFFeEMsVUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQ2QsT0FBTzs7QUFFVCxVQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDNUI7OztXQUVHLGFBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRTs7QUFFbEIsVUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ2xCLE9BQU87O0FBRVQsVUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxVQUFVLEVBQUk7QUFDcEMsa0JBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztPQUNyQixDQUFDLENBQUE7S0FDSDs7O1NBbkNHLE1BQU0iLCJmaWxlIjoiL1VzZXJzL2hlcm1hbncvRG9jdW1lbnRzL2hlcm13b25nL2lvc1Rlc3Qvc3JjL3NjcmlwdHMvbGlicy9QdWJTdWIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQdWJTdWJJbnN0YW5jZSAoKSB7XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cuUHViU3ViSW5zdGFuY2VfICE9PSAndW5kZWZpbmVkJylcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdpbmRvdy5QdWJTdWJJbnN0YW5jZV8pO1xuXG4gIHdpbmRvdy5QdWJTdWJJbnN0YW5jZV8gPSBuZXcgUHViU3ViKCk7XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh3aW5kb3cuUHViU3ViSW5zdGFuY2VfKTtcbn1cblxuY2xhc3MgUHViU3ViIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5zdWJzID0ge307XG4gIH1cblxuICBzdWIgKG5hbWUsIGNhbGxiYWNrKSB7XG5cbiAgICBpZiAoIXRoaXMuc3Vic1tuYW1lXSlcbiAgICAgIHRoaXMuc3Vic1tuYW1lXSA9IFtdO1xuXG4gICAgdGhpcy5zdWJzW25hbWVdLnB1c2goY2FsbGJhY2spO1xuICB9XG5cbiAgdW5zdWIgKG5hbWUsIGNhbGxiYWNrKSB7XG5cbiAgICBpZiAoIXRoaXMuc3Vic1tuYW1lXSlcbiAgICAgIHJldHVybjtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuc3Vicy5pbmRleE9mKGNhbGxiYWNrKTtcblxuICAgIGlmIChpbmRleCA9PT0gLTEpXG4gICAgICByZXR1cm47XG5cbiAgICB0aGlzLnN1YnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuXG4gIHB1YiAobmFtZSwgbWVzc2FnZSkge1xuXG4gICAgaWYgKCF0aGlzLnN1YnNbbmFtZV0pXG4gICAgICByZXR1cm47XG5cbiAgICB0aGlzLnN1YnNbbmFtZV0uZm9yRWFjaChzdWJzY3JpYmVyID0+IHtcbiAgICAgIHN1YnNjcmliZXIobWVzc2FnZSk7XG4gICAgfSlcbiAgfVxuXG59XG4iXX0=
},{}],8:[function(require,module,exports){
/**
 * Copyright 2014 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = RouterInstance;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function RouterInstance() {

  if (typeof window.RouterInstance_ !== 'undefined') return Promise.resolve(window.RouterInstance_);

  window.RouterInstance_ = new Router();

  return Promise.resolve(window.RouterInstance_);
}

var Router = (function () {
  function Router() {
    var _this = this;

    _classCallCheck(this, Router);

    this.routes = {};
    this.currentAction = null;
    this.loader = document.querySelector('.loader');

    window.addEventListener('popstate', function (e) {
      _this.onPopState(e);
    });

    this.manageState();
  }

  _createClass(Router, [{
    key: 'add',
    value: function add(path, callbackIn, callbackOut, callbackUpdate) {
      var _this2 = this;

      // Assume the first part of the path is the
      // verb we want to action, with the rest of the path
      // being the data to pass to the handler.
      var pathParts = path.split('/');
      var action = pathParts.shift();

      if (this.routes[action]) throw "A handler already exists for this action: " + action;

      this.routes[action] = {
        'in': callbackIn,
        out: callbackOut,
        update: callbackUpdate
      };

      // Check to see if this path is fulfilled.
      requestAnimationFrame(function () {
        if (_this2.manageState()) {
          document.body.classList.remove('deeplink');
        }
      });
    }
  }, {
    key: 'remove',
    value: function remove(path) {

      var pathParts = path.split('/');
      var action = pathParts.shift();

      if (!this.routes[action]) return;

      delete this.routes[action];
    }
  }, {
    key: 'manageState',
    value: function manageState() {

      var path = document.location.pathname.replace(/^\//, '');

      // Assume the first part of the path is the
      // verb we want to action, with the rest of the path
      // being the data to pass to the handler.
      var pathParts = path.split('/');
      var action = pathParts.shift();
      var data = pathParts.join('/');

      // Add a special case for the root.
      if (action === '') action = '_root';

      // Remove any deeplink covers.
      if (document.body.classList.contains('app-deeplink')) document.body.classList.remove('app-deeplink');

      // Hide the loader.
      this.loader.classList.add('hidden');

      if (this.currentAction === this.routes[action]) {

        if (typeof this.currentAction.update === 'function') {
          this.currentAction.update(data);
          return true;
        }

        return false;
      }

      if (!this.routes[action]) {

        if (this.currentAction) this.currentAction.out();

        this.currentAction = null;
        document.body.focus();
        return false;
      }

      // Set the new action going.
      var delay = this.routes[action]['in'](data) || 0;

      // Remove the old action and update the reference.
      if (this.currentAction) {

        // Allow the incoming view to delay the outgoing one
        // so that we don't get too much overlapping animation.
        if (delay === 0) this.currentAction.out();else setTimeout(this.currentAction.out, delay);
      }

      this.currentAction = this.routes[action];

      return true;
    }
  }, {
    key: 'go',
    value: function go(path) {
      var _this3 = this;

      // Only process real changes.
      if (path === window.location.pathname) return;

      history.pushState(undefined, "", path);
      requestAnimationFrame(function () {
        _this3.manageState();
      });
    }
  }, {
    key: 'onPopState',
    value: function onPopState(e) {
      var _this4 = this;

      e.preventDefault();
      requestAnimationFrame(function () {
        _this4.manageState();
      });
    }
  }]);

  return Router;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],9:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Model2 = require('./Model');

var _Model3 = _interopRequireDefault(_Model2);

var MemoModel = (function (_Model) {
  _inherits(MemoModel, _Model);

  function MemoModel(data, key) {
    _classCallCheck(this, MemoModel);

    _get(Object.getPrototypeOf(MemoModel.prototype), 'constructor', this).call(this, key);

    this.title = data.title || 'Untitled Memo';
    this.description = data.description || null;
    this.url = data.url || MemoModel.makeURL();
    this.audio = data.audio || null;
    this.volumeData = data.volumeData || null;
    this.time = data.time || Date.now();
    this.transcript = data.transcript || null;
  }

  _createClass(MemoModel, null, [{
    key: 'makeURL',
    value: function makeURL() {
      var url = '';
      for (var i = 0; i < 16; i++) {
        url += Number(Math.floor(Math.random() * 16)).toString(16);
      }

      return url;
    }
  }, {
    key: 'UPDATED',
    get: function get() {
      return 'MemoModel-updated';
    }
  }, {
    key: 'storeName',
    get: function get() {
      return 'MemoModel';
    }
  }]);

  return MemoModel;
})(_Model3['default']);

exports['default'] = MemoModel;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL21vZGVsL01lbW9Nb2RlbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c0JBaUJrQixTQUFTOzs7O0lBRU4sU0FBUztZQUFULFNBQVM7O0FBRWhCLFdBRk8sU0FBUyxDQUVmLElBQUksRUFBRSxHQUFHLEVBQUU7MEJBRkwsU0FBUzs7QUFJMUIsK0JBSmlCLFNBQVMsNkNBSXBCLEdBQUcsRUFBRTs7QUFFWCxRQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksZUFBZSxDQUFDO0FBQzNDLFFBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUM7QUFDNUMsUUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUMzQyxRQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDO0FBQ2hDLFFBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUM7QUFDMUMsUUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQyxRQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDO0dBQzNDOztlQWJrQixTQUFTOztXQWViLG1CQUFHO0FBQ2hCLFVBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFdBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDM0IsV0FBRyxJQUFJLE1BQU0sQ0FDVCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FDakMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7T0FDaEI7O0FBRUQsYUFBTyxHQUFHLENBQUM7S0FDWjs7O1NBRWtCLGVBQUc7QUFDcEIsYUFBTyxtQkFBbUIsQ0FBQztLQUM1Qjs7O1NBRW9CLGVBQUc7QUFDdEIsYUFBTyxXQUFXLENBQUM7S0FDcEI7OztTQWhDa0IsU0FBUzs7O3FCQUFULFNBQVMiLCJmaWxlIjoiL1VzZXJzL2hlcm1hbncvRG9jdW1lbnRzL2hlcm13b25nL2lvc1Rlc3Qvc3JjL3NjcmlwdHMvbW9kZWwvTWVtb01vZGVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IE1vZGVsIGZyb20gJy4vTW9kZWwnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZW1vTW9kZWwgZXh0ZW5kcyBNb2RlbCB7XG5cbiAgY29uc3RydWN0b3IgKGRhdGEsIGtleSkge1xuXG4gICAgc3VwZXIoa2V5KTtcblxuICAgIHRoaXMudGl0bGUgPSBkYXRhLnRpdGxlIHx8ICdVbnRpdGxlZCBNZW1vJztcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvbiB8fCBudWxsO1xuICAgIHRoaXMudXJsID0gZGF0YS51cmwgfHwgTWVtb01vZGVsLm1ha2VVUkwoKTtcbiAgICB0aGlzLmF1ZGlvID0gZGF0YS5hdWRpbyB8fCBudWxsO1xuICAgIHRoaXMudm9sdW1lRGF0YSA9IGRhdGEudm9sdW1lRGF0YSB8fCBudWxsO1xuICAgIHRoaXMudGltZSA9IGRhdGEudGltZSB8fCBEYXRlLm5vdygpO1xuICAgIHRoaXMudHJhbnNjcmlwdCA9IGRhdGEudHJhbnNjcmlwdCB8fCBudWxsO1xuICB9XG5cbiAgc3RhdGljIG1ha2VVUkwgKCkge1xuICAgIHZhciB1cmwgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgIHVybCArPSBOdW1iZXIoXG4gICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTYpXG4gICAgICApLnRvU3RyaW5nKDE2KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgc3RhdGljIGdldCBVUERBVEVEICgpIHtcbiAgICByZXR1cm4gJ01lbW9Nb2RlbC11cGRhdGVkJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgc3RvcmVOYW1lICgpIHtcbiAgICByZXR1cm4gJ01lbW9Nb2RlbCc7XG4gIH1cblxufVxuIl19
},{"./Model":10}],10:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _libsDatabase = require('../libs/Database');

var _libsDatabase2 = _interopRequireDefault(_libsDatabase);

var _libsConfigManager = require('../libs/ConfigManager');

var _libsConfigManager2 = _interopRequireDefault(_libsConfigManager);

var Model = (function () {
  function Model(key) {
    _classCallCheck(this, Model);

    this.key = key;
  }

  _createClass(Model, [{
    key: 'put',
    value: function put() {
      return this.constructor.put(this);
    }

    /**
     * Either inserts or update depending on whether the key / keyPath is set.
     * If the keyPath is set, and a property of the value matches (in-line key)
     * then the object is updated. If the keyPath is not set and the value's key
     * is null, then the object is inserted. If the keypath is not set and the
     * value's key is set then the object is updated.
     */
  }, {
    key: 'delete',
    value: function _delete() {
      return this.constructor['delete'](this);
    }
  }], [{
    key: 'nuke',
    value: function nuke() {
      return (0, _libsDatabase2['default'])().then(function (db) {
        return db.close();
      }).then(function (db) {
        return db.nuke();
      });
    }
  }, {
    key: 'get',
    value: function get(key) {
      var _this = this;

      if (this instanceof Model) Promise.reject("Can't call get on Model directly. Inherit first.");

      return (0, _libsDatabase2['default'])()

      // Do the query.
      .then(function (db) {
        return db.get(_this.storeName, key);
      })

      // Wrap the result in the correct class.
      .then(function (result) {

        return (0, _libsConfigManager2['default'])().then(function (configManager) {

          var store = configManager.getStore(_this.storeName);

          if (!result) return;

          var resultKey = key;

          // If the store uses a keypath then reset
          // the key back to undefined.
          if (store.properties.keyPath) resultKey = undefined;

          return new _this(result, resultKey);
        });
      });
    }

    /**
     * Gets all the objects from the database.
     */
  }, {
    key: 'getAll',
    value: function getAll(index, order) {
      var _this2 = this;

      if (this instanceof Model) Promise.reject("Can't call getAll on Model directly. Inherit first.");

      return (0, _libsDatabase2['default'])()

      // Do the query.
      .then(function (db) {
        return db.getAll(_this2.storeName, index, order);
      })

      // Wrap all the results in the correct class.
      .then(function (results) {

        return (0, _libsConfigManager2['default'])().then(function (configManager) {

          var store = configManager.getStore(_this2.storeName);
          var results_ = [];

          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = results[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var result = _step.value;

              var key = result.key;

              // If the store uses a keypath then reset
              // the key back to undefined.
              if (store.properties.keyPath) key = undefined;

              results_.push(new _this2(result.value, key));
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          return results_;
        });
      });
    }
  }, {
    key: 'put',
    value: function put(value) {
      var _this3 = this;

      if (this instanceof Model) Promise.reject("Can't call put on Model directly. Inherit first.");

      return (0, _libsDatabase2['default'])()

      // Do the query.
      .then(function (db) {
        return db.put(_this3.storeName, value, value.key);
      }).then(function (key) {

        return (0, _libsConfigManager2['default'])().then(function (configManager) {

          // Inserting may provide a key. If there is no keyPath set
          // the object needs to be updated with a key value so it can
          // be altered and saved again without creating a new record.
          var store = configManager.getStore(_this3.storeName);

          var keyPath = store.properties.keyPath;

          if (!keyPath) value.key = key;

          return value;
        });
      });
    }
  }, {
    key: 'deleteAll',
    value: function deleteAll() {
      var _this4 = this;

      if (this instanceof Model) Promise.reject("Can't call deleteAll on Model directly. Inherit first.");

      return (0, _libsDatabase2['default'])().then(function (db) {
        return db.deleteAll(_this4.storeName);
      })['catch'](function (e) {
        // It may be that the store doesn't exist yet, so relax for that one.
        if (e.name !== 'NotFoundError') throw e;
      });
    }
  }, {
    key: 'delete',
    value: function _delete(value) {
      var _this5 = this;

      if (this instanceof Model) Promise.reject("Can't call delete on Model directly. Inherit first.");

      return (0, _libsConfigManager2['default'])().then(function (configManager) {

        // If passed the full object to delete then
        // grab its key for the delete
        if (value instanceof _this5) {

          var store = configManager.getStore(_this5.storeName);
          var keyPath = store.properties.keyPath;

          if (keyPath) value = value[keyPath];else value = value.key;
        }

        return (0, _libsDatabase2['default'])().then(function (db) {
          return db['delete'](_this5.storeName, value);
        });
      });
    }
  }, {
    key: 'ASCENDING',
    get: function get() {
      return 'next';
    }
  }, {
    key: 'DESCENDING',
    get: function get() {
      return 'prev';
    }
  }, {
    key: 'UPDATED',
    get: function get() {
      return 'Model-updated';
    }
  }, {
    key: 'storeName',
    get: function get() {
      return 'Model';
    }
  }]);

  return Model;
})();

exports['default'] = Model;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../libs/ConfigManager":5,"../libs/Database":6}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
