/*!
 * Copyright 2017 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _controllerRecordController = require('./controller/RecordController');

var _controllerRecordController2 = _interopRequireDefault(_controllerRecordController);

new _controllerRecordController2['default']();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL3ZvaWNlbWVtby1yZWNvcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBDQWlCNkIsK0JBQStCOzs7O0FBRTVELDZDQUFzQixDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL3ZvaWNlbWVtby1yZWNvcmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuXG5pbXBvcnQgUmVjb3JkQ29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXIvUmVjb3JkQ29udHJvbGxlcic7XG5cbm5ldyBSZWNvcmRDb250cm9sbGVyKCk7XG4iXX0=
},{"./controller/RecordController":4}],2:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var Config = {
  name: 'voicememo',
  version: 1,
  stores: {
    'MemoModel': {
      properties: {
        autoIncrement: true,
        keyPath: 'url'
      },
      indexes: {
        time: { unique: true }
      }
    },
    'AppModel': {
      deleteOnUpgrade: true,
      properties: {
        autoIncrement: true
      }
    }
  }
};

exports['default'] = Config;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2NvbmZpZy9Db25maWcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSxJQUFNLE1BQU0sR0FBRztBQUNiLE1BQUksRUFBRSxXQUFXO0FBQ2pCLFNBQU8sRUFBRSxDQUFDO0FBQ1YsUUFBTSxFQUFFO0FBQ04sZUFBVyxFQUFFO0FBQ1gsZ0JBQVUsRUFBRTtBQUNWLHFCQUFhLEVBQUUsSUFBSTtBQUNuQixlQUFPLEVBQUUsS0FBSztPQUNmO0FBQ0QsYUFBTyxFQUFFO0FBQ1AsWUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtPQUN2QjtLQUNGO0FBQ0QsY0FBVSxFQUFFO0FBQ1YscUJBQWUsRUFBRSxJQUFJO0FBQ3JCLGdCQUFVLEVBQUU7QUFDVixxQkFBYSxFQUFFLElBQUk7T0FDcEI7S0FDRjtHQUNGO0NBQ0YsQ0FBQzs7cUJBRWEsTUFBTSIsImZpbGUiOiIvVXNlcnMvaGVybWFudy9Eb2N1bWVudHMvaGVybXdvbmcvaW9zVGVzdC9zcmMvc2NyaXB0cy9jb25maWcvQ29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuY29uc3QgQ29uZmlnID0ge1xuICBuYW1lOiAndm9pY2VtZW1vJyxcbiAgdmVyc2lvbjogMSxcbiAgc3RvcmVzOiB7XG4gICAgJ01lbW9Nb2RlbCc6IHtcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZSxcbiAgICAgICAga2V5UGF0aDogJ3VybCdcbiAgICAgIH0sXG4gICAgICBpbmRleGVzOiB7XG4gICAgICAgIHRpbWU6IHsgdW5pcXVlOiB0cnVlIH1cbiAgICAgIH1cbiAgICB9LFxuICAgICdBcHBNb2RlbCc6IHtcbiAgICAgIGRlbGV0ZU9uVXBncmFkZTogdHJ1ZSxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29uZmlnO1xuIl19
},{}],3:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Controller = (function () {
  function Controller() {
    _classCallCheck(this, Controller);
  }

  _createClass(Controller, [{
    key: 'loadScript',
    value: function loadScript(url) {

      return new Promise(function (resolve, reject) {
        var script = document.createElement('script');
        script.async = true;
        script.src = url;

        script.onload = resolve;
        script.onerror = reject;

        document.head.appendChild(script);
      });
    }
  }, {
    key: 'loadCSS',
    value: function loadCSS(url) {
      return new Promise(function (resolve, reject) {

        var xhr = new XMLHttpRequest();
        xhr.open('GET', url);
        xhr.responseType = 'text';
        xhr.onload = function (e) {

          if (this.status == 200) {

            var style = document.createElement('style');
            style.textContent = xhr.response;
            document.head.appendChild(style);
            resolve();
          } else {

            reject();
          }
        };

        xhr.send();
      });
    }
  }]);

  return Controller;
})();

exports['default'] = Controller;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2NvbnRyb2xsZXIvQ29udHJvbGxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFpQnFCLFVBQVU7V0FBVixVQUFVOzBCQUFWLFVBQVU7OztlQUFWLFVBQVU7O1dBRWxCLG9CQUFDLEdBQUcsRUFBRTs7QUFFZixhQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBSztBQUN0QyxZQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzlDLGNBQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ3BCLGNBQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDOztBQUVqQixjQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztBQUN4QixjQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQzs7QUFFeEIsZ0JBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO09BQ25DLENBQUMsQ0FBQztLQUNKOzs7V0FFTyxpQkFBQyxHQUFHLEVBQUU7QUFDWixhQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBSzs7QUFFdEMsWUFBSSxHQUFHLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztBQUMvQixXQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNyQixXQUFHLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQztBQUMxQixXQUFHLENBQUMsTUFBTSxHQUFHLFVBQVMsQ0FBQyxFQUFFOztBQUV2QixjQUFJLElBQUksQ0FBQyxNQUFNLElBQUksR0FBRyxFQUFFOztBQUV0QixnQkFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM1QyxpQkFBSyxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO0FBQ2pDLG9CQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqQyxtQkFBTyxFQUFFLENBQUM7V0FFWCxNQUFNOztBQUVMLGtCQUFNLEVBQUUsQ0FBQztXQUVWO1NBQ0YsQ0FBQTs7QUFFRCxXQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7T0FFWixDQUFDLENBQUM7S0FDSjs7O1NBekNrQixVQUFVOzs7cUJBQVYsVUFBVSIsImZpbGUiOiIvVXNlcnMvaGVybWFudy9Eb2N1bWVudHMvaGVybXdvbmcvaW9zVGVzdC9zcmMvc2NyaXB0cy9jb250cm9sbGVyL0NvbnRyb2xsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb250cm9sbGVyIHtcblxuICBsb2FkU2NyaXB0ICh1cmwpIHtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgICAgc2NyaXB0LnNyYyA9IHVybDtcblxuICAgICAgc2NyaXB0Lm9ubG9hZCA9IHJlc29sdmU7XG4gICAgICBzY3JpcHQub25lcnJvciA9IHJlamVjdDtcblxuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIH0pO1xuICB9XG5cbiAgbG9hZENTUyAodXJsKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT0gMjAwKSB7XG5cbiAgICAgICAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0geGhyLnJlc3BvbnNlO1xuICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgICAgICAgIHJlc29sdmUoKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgcmVqZWN0KCk7XG5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB4aHIuc2VuZCgpO1xuXG4gICAgfSk7XG4gIH1cblxufVxuIl19
},{}],4:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* global MediaRecorder */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Controller2 = require('./Controller');

var _Controller3 = _interopRequireDefault(_Controller2);

var _modelMemoModel = require('../model/MemoModel');

var _modelMemoModel2 = _interopRequireDefault(_modelMemoModel);

var _libsPubSub = require('../libs/PubSub');

var _libsPubSub2 = _interopRequireDefault(_libsPubSub);

var _libsRouter = require('../libs/Router');

var _libsRouter2 = _interopRequireDefault(_libsRouter);

var _libsDialog = require('../libs/Dialog');

var _libsDialog2 = _interopRequireDefault(_libsDialog);

var _recordingMediaRecording = require('../recording/MediaRecording');

var _recordingMediaRecording2 = _interopRequireDefault(_recordingMediaRecording);

var RecordController = (function (_Controller) {
  _inherits(RecordController, _Controller);

  function RecordController() {
    var _this = this;

    _classCallCheck(this, RecordController);

    _get(Object.getPrototypeOf(RecordController.prototype), 'constructor', this).call(this);

    this.usesMediaRecorder = 'MediaRecorder' in window;
    this.deletePendingRecording = false;
    this.recording = false;
    this.mediaRecording = null;
    this.analyser = null;
    this.view = document.querySelector('.js-record-view');
    this.showViewButton = document.querySelector('.js-new-recording-btn');

    this.volumeReadout = this.view.querySelector('.js-volume-readout');
    this.volumeReadoutCtx = this.volumeReadout.getContext('2d');

    this.volumeReadout.width = 4;
    this.volumeReadout.height = 67;
    this.drawVolumeReadout();

    this.recordCancelButton = this.view.querySelector('.js-record-cancel-btn');
    this.recordStartButton = this.view.querySelector('.js-record-start-btn');
    this.recordStopButton = this.view.querySelector('.js-record-stop-btn');
    this.recordStartButton.disabled = false;
    this.recordStopButton.disabled = true;

    this.recordStartButton.addEventListener('click', function () {
      _this.startRecording();
    });

    this.recordStopButton.addEventListener('click', function () {
      _this.stopRecording();
    });

    this.recordCancelButton.addEventListener('click', function () {

      _this.deletePendingRecording = true;

      (0, _libsRouter2['default'])().then(function (router) {
        router.go('/');
      });
    });

    this.loadScript('/third_party/Recorderjs/recorder.js');
    this.loadCSS('/styles/voicememo-record.css').then(function () {

      _this.view.classList.remove('hidden');

      (0, _libsRouter2['default'])().then(function (router) {
        router.add('create', function (data) {
          return _this.show(data);
        }, function () {
          return _this.hide();
        });
      });

      _this.showViewButton.addEventListener('click', function () {

        (0, _libsRouter2['default'])().then(function (router) {
          router.go('/create');
        });
      });

      if (_this.showViewButton.classList.contains('pending')) {
        _this.showViewButton.classList.remove('pending');

        (0, _libsRouter2['default'])().then(function (router) {
          router.go('/create');
        });
      }
    });

    // Hide the file size warning if the MediaRecorder API is present.
    if ('MediaRecorder' in window && typeof MediaRecorder.canRecordMimeType === 'undefined') {
      document.querySelector('.record-view__warning').style.display = 'none';
    }
  }

  _createClass(RecordController, [{
    key: 'show',
    value: function show() {
      this.view.classList.add('record-view--visible');
      this.recordStartButton.tabIndex = 1;
      this.recordStartButton.focus();
    }
  }, {
    key: 'hide',
    value: function hide() {
      this.recordStartButton.tabIndex = -1;
      this.stopRecording();
      this.mediaRecording = null;

      this.view.classList.remove('record-view--visible');
    }
  }, {
    key: 'drawVolumeReadout',
    value: function drawVolumeReadout() {
      var volume = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

      this.volumeReadoutCtx.save();
      this.volumeReadoutCtx.clearRect(0, 0, 4, 67);
      this.volumeReadoutCtx.translate(0, 63);

      var fillStyle;
      for (var v = 0; v < 10; v++) {

        fillStyle = '#D8D8D8';
        if (v < volume) fillStyle = '#673AB7';

        this.volumeReadoutCtx.fillStyle = fillStyle;
        this.volumeReadoutCtx.beginPath();
        this.volumeReadoutCtx.arc(2, 2, 2, 0, Math.PI * 2);
        this.volumeReadoutCtx.closePath();
        this.volumeReadoutCtx.fill();
        this.volumeReadoutCtx.translate(0, -7);
      }

      this.volumeReadoutCtx.restore();
    }
  }, {
    key: 'startRecording',
    value: function startRecording() {
      var _this2 = this;

      if (this.recording) return;

      var volumeData = [];
      var volumeMax = 1;
      var volumeSum = 0;

      this.recording = true;
      this.mediaRecording = new _recordingMediaRecording2['default']();
      this.mediaRecording.complete.then(function (audioData) {

        // Null audio data represents a cancelled recording.
        if (audioData === null) return;

        // Normalize volume data
        for (var d = 0; d < volumeData.length; d++) {
          volumeData[d] /= volumeMax;
        }

        var newMemo = new _modelMemoModel2['default']({
          audio: audioData,
          volumeData: volumeData
        });

        // Now show the form...
        newMemo.put().then(function () {

          (0, _libsPubSub2['default'])().then(function (ps) {
            ps.pub(_modelMemoModel2['default'].UPDATED);
          });

          // By rights we should show the user something that lets
          // them edit the title, description, etc.
          (0, _libsRouter2['default'])().then(function (router) {
            router.go('/edit/' + newMemo.url);
          });
        });
      }, function (err) {

        (0, _libsDialog2['default'])().then(function (dialog) {

          var hideCancelButton = true;

          return dialog.show('Booooo!', 'There is a problem getting access to the microphone.', hideCancelButton);
        }).then(function () {
          _this2.deletePendingRecording = true;
          _this2.stopRecording();
        })['catch'](function () {});
      });

      setTimeout(function () {
        requestAnimationFrame(function () {
          _this2.recordStopButton.disabled = false;
          _this2.recordStartButton.disabled = true;
          _this2.recordStopButton.focus();
        });
      }, 80);

      this.mediaRecording.analyser.then(function (analyser) {
        var analyserDataSize = 256;
        var analyserStart = 32;
        var analyserEnd = analyserDataSize;
        var analyserDataRange = analyserEnd - analyserStart;
        var analyserData = new Uint8Array(analyserDataSize);

        analyser.fftSize = analyserDataSize;
        analyser.smoothingTimeConstant = 0.3;

        var trackAudioVolume = function trackAudioVolume() {

          volumeSum = 0;
          analyser.getByteFrequencyData(analyserData);

          for (var i = analyserStart; i < analyserEnd; i++) {
            volumeSum += analyserData[i];
          }

          var volume = volumeSum / analyserDataRange;
          if (volume > volumeMax) volumeMax = volume;

          volumeData.push(volume);
          _this2.drawVolumeReadout(volume / 10);

          if (!_this2.recording) {
            _this2.drawVolumeReadout();
            return;
          }

          requestAnimationFrame(trackAudioVolume);
        };

        requestAnimationFrame(trackAudioVolume);
      });
    }
  }, {
    key: 'stopRecording',
    value: function stopRecording() {

      this.recording = false;

      this.recordStopButton.disabled = true;
      this.recordStartButton.disabled = false;

      if (!this.mediaRecording) return;

      this.mediaRecording.stop(this.deletePendingRecording);
      this.deletePendingRecording = false;
    }
  }]);

  return RecordController;
})(_Controller3['default']);

exports['default'] = RecordController;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../libs/Dialog":7,"../libs/PubSub":8,"../libs/Router":9,"../model/MemoModel":10,"../recording/MediaRecording":12,"./Controller":3}],5:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = ConfigManagerInstance;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _configConfig = require('../config/Config');

var _configConfig2 = _interopRequireDefault(_configConfig);

function ConfigManagerInstance() {

  if (typeof window.ConfigManagerInstance_ !== 'undefined') return Promise.resolve(window.ConfigManagerInstance_);

  window.ConfigManagerInstance_ = new ConfigManager();

  return Promise.resolve(window.ConfigManagerInstance_);
}

var ConfigManager = (function () {
  function ConfigManager() {
    _classCallCheck(this, ConfigManager);

    this.config = _configConfig2['default'];
  }

  _createClass(ConfigManager, [{
    key: 'getStore',
    value: function getStore(storeName) {
      return this.config_.stores[storeName];
    }
  }, {
    key: 'config',
    set: function set(c) {
      this.config_ = c;
    },
    get: function get() {
      return this.config_;
    }
  }]);

  return ConfigManager;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2xpYnMvQ29uZmlnTWFuYWdlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FCQW1Cd0IscUJBQXFCOzs7Ozs7NEJBRjFCLGtCQUFrQjs7OztBQUV0QixTQUFTLHFCQUFxQixHQUFJOztBQUUvQyxNQUFJLE9BQU8sTUFBTSxDQUFDLHNCQUFzQixLQUFLLFdBQVcsRUFDdEQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDOztBQUV4RCxRQUFNLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQzs7QUFFcEQsU0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0NBQ3ZEOztJQUVLLGFBQWE7QUFFTCxXQUZSLGFBQWEsR0FFRjswQkFGWCxhQUFhOztBQUdmLFFBQUksQ0FBQyxNQUFNLDRCQUFTLENBQUM7R0FDdEI7O2VBSkcsYUFBYTs7V0FjUixrQkFBQyxTQUFTLEVBQUU7QUFDbkIsYUFBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUN2Qzs7O1NBVlUsYUFBQyxDQUFDLEVBQUU7QUFDYixVQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztLQUNsQjtTQUVVLGVBQUc7QUFDWixhQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7S0FDckI7OztTQVpHLGFBQWEiLCJmaWxlIjoiL1VzZXJzL2hlcm1hbncvRG9jdW1lbnRzL2hlcm13b25nL2lvc1Rlc3Qvc3JjL3NjcmlwdHMvbGlicy9Db25maWdNYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IENvbmZpZyBmcm9tICcuLi9jb25maWcvQ29uZmlnJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29uZmlnTWFuYWdlckluc3RhbmNlICgpIHtcblxuICBpZiAodHlwZW9mIHdpbmRvdy5Db25maWdNYW5hZ2VySW5zdGFuY2VfICE9PSAndW5kZWZpbmVkJylcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdpbmRvdy5Db25maWdNYW5hZ2VySW5zdGFuY2VfKTtcblxuICB3aW5kb3cuQ29uZmlnTWFuYWdlckluc3RhbmNlXyA9IG5ldyBDb25maWdNYW5hZ2VyKCk7XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh3aW5kb3cuQ29uZmlnTWFuYWdlckluc3RhbmNlXyk7XG59XG5cbmNsYXNzIENvbmZpZ01hbmFnZXIge1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLmNvbmZpZyA9IENvbmZpZztcbiAgfVxuXG4gIHNldCBjb25maWcgKGMpIHtcbiAgICB0aGlzLmNvbmZpZ18gPSBjO1xuICB9XG5cbiAgZ2V0IGNvbmZpZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnXztcbiAgfVxuXG4gIGdldFN0b3JlIChzdG9yZU5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWdfLnN0b3Jlc1tzdG9yZU5hbWVdO1xuICB9XG5cbn1cbiJdfQ==
},{"../config/Config":2}],6:[function(require,module,exports){
/**
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = DatabaseInstance;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ConfigManager = require('./ConfigManager');

var _ConfigManager2 = _interopRequireDefault(_ConfigManager);

function DatabaseInstance() {

  if (typeof window.DatabaseInstance_ !== 'undefined') return Promise.resolve(window.DatabaseInstance_);

  window.DatabaseInstance_ = new Database();

  return Promise.resolve(window.DatabaseInstance_);
}

var Database = (function () {
  function Database() {
    var _this = this;

    _classCallCheck(this, Database);

    (0, _ConfigManager2['default'])().then(function (configManager) {

      var config = configManager.config;

      _this.db_ = null;
      _this.name_ = config.name;
      _this.version_ = config.version;
      _this.stores_ = config.stores;
    });
  }

  _createClass(Database, [{
    key: 'getStore',
    value: function getStore(storeName) {

      if (!this.stores_[storeName]) throw 'There is no store with name "' + storeName + '"';

      return this.stores_[storeName];
    }
  }, {
    key: 'open',
    value: function open() {
      var _this2 = this;

      if (this.db_) return Promise.resolve(this.db_);

      return new Promise(function (resolve, reject) {

        var dbOpen = indexedDB.open(_this2.name_, _this2.version_);

        dbOpen.onupgradeneeded = function (e) {

          _this2.db_ = e.target.result;

          var storeNames = Object.keys(_this2.stores_);
          var storeName;

          for (var s = 0; s < storeNames.length; s++) {

            storeName = storeNames[s];

            // If the store already exists
            if (_this2.db_.objectStoreNames.contains(storeName)) {

              // Check to see if the store should be deleted.
              // If so delete, and if not skip to the next store.
              if (_this2.stores_[storeName].deleteOnUpgrade) _this2.db_.deleteObjectStore(storeName);else continue;
            }

            var dbStore = _this2.db_.createObjectStore(storeName, _this2.stores_[storeName].properties);

            if (typeof _this2.stores_[storeName].indexes !== 'undefined') {
              var indexes = _this2.stores_[storeName].indexes;
              var indexNames = Object.keys(indexes);
              var index;

              for (var i = 0; i < indexNames.length; i++) {
                index = indexNames[i];
                dbStore.createIndex(index, index, indexes[index]);
              }
            }
          }
        };

        dbOpen.onsuccess = function (e) {
          _this2.db_ = e.target.result;
          resolve(_this2.db_);
        };

        dbOpen.onerror = function (e) {
          reject(e);
        };
      });
    }
  }, {
    key: 'close',
    value: function close() {
      var _this3 = this;

      return new Promise(function (resolve, reject) {

        if (!_this3.db_) reject('No database connection');

        _this3.db_.close();
        resolve(_this3.db_);
      });
    }
  }, {
    key: 'nuke',
    value: function nuke() {
      var _this4 = this;

      return new Promise(function (resolve, reject) {

        console.log("Nuking... " + _this4.name_);

        _this4.close();

        var dbTransaction = indexedDB.deleteDatabase(_this4.name_);
        dbTransaction.onsuccess = function (e) {
          console.log("Nuked...");
          resolve(e);
        };

        dbTransaction.onerror = function (e) {
          reject(e);
        };
      });
    }
  }, {
    key: 'put',
    value: function put(storeName, value, key) {

      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readwrite');
          var dbStore = dbTransaction.objectStore(storeName);
          var dbRequest = dbStore.put(value, key);

          dbTransaction.oncomplete = function (e) {
            resolve(dbRequest.result);
          };

          dbTransaction.onabort = dbTransaction.onerror = function (e) {
            reject(e);
          };
        });
      });
    }
  }, {
    key: 'get',
    value: function get(storeName, value) {

      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readonly');
          var dbStore = dbTransaction.objectStore(storeName);
          var dbStoreRequest;

          dbTransaction.oncomplete = function (e) {
            resolve(dbStoreRequest.result);
          };

          dbTransaction.onabort = dbTransaction.onerror = function (e) {
            reject(e);
          };

          dbStoreRequest = dbStore.get(value);
        });
      });
    }
  }, {
    key: 'getAll',
    value: function getAll(storeName, index, order) {

      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readonly');
          var dbStore = dbTransaction.objectStore(storeName);
          var dbCursor;

          if (typeof order !== 'string') order = 'next';

          if (typeof index === 'string') dbCursor = dbStore.index(index).openCursor(null, order);else dbCursor = dbStore.openCursor();

          var dbResults = [];

          dbCursor.onsuccess = function (e) {
            var cursor = e.target.result;

            if (cursor) {
              dbResults.push({
                key: cursor.key,
                value: cursor.value
              });
              cursor['continue']();
            } else {
              resolve(dbResults);
            }
          };

          dbCursor.onerror = function (e) {
            reject(e);
          };
        });
      });
    }
  }, {
    key: 'delete',
    value: function _delete(storeName, key) {
      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readwrite');
          var dbStore = dbTransaction.objectStore(storeName);

          dbTransaction.oncomplete = function (e) {
            resolve(e);
          };

          dbTransaction.onabort = dbTransaction.onerror = function (e) {
            reject(e);
          };

          dbStore['delete'](key);
        });
      });
    }
  }, {
    key: 'deleteAll',
    value: function deleteAll(storeName) {

      return this.open().then(function (db) {

        return new Promise(function (resolve, reject) {

          var dbTransaction = db.transaction(storeName, 'readwrite');
          var dbStore = dbTransaction.objectStore(storeName);
          var dbRequest = dbStore.clear();

          dbRequest.onsuccess = function (e) {
            resolve(e);
          };

          dbRequest.onerror = function (e) {
            reject(e);
          };
        });
      });
    }
  }]);

  return Database;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./ConfigManager":5}],7:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = DialogInstance;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function DialogInstance() {

  if (typeof window.DialogInstance_ !== 'undefined') return Promise.resolve(window.DialogInstance_);

  window.DialogInstance_ = new Dialog();

  return Promise.resolve(window.DialogInstance_);
}

var Dialog = (function () {
  function Dialog() {
    _classCallCheck(this, Dialog);

    this.view = document.querySelector('.js-dialog');
    this.title = this.view.querySelector('.js-title');
    this.message = this.view.querySelector('.js-message');
    this.cancelButton = this.view.querySelector('.js-cancel');
    this.okayButton = this.view.querySelector('.js-okay');
  }

  _createClass(Dialog, [{
    key: 'show',
    value: function show(title, message, hideCancel) {
      var _this = this;

      this.title.textContent = title;
      this.message.textContent = message;
      this.view.classList.add('dialog-view--visible');

      if (hideCancel) this.cancelButton.classList.add('hidden');else this.cancelButton.classList.remove('hidden');

      return new Promise(function (resolve, reject) {

        var removeEventListenersAndHide = function removeEventListenersAndHide() {
          _this.cancelButton.removeEventListener('click', onCancel);
          _this.okayButton.removeEventListener('click', onOkay);
          _this.view.classList.remove('dialog-view--visible');
        };

        var onCancel = function onCancel(e) {
          removeEventListenersAndHide();
          reject();
        };

        var onOkay = function onOkay(e) {
          removeEventListenersAndHide();
          resolve();
        };

        _this.cancelButton.addEventListener('click', onCancel);
        _this.okayButton.addEventListener('click', onOkay);
      });
    }
  }]);

  return Dialog;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2xpYnMvRGlhbG9nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUJBaUJ3QixjQUFjOzs7O0FBQXZCLFNBQVMsY0FBYyxHQUFJOztBQUV4QyxNQUFJLE9BQU8sTUFBTSxDQUFDLGVBQWUsS0FBSyxXQUFXLEVBQy9DLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7O0FBRWpELFFBQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQzs7QUFFdEMsU0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztDQUNoRDs7SUFFSyxNQUFNO0FBRUUsV0FGUixNQUFNLEdBRUs7MEJBRlgsTUFBTTs7QUFHUixRQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDakQsUUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNsRCxRQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3RELFFBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDMUQsUUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztHQUN2RDs7ZUFSRyxNQUFNOztXQVVMLGNBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUU7OztBQUVoQyxVQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7QUFDL0IsVUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO0FBQ25DLFVBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDOztBQUVoRCxVQUFJLFVBQVUsRUFDWixJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsS0FFMUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztBQUUvQyxhQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBSzs7QUFFdEMsWUFBSSwyQkFBMkIsR0FBRyxTQUE5QiwyQkFBMkIsR0FBUztBQUN0QyxnQkFBSyxZQUFZLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3pELGdCQUFLLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDckQsZ0JBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQztTQUNwRCxDQUFBOztBQUVELFlBQUksUUFBUSxHQUFHLFNBQVgsUUFBUSxDQUFJLENBQUMsRUFBSztBQUNwQixxQ0FBMkIsRUFBRSxDQUFDO0FBQzlCLGdCQUFNLEVBQUUsQ0FBQztTQUNWLENBQUE7O0FBRUQsWUFBSSxNQUFNLEdBQUcsU0FBVCxNQUFNLENBQUksQ0FBQyxFQUFLO0FBQ2xCLHFDQUEyQixFQUFFLENBQUM7QUFDOUIsaUJBQU8sRUFBRSxDQUFDO1NBQ1gsQ0FBQTs7QUFFRCxjQUFLLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDdEQsY0FBSyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO09BRW5ELENBQUMsQ0FBQztLQUNKOzs7U0EzQ0csTUFBTSIsImZpbGUiOiIvVXNlcnMvaGVybWFudy9Eb2N1bWVudHMvaGVybXdvbmcvaW9zVGVzdC9zcmMvc2NyaXB0cy9saWJzL0RpYWxvZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcbiAqIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERpYWxvZ0luc3RhbmNlICgpIHtcblxuICBpZiAodHlwZW9mIHdpbmRvdy5EaWFsb2dJbnN0YW5jZV8gIT09ICd1bmRlZmluZWQnKVxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUod2luZG93LkRpYWxvZ0luc3RhbmNlXyk7XG5cbiAgd2luZG93LkRpYWxvZ0luc3RhbmNlXyA9IG5ldyBEaWFsb2coKTtcblxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdpbmRvdy5EaWFsb2dJbnN0YW5jZV8pO1xufVxuXG5jbGFzcyBEaWFsb2cge1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICB0aGlzLnZpZXcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtZGlhbG9nJyk7XG4gICAgdGhpcy50aXRsZSA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtdGl0bGUnKTtcbiAgICB0aGlzLm1lc3NhZ2UgPSB0aGlzLnZpZXcucXVlcnlTZWxlY3RvcignLmpzLW1lc3NhZ2UnKTtcbiAgICB0aGlzLmNhbmNlbEJ1dHRvbiA9IHRoaXMudmlldy5xdWVyeVNlbGVjdG9yKCcuanMtY2FuY2VsJyk7XG4gICAgdGhpcy5va2F5QnV0dG9uID0gdGhpcy52aWV3LnF1ZXJ5U2VsZWN0b3IoJy5qcy1va2F5Jyk7XG4gIH1cblxuICBzaG93ICh0aXRsZSwgbWVzc2FnZSwgaGlkZUNhbmNlbCkge1xuXG4gICAgdGhpcy50aXRsZS50ZXh0Q29udGVudCA9IHRpdGxlO1xuICAgIHRoaXMubWVzc2FnZS50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG4gICAgdGhpcy52aWV3LmNsYXNzTGlzdC5hZGQoJ2RpYWxvZy12aWV3LS12aXNpYmxlJyk7XG5cbiAgICBpZiAoaGlkZUNhbmNlbClcbiAgICAgIHRoaXMuY2FuY2VsQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgIGVsc2VcbiAgICAgIHRoaXMuY2FuY2VsQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgdmFyIHJlbW92ZUV2ZW50TGlzdGVuZXJzQW5kSGlkZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5jYW5jZWxCdXR0b24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNhbmNlbCk7XG4gICAgICAgIHRoaXMub2theUJ1dHRvbi5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG9uT2theSk7XG4gICAgICAgIHRoaXMudmlldy5jbGFzc0xpc3QucmVtb3ZlKCdkaWFsb2ctdmlldy0tdmlzaWJsZScpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb25DYW5jZWwgPSAoZSkgPT4ge1xuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyc0FuZEhpZGUoKTtcbiAgICAgICAgcmVqZWN0KCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvbk9rYXkgPSAoZSkgPT4ge1xuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyc0FuZEhpZGUoKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNhbmNlbEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2FuY2VsKTtcbiAgICAgIHRoaXMub2theUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uT2theSk7XG5cbiAgICB9KTtcbiAgfVxuXG59XG4iXX0=
},{}],8:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = PubSubInstance;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function PubSubInstance() {

  if (typeof window.PubSubInstance_ !== 'undefined') return Promise.resolve(window.PubSubInstance_);

  window.PubSubInstance_ = new PubSub();

  return Promise.resolve(window.PubSubInstance_);
}

var PubSub = (function () {
  function PubSub() {
    _classCallCheck(this, PubSub);

    this.subs = {};
  }

  _createClass(PubSub, [{
    key: 'sub',
    value: function sub(name, callback) {

      if (!this.subs[name]) this.subs[name] = [];

      this.subs[name].push(callback);
    }
  }, {
    key: 'unsub',
    value: function unsub(name, callback) {

      if (!this.subs[name]) return;

      var index = this.subs.indexOf(callback);

      if (index === -1) return;

      this.subs.splice(index, 1);
    }
  }, {
    key: 'pub',
    value: function pub(name, message) {

      if (!this.subs[name]) return;

      this.subs[name].forEach(function (subscriber) {
        subscriber(message);
      });
    }
  }]);

  return PubSub;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL2xpYnMvUHViU3ViLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUJBaUJ3QixjQUFjOzs7O0FBQXZCLFNBQVMsY0FBYyxHQUFJOztBQUV4QyxNQUFJLE9BQU8sTUFBTSxDQUFDLGVBQWUsS0FBSyxXQUFXLEVBQy9DLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7O0FBRWpELFFBQU0sQ0FBQyxlQUFlLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQzs7QUFFdEMsU0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztDQUNoRDs7SUFFSyxNQUFNO0FBRUUsV0FGUixNQUFNLEdBRUs7MEJBRlgsTUFBTTs7QUFHUixRQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztHQUNoQjs7ZUFKRyxNQUFNOztXQU1OLGFBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTs7QUFFbkIsVUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDOztBQUV2QixVQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUNoQzs7O1dBRUssZUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFFOztBQUVyQixVQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFDbEIsT0FBTzs7QUFFVCxVQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzs7QUFFeEMsVUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQ2QsT0FBTzs7QUFFVCxVQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDNUI7OztXQUVHLGFBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRTs7QUFFbEIsVUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ2xCLE9BQU87O0FBRVQsVUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxVQUFVLEVBQUk7QUFDcEMsa0JBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztPQUNyQixDQUFDLENBQUE7S0FDSDs7O1NBbkNHLE1BQU0iLCJmaWxlIjoiL1VzZXJzL2hlcm1hbncvRG9jdW1lbnRzL2hlcm13b25nL2lvc1Rlc3Qvc3JjL3NjcmlwdHMvbGlicy9QdWJTdWIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNSBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQdWJTdWJJbnN0YW5jZSAoKSB7XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cuUHViU3ViSW5zdGFuY2VfICE9PSAndW5kZWZpbmVkJylcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHdpbmRvdy5QdWJTdWJJbnN0YW5jZV8pO1xuXG4gIHdpbmRvdy5QdWJTdWJJbnN0YW5jZV8gPSBuZXcgUHViU3ViKCk7XG5cbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh3aW5kb3cuUHViU3ViSW5zdGFuY2VfKTtcbn1cblxuY2xhc3MgUHViU3ViIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5zdWJzID0ge307XG4gIH1cblxuICBzdWIgKG5hbWUsIGNhbGxiYWNrKSB7XG5cbiAgICBpZiAoIXRoaXMuc3Vic1tuYW1lXSlcbiAgICAgIHRoaXMuc3Vic1tuYW1lXSA9IFtdO1xuXG4gICAgdGhpcy5zdWJzW25hbWVdLnB1c2goY2FsbGJhY2spO1xuICB9XG5cbiAgdW5zdWIgKG5hbWUsIGNhbGxiYWNrKSB7XG5cbiAgICBpZiAoIXRoaXMuc3Vic1tuYW1lXSlcbiAgICAgIHJldHVybjtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuc3Vicy5pbmRleE9mKGNhbGxiYWNrKTtcblxuICAgIGlmIChpbmRleCA9PT0gLTEpXG4gICAgICByZXR1cm47XG5cbiAgICB0aGlzLnN1YnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuXG4gIHB1YiAobmFtZSwgbWVzc2FnZSkge1xuXG4gICAgaWYgKCF0aGlzLnN1YnNbbmFtZV0pXG4gICAgICByZXR1cm47XG5cbiAgICB0aGlzLnN1YnNbbmFtZV0uZm9yRWFjaChzdWJzY3JpYmVyID0+IHtcbiAgICAgIHN1YnNjcmliZXIobWVzc2FnZSk7XG4gICAgfSlcbiAgfVxuXG59XG4iXX0=
},{}],9:[function(require,module,exports){
/**
 * Copyright 2014 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = RouterInstance;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function RouterInstance() {

  if (typeof window.RouterInstance_ !== 'undefined') return Promise.resolve(window.RouterInstance_);

  window.RouterInstance_ = new Router();

  return Promise.resolve(window.RouterInstance_);
}

var Router = (function () {
  function Router() {
    var _this = this;

    _classCallCheck(this, Router);

    this.routes = {};
    this.currentAction = null;
    this.loader = document.querySelector('.loader');

    window.addEventListener('popstate', function (e) {
      _this.onPopState(e);
    });

    this.manageState();
  }

  _createClass(Router, [{
    key: 'add',
    value: function add(path, callbackIn, callbackOut, callbackUpdate) {
      var _this2 = this;

      // Assume the first part of the path is the
      // verb we want to action, with the rest of the path
      // being the data to pass to the handler.
      var pathParts = path.split('/');
      var action = pathParts.shift();

      if (this.routes[action]) throw "A handler already exists for this action: " + action;

      this.routes[action] = {
        'in': callbackIn,
        out: callbackOut,
        update: callbackUpdate
      };

      // Check to see if this path is fulfilled.
      requestAnimationFrame(function () {
        if (_this2.manageState()) {
          document.body.classList.remove('deeplink');
        }
      });
    }
  }, {
    key: 'remove',
    value: function remove(path) {

      var pathParts = path.split('/');
      var action = pathParts.shift();

      if (!this.routes[action]) return;

      delete this.routes[action];
    }
  }, {
    key: 'manageState',
    value: function manageState() {

      var path = document.location.pathname.replace(/^\//, '');

      // Assume the first part of the path is the
      // verb we want to action, with the rest of the path
      // being the data to pass to the handler.
      var pathParts = path.split('/');
      var action = pathParts.shift();
      var data = pathParts.join('/');

      // Add a special case for the root.
      if (action === '') action = '_root';

      // Remove any deeplink covers.
      if (document.body.classList.contains('app-deeplink')) document.body.classList.remove('app-deeplink');

      // Hide the loader.
      this.loader.classList.add('hidden');

      if (this.currentAction === this.routes[action]) {

        if (typeof this.currentAction.update === 'function') {
          this.currentAction.update(data);
          return true;
        }

        return false;
      }

      if (!this.routes[action]) {

        if (this.currentAction) this.currentAction.out();

        this.currentAction = null;
        document.body.focus();
        return false;
      }

      // Set the new action going.
      var delay = this.routes[action]['in'](data) || 0;

      // Remove the old action and update the reference.
      if (this.currentAction) {

        // Allow the incoming view to delay the outgoing one
        // so that we don't get too much overlapping animation.
        if (delay === 0) this.currentAction.out();else setTimeout(this.currentAction.out, delay);
      }

      this.currentAction = this.routes[action];

      return true;
    }
  }, {
    key: 'go',
    value: function go(path) {
      var _this3 = this;

      // Only process real changes.
      if (path === window.location.pathname) return;

      history.pushState(undefined, "", path);
      requestAnimationFrame(function () {
        _this3.manageState();
      });
    }
  }, {
    key: 'onPopState',
    value: function onPopState(e) {
      var _this4 = this;

      e.preventDefault();
      requestAnimationFrame(function () {
        _this4.manageState();
      });
    }
  }]);

  return Router;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],10:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Model2 = require('./Model');

var _Model3 = _interopRequireDefault(_Model2);

var MemoModel = (function (_Model) {
  _inherits(MemoModel, _Model);

  function MemoModel(data, key) {
    _classCallCheck(this, MemoModel);

    _get(Object.getPrototypeOf(MemoModel.prototype), 'constructor', this).call(this, key);

    this.title = data.title || 'Untitled Memo';
    this.description = data.description || null;
    this.url = data.url || MemoModel.makeURL();
    this.audio = data.audio || null;
    this.volumeData = data.volumeData || null;
    this.time = data.time || Date.now();
    this.transcript = data.transcript || null;
  }

  _createClass(MemoModel, null, [{
    key: 'makeURL',
    value: function makeURL() {
      var url = '';
      for (var i = 0; i < 16; i++) {
        url += Number(Math.floor(Math.random() * 16)).toString(16);
      }

      return url;
    }
  }, {
    key: 'UPDATED',
    get: function get() {
      return 'MemoModel-updated';
    }
  }, {
    key: 'storeName',
    get: function get() {
      return 'MemoModel';
    }
  }]);

  return MemoModel;
})(_Model3['default']);

exports['default'] = MemoModel;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZXJtYW53L0RvY3VtZW50cy9oZXJtd29uZy9pb3NUZXN0L3NyYy9zY3JpcHRzL21vZGVsL01lbW9Nb2RlbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c0JBaUJrQixTQUFTOzs7O0lBRU4sU0FBUztZQUFULFNBQVM7O0FBRWhCLFdBRk8sU0FBUyxDQUVmLElBQUksRUFBRSxHQUFHLEVBQUU7MEJBRkwsU0FBUzs7QUFJMUIsK0JBSmlCLFNBQVMsNkNBSXBCLEdBQUcsRUFBRTs7QUFFWCxRQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksZUFBZSxDQUFDO0FBQzNDLFFBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUM7QUFDNUMsUUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUMzQyxRQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDO0FBQ2hDLFFBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUM7QUFDMUMsUUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNwQyxRQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDO0dBQzNDOztlQWJrQixTQUFTOztXQWViLG1CQUFHO0FBQ2hCLFVBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFdBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDM0IsV0FBRyxJQUFJLE1BQU0sQ0FDVCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FDakMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7T0FDaEI7O0FBRUQsYUFBTyxHQUFHLENBQUM7S0FDWjs7O1NBRWtCLGVBQUc7QUFDcEIsYUFBTyxtQkFBbUIsQ0FBQztLQUM1Qjs7O1NBRW9CLGVBQUc7QUFDdEIsYUFBTyxXQUFXLENBQUM7S0FDcEI7OztTQWhDa0IsU0FBUzs7O3FCQUFULFNBQVMiLCJmaWxlIjoiL1VzZXJzL2hlcm1hbncvRG9jdW1lbnRzL2hlcm13b25nL2lvc1Rlc3Qvc3JjL3NjcmlwdHMvbW9kZWwvTWVtb01vZGVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKlxuICogQ29weXJpZ2h0IDIwMTUgR29vZ2xlIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IE1vZGVsIGZyb20gJy4vTW9kZWwnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNZW1vTW9kZWwgZXh0ZW5kcyBNb2RlbCB7XG5cbiAgY29uc3RydWN0b3IgKGRhdGEsIGtleSkge1xuXG4gICAgc3VwZXIoa2V5KTtcblxuICAgIHRoaXMudGl0bGUgPSBkYXRhLnRpdGxlIHx8ICdVbnRpdGxlZCBNZW1vJztcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGF0YS5kZXNjcmlwdGlvbiB8fCBudWxsO1xuICAgIHRoaXMudXJsID0gZGF0YS51cmwgfHwgTWVtb01vZGVsLm1ha2VVUkwoKTtcbiAgICB0aGlzLmF1ZGlvID0gZGF0YS5hdWRpbyB8fCBudWxsO1xuICAgIHRoaXMudm9sdW1lRGF0YSA9IGRhdGEudm9sdW1lRGF0YSB8fCBudWxsO1xuICAgIHRoaXMudGltZSA9IGRhdGEudGltZSB8fCBEYXRlLm5vdygpO1xuICAgIHRoaXMudHJhbnNjcmlwdCA9IGRhdGEudHJhbnNjcmlwdCB8fCBudWxsO1xuICB9XG5cbiAgc3RhdGljIG1ha2VVUkwgKCkge1xuICAgIHZhciB1cmwgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgIHVybCArPSBOdW1iZXIoXG4gICAgICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTYpXG4gICAgICApLnRvU3RyaW5nKDE2KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgc3RhdGljIGdldCBVUERBVEVEICgpIHtcbiAgICByZXR1cm4gJ01lbW9Nb2RlbC11cGRhdGVkJztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgc3RvcmVOYW1lICgpIHtcbiAgICByZXR1cm4gJ01lbW9Nb2RlbCc7XG4gIH1cblxufVxuIl19
},{"./Model":11}],11:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _libsDatabase = require('../libs/Database');

var _libsDatabase2 = _interopRequireDefault(_libsDatabase);

var _libsConfigManager = require('../libs/ConfigManager');

var _libsConfigManager2 = _interopRequireDefault(_libsConfigManager);

var Model = (function () {
  function Model(key) {
    _classCallCheck(this, Model);

    this.key = key;
  }

  _createClass(Model, [{
    key: 'put',
    value: function put() {
      return this.constructor.put(this);
    }

    /**
     * Either inserts or update depending on whether the key / keyPath is set.
     * If the keyPath is set, and a property of the value matches (in-line key)
     * then the object is updated. If the keyPath is not set and the value's key
     * is null, then the object is inserted. If the keypath is not set and the
     * value's key is set then the object is updated.
     */
  }, {
    key: 'delete',
    value: function _delete() {
      return this.constructor['delete'](this);
    }
  }], [{
    key: 'nuke',
    value: function nuke() {
      return (0, _libsDatabase2['default'])().then(function (db) {
        return db.close();
      }).then(function (db) {
        return db.nuke();
      });
    }
  }, {
    key: 'get',
    value: function get(key) {
      var _this = this;

      if (this instanceof Model) Promise.reject("Can't call get on Model directly. Inherit first.");

      return (0, _libsDatabase2['default'])()

      // Do the query.
      .then(function (db) {
        return db.get(_this.storeName, key);
      })

      // Wrap the result in the correct class.
      .then(function (result) {

        return (0, _libsConfigManager2['default'])().then(function (configManager) {

          var store = configManager.getStore(_this.storeName);

          if (!result) return;

          var resultKey = key;

          // If the store uses a keypath then reset
          // the key back to undefined.
          if (store.properties.keyPath) resultKey = undefined;

          return new _this(result, resultKey);
        });
      });
    }

    /**
     * Gets all the objects from the database.
     */
  }, {
    key: 'getAll',
    value: function getAll(index, order) {
      var _this2 = this;

      if (this instanceof Model) Promise.reject("Can't call getAll on Model directly. Inherit first.");

      return (0, _libsDatabase2['default'])()

      // Do the query.
      .then(function (db) {
        return db.getAll(_this2.storeName, index, order);
      })

      // Wrap all the results in the correct class.
      .then(function (results) {

        return (0, _libsConfigManager2['default'])().then(function (configManager) {

          var store = configManager.getStore(_this2.storeName);
          var results_ = [];

          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = results[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var result = _step.value;

              var key = result.key;

              // If the store uses a keypath then reset
              // the key back to undefined.
              if (store.properties.keyPath) key = undefined;

              results_.push(new _this2(result.value, key));
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          return results_;
        });
      });
    }
  }, {
    key: 'put',
    value: function put(value) {
      var _this3 = this;

      if (this instanceof Model) Promise.reject("Can't call put on Model directly. Inherit first.");

      return (0, _libsDatabase2['default'])()

      // Do the query.
      .then(function (db) {
        return db.put(_this3.storeName, value, value.key);
      }).then(function (key) {

        return (0, _libsConfigManager2['default'])().then(function (configManager) {

          // Inserting may provide a key. If there is no keyPath set
          // the object needs to be updated with a key value so it can
          // be altered and saved again without creating a new record.
          var store = configManager.getStore(_this3.storeName);

          var keyPath = store.properties.keyPath;

          if (!keyPath) value.key = key;

          return value;
        });
      });
    }
  }, {
    key: 'deleteAll',
    value: function deleteAll() {
      var _this4 = this;

      if (this instanceof Model) Promise.reject("Can't call deleteAll on Model directly. Inherit first.");

      return (0, _libsDatabase2['default'])().then(function (db) {
        return db.deleteAll(_this4.storeName);
      })['catch'](function (e) {
        // It may be that the store doesn't exist yet, so relax for that one.
        if (e.name !== 'NotFoundError') throw e;
      });
    }
  }, {
    key: 'delete',
    value: function _delete(value) {
      var _this5 = this;

      if (this instanceof Model) Promise.reject("Can't call delete on Model directly. Inherit first.");

      return (0, _libsConfigManager2['default'])().then(function (configManager) {

        // If passed the full object to delete then
        // grab its key for the delete
        if (value instanceof _this5) {

          var store = configManager.getStore(_this5.storeName);
          var keyPath = store.properties.keyPath;

          if (keyPath) value = value[keyPath];else value = value.key;
        }

        return (0, _libsDatabase2['default'])().then(function (db) {
          return db['delete'](_this5.storeName, value);
        });
      });
    }
  }, {
    key: 'ASCENDING',
    get: function get() {
      return 'next';
    }
  }, {
    key: 'DESCENDING',
    get: function get() {
      return 'prev';
    }
  }, {
    key: 'UPDATED',
    get: function get() {
      return 'Model-updated';
    }
  }, {
    key: 'storeName',
    get: function get() {
      return 'Model';
    }
  }]);

  return Model;
})();

exports['default'] = Model;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../libs/ConfigManager":5,"../libs/Database":6}],12:[function(require,module,exports){
/**
 *
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* global MediaRecorder, Recorder */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var MediaRecording = (function () {
  function MediaRecording() {
    _classCallCheck(this, MediaRecording);

    this.usesMediaRecorder = 'MediaRecorder' in window && typeof MediaRecorder.canRecordMimeType === 'undefined';

    this.recorder = this.usesMediaRecorder ? new MRRecorder() : new LegacyRecorder();
  }

  _createClass(MediaRecording, [{
    key: 'stop',
    value: function stop() {
      var deletePendingRecording = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      this.recorder.stop(deletePendingRecording);
    }
  }, {
    key: 'complete',
    get: function get() {
      return this.recorder.complete;
    }
  }, {
    key: 'analyser',
    get: function get() {
      return this.recorder.analyser;
    }
  }]);

  return MediaRecording;
})();

exports['default'] = MediaRecording;

var MRRecorder = (function () {
  function MRRecorder() {
    var _this = this;

    _classCallCheck(this, MRRecorder);

    console.log('Using MediaRecorder API.');

    this.deletePendingRecording = false;
    this.recorder = null;
    this.stream = null;
    this.recordedData = [];
    this.audioContext = new AudioContext();
    this.sourceNode = undefined;

    this.complete = new Promise(function (resolve, reject) {

      var config = {
        video: false,
        audio: true
      };

      var onStreamSuccess = function onStreamSuccess(stream) {

        _this.stream = stream;
        _this.sourceNode = _this.audioContext.createMediaStreamSource(stream);

        _this.recorder = new MediaRecorder(stream, {
          mimeType: 'audio/webm'
        });

        _this.recorder.addEventListener('error', function (evt) {
          reject(evt);
        });

        _this.recorder.addEventListener('dataavailable', function (evt) {

          if (typeof evt.data === 'undefined') return;

          if (evt.data.size === 0) return;

          _this.recordedData.push(evt.data);
        });

        _this.recorder.addEventListener('stop', function (evt) {

          var tracks = stream.getTracks();
          tracks.forEach(function (track) {
            return track.stop();
          });

          var audioData = new Blob(_this.recordedData, {
            type: 'audio/webm'
          });

          if (_this.deletePendingRecording) {
            _this.deletePendingRecording = false;
            audioData = null;
          }

          resolve(audioData);
        });

        // Record in 10ms bursts.
        _this.recorder.start(10);
      };

      navigator.getUserMedia(config, onStreamSuccess, function (err) {
        return reject(err);
      });
    });
  }

  _createClass(MRRecorder, [{
    key: 'stop',
    value: function stop(deletePendingRecording) {

      if (this.recorder.state !== 'recording') return;

      this.deletePendingRecording = deletePendingRecording;
      this.recorder.stop();
    }
  }, {
    key: 'analyser',
    get: function get() {
      var _this2 = this;

      return new Promise(function (resolve, reject) {

        var maxCount = 200;
        var checkForSourceNode = function checkForSourceNode() {

          if (typeof _this2.sourceNode === 'undefined') {

            // Wait up to 20 seconds.
            maxCount--;
            if (maxCount === 0) return reject();

            return setTimeout(checkForSourceNode, 100);
          }

          var listener = _this2.audioContext.createAnalyser();
          _this2.sourceNode.connect(listener);

          resolve(listener);
        };

        checkForSourceNode();
      });
    }
  }]);

  return MRRecorder;
})();

var LegacyRecorder = (function () {
  function LegacyRecorder() {
    var _this3 = this;

    _classCallCheck(this, LegacyRecorder);

    console.log('Using legacy recorder.');

    this.recorder = null;
    this.deletePendingRecording = false;

    this.complete = new Promise(function (resolve, reject) {

      _this3.recorder = new Recorder({
        workerPath: 'third_party/Recorderjs/recorderWorker.js',
        recordOpus: false
      });

      _this3.recorder.addEventListener('dataAvailable', function (evt) {

        var audioData = evt.detail;

        if (_this3.deletePendingRecording) {
          _this3.deletePendingRecording = false;
          audioData = null;
        }

        _this3.killStream();
        resolve(audioData);
      });

      _this3.recorder.addEventListener('streamReady', function () {
        _this3.recorder.start();
      });

      _this3.recorder.addEventListener('streamError', function (err) {
        reject(err);
      });
    });
  }

  _createClass(LegacyRecorder, [{
    key: 'stop',
    value: function stop(deletePendingRecording) {
      this.deletePendingRecording = deletePendingRecording;
      this.recorder.stop();
    }
  }, {
    key: 'killStream',
    value: function killStream() {
      if (!this.recorder.stream) return;

      var tracks = this.recorder.stream.getTracks();
      tracks.forEach(function (track) {
        return track.stop();
      });
    }
  }, {
    key: 'analyser',
    get: function get() {
      var _this4 = this;

      return new Promise(function (resolve, reject) {

        var maxCount = 200;
        var checkForSourceNode = function checkForSourceNode() {

          if (typeof _this4.recorder.sourceNode === 'undefined') {

            // Wait up to 20 seconds.
            maxCount--;
            if (maxCount === 0) return reject();

            return setTimeout(checkForSourceNode, 100);
          }

          var listener = _this4.recorder.audioContext.createAnalyser();
          _this4.recorder.sourceNode.connect(listener);

          resolve(listener);
        };

        checkForSourceNode();
      });
    }
  }]);

  return LegacyRecorder;
})();

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
